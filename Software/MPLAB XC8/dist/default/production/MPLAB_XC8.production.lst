

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Sep 15 20:13:26 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text18,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text20,local,class=CODE,merge=1,delta=2
    28                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.00
    33                           ; Generated 27/05/2018 GMT
    34                           ; 
    35                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC12F1840 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  008C                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0097                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  010C                     	;# 
   107  0111                     	;# 
   108  0112                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011A                     	;# 
   115  011B                     	;# 
   116  011D                     	;# 
   117  011D                     	;# 
   118  018C                     	;# 
   119  0191                     	;# 
   120  0191                     	;# 
   121  0192                     	;# 
   122  0193                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0194                     	;# 
   126  0195                     	;# 
   127  0196                     	;# 
   128  0197                     	;# 
   129  0199                     	;# 
   130  019A                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019C                     	;# 
   136  019C                     	;# 
   137  019D                     	;# 
   138  019E                     	;# 
   139  019F                     	;# 
   140  020C                     	;# 
   141  0211                     	;# 
   142  0211                     	;# 
   143  0212                     	;# 
   144  0212                     	;# 
   145  0213                     	;# 
   146  0213                     	;# 
   147  0214                     	;# 
   148  0214                     	;# 
   149  0215                     	;# 
   150  0215                     	;# 
   151  0215                     	;# 
   152  0216                     	;# 
   153  0216                     	;# 
   154  0217                     	;# 
   155  0217                     	;# 
   156  0291                     	;# 
   157  0291                     	;# 
   158  0292                     	;# 
   159  0293                     	;# 
   160  0294                     	;# 
   161  0295                     	;# 
   162  0295                     	;# 
   163  0296                     	;# 
   164  0391                     	;# 
   165  0392                     	;# 
   166  0393                     	;# 
   167  039A                     	;# 
   168  039C                     	;# 
   169  039D                     	;# 
   170  039E                     	;# 
   171  039F                     	;# 
   172  0FE4                     	;# 
   173  0FE5                     	;# 
   174  0FE6                     	;# 
   175  0FE7                     	;# 
   176  0FE8                     	;# 
   177  0FE9                     	;# 
   178  0FEA                     	;# 
   179  0FEB                     	;# 
   180  0FED                     	;# 
   181  0FEE                     	;# 
   182  0FEF                     	;# 
   183                           
   184                           	psect	eeprom_data
   185  0000  0024 0001 0000 0000 0000 0000 00FF 00FF 	db	36,1,0,0,0,0,255,255	;# 
   186  0008  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   187  0010  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   188  0018  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  008C                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0095                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  010C                     	;# 
   230  0111                     	;# 
   231  0112                     	;# 
   232  0115                     	;# 
   233  0116                     	;# 
   234  0117                     	;# 
   235  0118                     	;# 
   236  0119                     	;# 
   237  011A                     	;# 
   238  011B                     	;# 
   239  011D                     	;# 
   240  011D                     	;# 
   241  018C                     	;# 
   242  0191                     	;# 
   243  0191                     	;# 
   244  0192                     	;# 
   245  0193                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0199                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019D                     	;# 
   261  019E                     	;# 
   262  019F                     	;# 
   263  020C                     	;# 
   264  0211                     	;# 
   265  0211                     	;# 
   266  0212                     	;# 
   267  0212                     	;# 
   268  0213                     	;# 
   269  0213                     	;# 
   270  0214                     	;# 
   271  0214                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0216                     	;# 
   276  0216                     	;# 
   277  0217                     	;# 
   278  0217                     	;# 
   279  0291                     	;# 
   280  0291                     	;# 
   281  0292                     	;# 
   282  0293                     	;# 
   283  0294                     	;# 
   284  0295                     	;# 
   285  0295                     	;# 
   286  0296                     	;# 
   287  0391                     	;# 
   288  0392                     	;# 
   289  0393                     	;# 
   290  039A                     	;# 
   291  039C                     	;# 
   292  039D                     	;# 
   293  039E                     	;# 
   294  039F                     	;# 
   295  0FE4                     	;# 
   296  0FE5                     	;# 
   297  0FE6                     	;# 
   298  0FE7                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEB                     	;# 
   303  0FED                     	;# 
   304  0FEE                     	;# 
   305  0FEF                     	;# 
   306  0000                     	;# 
   307  0001                     	;# 
   308  0002                     	;# 
   309  0003                     	;# 
   310  0004                     	;# 
   311  0005                     	;# 
   312  0006                     	;# 
   313  0007                     	;# 
   314  0008                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  008C                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0097                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009A                     	;# 
   341  009B                     	;# 
   342  009B                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009E                     	;# 
   346  010C                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0115                     	;# 
   350  0116                     	;# 
   351  0117                     	;# 
   352  0118                     	;# 
   353  0119                     	;# 
   354  011A                     	;# 
   355  011B                     	;# 
   356  011D                     	;# 
   357  011D                     	;# 
   358  018C                     	;# 
   359  0191                     	;# 
   360  0191                     	;# 
   361  0192                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0193                     	;# 
   365  0194                     	;# 
   366  0195                     	;# 
   367  0196                     	;# 
   368  0197                     	;# 
   369  0199                     	;# 
   370  019A                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019C                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0294                     	;# 
   401  0295                     	;# 
   402  0295                     	;# 
   403  0296                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  039A                     	;# 
   408  039C                     	;# 
   409  039D                     	;# 
   410  039E                     	;# 
   411  039F                     	;# 
   412  0FE4                     	;# 
   413  0FE5                     	;# 
   414  0FE6                     	;# 
   415  0FE7                     	;# 
   416  0FE8                     	;# 
   417  0FE9                     	;# 
   418  0FEA                     	;# 
   419  0FEB                     	;# 
   420  0FED                     	;# 
   421  0FEE                     	;# 
   422  0FEF                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0008                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  008C                     	;# 
   450  0091                     	;# 
   451  0092                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009C                     	;# 
   461  009D                     	;# 
   462  009E                     	;# 
   463  010C                     	;# 
   464  0111                     	;# 
   465  0112                     	;# 
   466  0115                     	;# 
   467  0116                     	;# 
   468  0117                     	;# 
   469  0118                     	;# 
   470  0119                     	;# 
   471  011A                     	;# 
   472  011B                     	;# 
   473  011D                     	;# 
   474  011D                     	;# 
   475  018C                     	;# 
   476  0191                     	;# 
   477  0191                     	;# 
   478  0192                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0193                     	;# 
   482  0194                     	;# 
   483  0195                     	;# 
   484  0196                     	;# 
   485  0197                     	;# 
   486  0199                     	;# 
   487  019A                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019C                     	;# 
   493  019C                     	;# 
   494  019D                     	;# 
   495  019E                     	;# 
   496  019F                     	;# 
   497  020C                     	;# 
   498  0211                     	;# 
   499  0211                     	;# 
   500  0212                     	;# 
   501  0212                     	;# 
   502  0213                     	;# 
   503  0213                     	;# 
   504  0214                     	;# 
   505  0214                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0215                     	;# 
   509  0216                     	;# 
   510  0216                     	;# 
   511  0217                     	;# 
   512  0217                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0294                     	;# 
   518  0295                     	;# 
   519  0295                     	;# 
   520  0296                     	;# 
   521  0391                     	;# 
   522  0392                     	;# 
   523  0393                     	;# 
   524  039A                     	;# 
   525  039C                     	;# 
   526  039D                     	;# 
   527  039E                     	;# 
   528  039F                     	;# 
   529  0FE4                     	;# 
   530  0FE5                     	;# 
   531  0FE6                     	;# 
   532  0FE7                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540                           
   541                           	psect	idataBANK1
   542  0000                     __pidataBANK1:	
   543  0003                     _STATUSbits	set	3
   544  000C                     _PORTAbits	set	12
   545  0018                     _T1CON	set	24
   546  000B                     _INTCON	set	11
   547  001C                     _T2CON	set	28
   548  001B                     _PR2	set	27
   549  0012                     _PIR2bits	set	18
   550  0018                     _T1CONbits	set	24
   551  0011                     _PIR1bits	set	17
   552  000B                     _INTCONbits	set	11
   553  0092                     _PIE2bits	set	146
   554  0095                     _OPTION_REGbits	set	149
   555  008C                     _TRISA	set	140
   556  0099                     _OSCCON	set	153
   557  0091                     _PIE1bits	set	145
   558  011D                     _APFCONbits	set	285
   559  010C                     _LATAbits	set	268
   560  0191                     _EEADR	set	401
   561  0196                     _EECON2	set	406
   562  0193                     _EEDATA	set	403
   563  0195                     _EECON1	set	405
   564  0195                     _EECON1bits	set	405
   565  018C                     _ANSELA	set	396
   566  0212                     _SSP1ADD	set	530
   567  0217                     _SSP1CON3bits	set	535
   568  0216                     _SSP1CON2bits	set	534
   569  0215                     _SSP1CON1	set	533
   570  0214                     _SSP1STAT	set	532
   571  020C                     _WPUA	set	524
   572  0215                     _SSP1CON1bits	set	533
   573  0211                     _SSP1BUF	set	529
   574  0214                     _SSP1STATbits	set	532
   575  0291                     _CCPR1L	set	657
   576  0293                     _CCP1CON	set	659
   577  0392                     _IOCANbits	set	914
   578  0393                     _IOCAFbits	set	915
   579                           
   580                           ; #config settings
   581  0000                     
   582                           	psect	cinit
   583  00C0                     start_initialization:	
   584  00C0                     __initialization:	
   585                           
   586                           ; Initialize objects allocated to BANK1
   587  00C0  0021               	movlb	1	; select bank1
   588                           
   589                           ;initializer for _first_i2c
   590  00C1  3001               	movlw	1
   591  00C2  00EC               	movwf	__pdataBANK1& (0+127)
   592                           
   593                           ; Clear objects allocated to BITCOMMON
   594  00C3  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   595                           
   596                           ; Clear objects allocated to BITBANK0
   597  00C4  0020               	movlb	0	; select bank0
   598  00C5  30A0               	movlw	low __pbssBANK1
   599  00C6  01EC               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   600                           
   601                           ; Clear objects allocated to BANK1
   602  00C7  0084               	movwf	4
   603  00C8  3000               	movlw	high __pbssBANK1
   604  00C9  0085               	movwf	5
   605  00CA  3034               	movlw	52
   606  00CB  3185  25F4  3180   	fcall	clear_ram0
   607                           
   608                           ; Clear objects allocated to BANK2
   609  00CE  3020               	movlw	low __pbssBANK2
   610  00CF  0084               	movwf	4
   611  00D0  3001               	movlw	high __pbssBANK2
   612  00D1  0085               	movwf	5
   613  00D2  3010               	movlw	16
   614  00D3  3185  25F4         	fcall	clear_ram0
   615  00D5                     end_of_initialization:	
   616                           ;End of C runtime variable initialization code
   617                           
   618  00D5                     __end_of__initialization:	
   619  00D5  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   620  00D6  0020               	movlb	0
   621  00D7  3188  2806         	ljmp	_main	;jump to C main() function
   622                           
   623                           	psect	bitbssCOMMON
   624  03E8                     __pbitbssCOMMON:	
   625  03E8                     _loadDistance:	
   626  03E8                     	ds	1
   627                           
   628                           	psect	bitbssBANK0
   629  0360                     __pbitbssBANK0:	
   630  0360                     _zero_cross:	
   631  0360                     	ds	1
   632                           
   633                           	psect	bssBANK1
   634  00A0                     __pbssBANK1:	
   635  00A0                     _I2C_buffer:	
   636  00A0                     	ds	43
   637  00CB                     _auxDistance:	
   638  00CB                     	ds	4
   639  00CF                     _lset:	
   640  00CF                     	ds	2
   641  00D1                     _counter:	
   642  00D1                     	ds	2
   643  00D3                     _index_i2c:	
   644  00D3                     	ds	1
   645                           
   646                           	psect	dataBANK1
   647  00EC                     __pdataBANK1:	
   648  00EC                     _first_i2c:	
   649  00EC                     	ds	1
   650                           
   651                           	psect	bssBANK2
   652  0120                     __pbssBANK2:	
   653  0120                     _lasterrorA:	
   654  0120                     	ds	4
   655  0124                     _accumulatorA:	
   656  0124                     	ds	4
   657  0128                     _lasterrorM:	
   658  0128                     	ds	4
   659  012C                     _accumulatorM:	
   660  012C                     	ds	4
   661                           
   662                           	psect	clrtext
   663  05F4                     clear_ram0:	
   664                           ;	Called with FSR0 containing the base address, and
   665                           ;	WREG with the size to clear
   666                           
   667  05F4  0064               	clrwdt	;clear the watchdog before getting into this loop
   668  05F5                     clrloop0:	
   669  05F5  0180               	clrf	0	;clear RAM location pointed to by FSR
   670  05F6  3101               	addfsr 0,1
   671  05F7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   672  05F8  2DF5               	goto	clrloop0	;have we reached the end yet?
   673  05F9  3400               	retlw	0	;all done for this memory range, return
   674                           
   675                           	psect	cstackBANK1
   676  00D4                     __pcstackBANK1:	
   677  00D4                     _calculate_pidA$1317:	
   678                           
   679                           ; 4 bytes @ 0x0
   680  00D4                     	ds	4
   681  00D8                     calculate_pidA@error:	
   682                           
   683                           ; 4 bytes @ 0x4
   684  00D8                     	ds	4
   685  00DC                     calculate_pidA@pid:	
   686                           
   687                           ; 4 bytes @ 0x8
   688  00DC                     	ds	4
   689  00E0                     _calculate_pidM$1318:	
   690                           
   691                           ; 4 bytes @ 0xC
   692  00E0                     	ds	4
   693  00E4                     calculate_pidM@error:	
   694                           
   695                           ; 4 bytes @ 0x10
   696  00E4                     	ds	4
   697  00E8                     calculate_pidM@pid:	
   698                           
   699                           ; 4 bytes @ 0x14
   700  00E8                     	ds	4
   701                           
   702                           	psect	cstackCOMMON
   703  0070                     __pcstackCOMMON:	
   704  0070                     ?_eeprom_read:	
   705  0070                     ?_isr:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_init_I2C_buffer:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_main:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_PWM_Init:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?i1___wmul:	
   718                           ; 2 bytes @ 0x0
   719                           
   720  0070                     i1___wmul@multiplier:	
   721                           ; 2 bytes @ 0x0
   722                           
   723                           
   724                           ; 2 bytes @ 0x0
   725  0070                     	ds	2
   726  0072                     i1___wmul@multiplicand:	
   727                           
   728                           ; 2 bytes @ 0x2
   729  0072                     	ds	2
   730  0074                     ??i1___wmul:	
   731  0074                     i1___wmul@product:	
   732                           ; 1 bytes @ 0x4
   733                           
   734                           
   735                           ; 2 bytes @ 0x4
   736  0074                     	ds	2
   737  0076                     ?___lwdiv:	
   738  0076                     ___lwdiv@divisor:	
   739                           ; 2 bytes @ 0x6
   740                           
   741                           
   742                           ; 2 bytes @ 0x6
   743  0076                     	ds	2
   744  0078                     ___lwdiv@dividend:	
   745                           
   746                           ; 2 bytes @ 0x8
   747  0078                     	ds	2
   748  007A                     ??___lwdiv:	
   749  007A                     ___lwdiv@quotient:	
   750                           ; 1 bytes @ 0xA
   751                           
   752                           
   753                           ; 2 bytes @ 0xA
   754  007A                     	ds	2
   755  007C                     ___lwdiv@counter:	
   756                           
   757                           ; 1 bytes @ 0xC
   758  007C                     	ds	1
   759                           
   760                           	psect	cstackBANK0
   761  0020                     __pcstackBANK0:	
   762  0020                     ??_isr:	
   763                           
   764                           ; 1 bytes @ 0x0
   765  0020                     	ds	2
   766  0022                     ??_eeprom_read:	
   767  0022                     ?_eeprom_write:	
   768                           ; 1 bytes @ 0x2
   769                           
   770  0022                     ??_PWM_Init:	
   771                           ; 1 bytes @ 0x2
   772                           
   773  0022                     ?_abs:	
   774                           ; 1 bytes @ 0x2
   775                           
   776  0022                     ?__Umul8_16:	
   777                           ; 2 bytes @ 0x2
   778                           
   779  0022                     ?_PWM_set_duty:	
   780                           ; 2 bytes @ 0x2
   781                           
   782  0022                     ?___wmul:	
   783                           ; 2 bytes @ 0x2
   784                           
   785  0022                     ?___fltol:	
   786                           ; 2 bytes @ 0x2
   787                           
   788  0022                     eeprom_read@addr:	
   789                           ; 4 bytes @ 0x2
   790                           
   791  0022                     eeprom_write@value:	
   792                           ; 1 bytes @ 0x2
   793                           
   794  0022                     __Umul8_16@multiplicand:	
   795                           ; 1 bytes @ 0x2
   796                           
   797  0022                     PWM_set_duty@duty:	
   798                           ; 1 bytes @ 0x2
   799                           
   800  0022                     ___wmul@multiplier:	
   801                           ; 2 bytes @ 0x2
   802                           
   803  0022                     abs@a:	
   804                           ; 2 bytes @ 0x2
   805                           
   806  0022                     ___fltol@f1:	
   807                           ; 2 bytes @ 0x2
   808                           
   809                           
   810                           ; 4 bytes @ 0x2
   811  0022                     	ds	1
   812  0023                     ??_eeprom_write:	
   813  0023                     ??_init_I2C_buffer:	
   814                           ; 1 bytes @ 0x3
   815                           
   816  0023                     eeprom_write@addr:	
   817                           ; 1 bytes @ 0x3
   818                           
   819                           
   820                           ; 1 bytes @ 0x3
   821  0023                     	ds	1
   822  0024                     ??_abs:	
   823  0024                     ??_PWM_set_duty:	
   824                           ; 1 bytes @ 0x4
   825                           
   826  0024                     ___wmul@multiplicand:	
   827                           ; 1 bytes @ 0x4
   828                           
   829                           
   830                           ; 2 bytes @ 0x4
   831  0024                     	ds	1
   832  0025                     ??__Umul8_16:	
   833  0025                     __Umul8_16@product:	
   834                           ; 1 bytes @ 0x5
   835                           
   836                           
   837                           ; 2 bytes @ 0x5
   838  0025                     	ds	1
   839  0026                     ??___wmul:	
   840  0026                     ??___fltol:	
   841                           ; 1 bytes @ 0x6
   842                           
   843  0026                     ?___xxtofl:	
   844                           ; 1 bytes @ 0x6
   845                           
   846  0026                     ___wmul@product:	
   847                           ; 4 bytes @ 0x6
   848                           
   849  0026                     ___xxtofl@val:	
   850                           ; 2 bytes @ 0x6
   851                           
   852                           
   853                           ; 4 bytes @ 0x6
   854  0026                     	ds	1
   855  0027                     __Umul8_16@multiplier:	
   856                           
   857                           ; 1 bytes @ 0x7
   858  0027                     	ds	1
   859  0028                     __Umul8_16@word_mpld:	
   860                           
   861                           ; 2 bytes @ 0x8
   862  0028                     	ds	2
   863  002A                     ??___xxtofl:	
   864  002A                     ?___flmul:	
   865                           ; 1 bytes @ 0xA
   866                           
   867  002A                     ___fltol@sign1:	
   868                           ; 4 bytes @ 0xA
   869                           
   870  002A                     ___flmul@b:	
   871                           ; 1 bytes @ 0xA
   872                           
   873                           
   874                           ; 4 bytes @ 0xA
   875  002A                     	ds	1
   876  002B                     ___fltol@exp1:	
   877                           
   878                           ; 1 bytes @ 0xB
   879  002B                     	ds	1
   880  002C                     ?_M_control:	
   881  002C                     M_control@ctr:	
   882                           ; 1 bytes @ 0xC
   883                           
   884                           
   885                           ; 2 bytes @ 0xC
   886  002C                     	ds	2
   887  002E                     ??_M_control:	
   888  002E                     ___xxtofl@sign:	
   889                           ; 1 bytes @ 0xE
   890                           
   891  002E                     ___flmul@a:	
   892                           ; 1 bytes @ 0xE
   893                           
   894                           
   895                           ; 4 bytes @ 0xE
   896  002E                     	ds	1
   897  002F                     ___xxtofl@exp:	
   898                           
   899                           ; 1 bytes @ 0xF
   900  002F                     	ds	1
   901  0030                     ___xxtofl@arg:	
   902                           
   903                           ; 4 bytes @ 0x10
   904  0030                     	ds	2
   905  0032                     ??___flmul:	
   906                           
   907                           ; 1 bytes @ 0x12
   908  0032                     	ds	2
   909  0034                     ?___flge:	
   910  0034                     ___flge@ff1:	
   911                           ; 1 bit 
   912                           
   913                           
   914                           ; 4 bytes @ 0x14
   915  0034                     	ds	2
   916  0036                     ___flmul@sign:	
   917                           
   918                           ; 1 bytes @ 0x16
   919  0036                     	ds	1
   920  0037                     ___flmul@aexp:	
   921                           
   922                           ; 1 bytes @ 0x17
   923  0037                     	ds	1
   924  0038                     ___flmul@bexp:	
   925  0038                     ___flge@ff2:	
   926                           ; 1 bytes @ 0x18
   927                           
   928                           
   929                           ; 4 bytes @ 0x18
   930  0038                     	ds	1
   931  0039                     ___flmul@grs:	
   932                           
   933                           ; 4 bytes @ 0x19
   934  0039                     	ds	3
   935  003C                     ??___flge:	
   936                           
   937                           ; 1 bytes @ 0x1C
   938  003C                     	ds	1
   939  003D                     ___flmul@prod:	
   940                           
   941                           ; 4 bytes @ 0x1D
   942  003D                     	ds	4
   943  0041                     ___flmul@temp:	
   944                           
   945                           ; 2 bytes @ 0x21
   946  0041                     	ds	2
   947  0043                     ?___fladd:	
   948  0043                     ___fladd@b:	
   949                           ; 4 bytes @ 0x23
   950                           
   951                           
   952                           ; 4 bytes @ 0x23
   953  0043                     	ds	4
   954  0047                     ___fladd@a:	
   955                           
   956                           ; 4 bytes @ 0x27
   957  0047                     	ds	4
   958  004B                     ??___fladd:	
   959                           
   960                           ; 1 bytes @ 0x2B
   961  004B                     	ds	8
   962  0053                     ___fladd@signs:	
   963                           
   964                           ; 1 bytes @ 0x33
   965  0053                     	ds	1
   966  0054                     ___fladd@aexp:	
   967                           
   968                           ; 1 bytes @ 0x34
   969  0054                     	ds	1
   970  0055                     ___fladd@bexp:	
   971                           
   972                           ; 1 bytes @ 0x35
   973  0055                     	ds	1
   974  0056                     ___fladd@grs:	
   975                           
   976                           ; 1 bytes @ 0x36
   977  0056                     	ds	1
   978  0057                     ?___flsub:	
   979  0057                     ___flsub@a:	
   980                           ; 4 bytes @ 0x37
   981                           
   982                           
   983                           ; 4 bytes @ 0x37
   984  0057                     	ds	4
   985  005B                     ___flsub@b:	
   986                           
   987                           ; 4 bytes @ 0x3B
   988  005B                     	ds	4
   989  005F                     ??___flsub:	
   990  005F                     ?_calculate_pidA:	
   991                           ; 1 bytes @ 0x3F
   992                           
   993  005F                     calculate_pidA@set:	
   994                           ; 2 bytes @ 0x3F
   995                           
   996                           
   997                           ; 4 bytes @ 0x3F
   998  005F                     	ds	4
   999  0063                     ??_calculate_pidA:	
  1000                           
  1001                           ; 1 bytes @ 0x43
  1002  0063                     	ds	2
  1003  0065                     ?_calculate_pidM:	
  1004  0065                     calculate_pidM@set:	
  1005                           ; 1 bytes @ 0x45
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x45
  1009  0065                     	ds	2
  1010  0067                     ??_calculate_pidM:	
  1011  0067                     ?_pre_pidM:	
  1012                           ; 1 bytes @ 0x47
  1013                           
  1014  0067                     pre_pidM@set:	
  1015                           ; 1 bytes @ 0x47
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x47
  1019  0067                     	ds	2
  1020  0069                     ??_pre_pidM:	
  1021                           
  1022                           ; 1 bytes @ 0x49
  1023  0069                     	ds	2
  1024  006B                     ??_main:	
  1025                           
  1026                           ; 1 bytes @ 0x4B
  1027  006B                     	ds	1
  1028                           
  1029                           	psect	maintext
  1030  0806                     __pmaintext:	
  1031 ;;
  1032 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1033 ;;
  1034 ;; *************** function _main *****************
  1035 ;; Defined at:
  1036 ;;		line 359 in file "main.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : B1F/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1050 ;;      Params:         0       0       0       0
  1051 ;;      Locals:         0       0       0       0
  1052 ;;      Temps:          0       1       0       0
  1053 ;;      Totals:         0       1       0       0
  1054 ;;Total ram usage:        1 bytes
  1055 ;; Hardware stack levels required when called:    6
  1056 ;; This function calls:
  1057 ;;		_M_control
  1058 ;;		_PWM_Init
  1059 ;;		_PWM_set_duty
  1060 ;;		_calculate_pidA
  1061 ;;		_calculate_pidM
  1062 ;;		_eeprom_write
  1063 ;;		_init_I2C_buffer
  1064 ;;		_pre_pidM
  1065 ;; This function is called by:
  1066 ;;		Startup code after reset
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _main
  1072  0806                     _main:	
  1073                           
  1074                           ;main.c: 360: OSCCON = 0b11110000;
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1078  0806  30F0               	movlw	240
  1079  0807  0021               	movlb	1	; select bank1
  1080  0808  0099               	movwf	25	;volatile
  1081                           
  1082                           ;main.c: 361: init_I2C_buffer();
  1083  0809  3184  2410  3188   	fcall	_init_I2C_buffer
  1084                           
  1085                           ;main.c: 362: TRISA = 0b00011110;
  1086  080C  301E               	movlw	30
  1087  080D  008C               	movwf	12	;volatile
  1088                           
  1089                           ;main.c: 363: ANSELA = 0b00000000;
  1090  080E  0023               	movlb	3	; select bank3
  1091  080F  018C               	clrf	12	;volatile
  1092                           
  1093                           ;main.c: 364: WPUA = 0b00011110;
  1094  0810  0024               	movlb	4	; select bank4
  1095  0811  008C               	movwf	12	;volatile
  1096                           
  1097                           ;main.c: 365: OPTION_REGbits.nWPUEN = (char) !(I2C_buffer.data.IOWPU & 0x01);
  1098  0812  0021               	movlb	1	; select bank1
  1099  0813  1823               	btfsc	(_I2C_buffer^(0+128)+3),0	;volatile
  1100  0814  2818               	goto	u4230
  1101  0815  0021               	movlb	1	; select bank1
  1102  0816  1795               	bsf	21,7	;volatile
  1103  0817  281A               	goto	l3624
  1104  0818                     u4230:	
  1105  0818  0021               	movlb	1	; select bank1
  1106  0819  1395               	bcf	21,7	;volatile
  1107  081A                     l3624:	
  1108                           
  1109                           ;main.c: 366: APFCONbits.CCP1SEL = 1;
  1110  081A  0022               	movlb	2	; select bank2
  1111  081B  141D               	bsf	29,0	;volatile
  1112                           
  1113                           ;main.c: 367: LATAbits.LATA0 = 0;
  1114  081C  100C               	bcf	12,0	;volatile
  1115                           
  1116                           ;main.c: 368: SSP1STAT = 0b10000000;
  1117  081D  3080               	movlw	128
  1118  081E  0024               	movlb	4	; select bank4
  1119  081F  0094               	movwf	20	;volatile
  1120                           
  1121                           ;main.c: 369: SSP1CON1 = 0b00110110;
  1122  0820  3036               	movlw	54
  1123  0821  0095               	movwf	21	;volatile
  1124                           
  1125                           ;main.c: 370: SSP1CON2bits.SEN = 1;
  1126  0822  1416               	bsf	22,0	;volatile
  1127                           
  1128                           ;main.c: 371: SSP1CON3bits.BOEN = 1;
  1129  0823  1617               	bsf	23,4	;volatile
  1130                           
  1131                           ;main.c: 372: SSP1CON3bits.SDAHT = 1;
  1132  0824  1597               	bsf	23,3	;volatile
  1133                           
  1134                           ;main.c: 373: SSP1CON3bits.SBCDE = 1;
  1135  0825  1517               	bsf	23,2	;volatile
  1136                           
  1137                           ;main.c: 374: SSP1ADD = (char) (I2C_buffer.data.ADDRESS << 1);
  1138  0826  0021               	movlb	1	; select bank1
  1139  0827  3521               	lslf	(_I2C_buffer^(0+128)+1),w	;volatile
  1140  0828  0024               	movlb	4	; select bank4
  1141  0829  0092               	movwf	18	;volatile
  1142                           
  1143                           ;main.c: 375: PIR1bits.SSP1IF = 0;
  1144  082A  0020               	movlb	0	; select bank0
  1145  082B  1191               	bcf	17,3	;volatile
  1146                           
  1147                           ;main.c: 376: PIR2bits.BCL1IF = 0;
  1148  082C  1192               	bcf	18,3	;volatile
  1149                           
  1150                           ;main.c: 377: PIE2bits.BCL1IE = 1;
  1151  082D  0021               	movlb	1	; select bank1
  1152  082E  1592               	bsf	18,3	;volatile
  1153                           
  1154                           ;main.c: 378: PIE1bits.SSP1IE = 1;
  1155  082F  1591               	bsf	17,3	;volatile
  1156                           
  1157                           ;main.c: 379: INTCONbits.PEIE = 1;
  1158  0830  170B               	bsf	11,6	;volatile
  1159                           
  1160                           ;main.c: 380: PWM_Init();
  1161  0831  3185  25E8  3188   	fcall	_PWM_Init
  1162                           
  1163                           ;main.c: 381: PWM_set_duty(0);
  1164  0834  01A2               	clrf	PWM_set_duty@duty
  1165  0835  01A3               	clrf	PWM_set_duty@duty+1
  1166  0836  2388  3188         	fcall	_PWM_set_duty
  1167                           
  1168                           ;main.c: 382: IOCANbits.IOCAN4 = 1;
  1169  0838  0027               	movlb	7	; select bank7
  1170  0839  1612               	bsf	18,4	;volatile
  1171                           
  1172                           ;main.c: 383: INTCON = 0b01001000;
  1173  083A  3048               	movlw	72
  1174  083B  008B               	movwf	11	;volatile
  1175                           
  1176                           ;main.c: 384: T1CON = 0b00110100;
  1177  083C  3034               	movlw	52
  1178  083D  0020               	movlb	0	; select bank0
  1179  083E  0098               	movwf	24	;volatile
  1180                           
  1181                           ;main.c: 385: PIE1bits.TMR1IE = 1;
  1182  083F  0021               	movlb	1	; select bank1
  1183  0840  1411               	bsf	17,0	;volatile
  1184                           
  1185                           ;main.c: 386: T1CONbits.TMR1ON = 1;
  1186  0841  0020               	movlb	0	; select bank0
  1187  0842  1418               	bsf	24,0	;volatile
  1188                           
  1189                           ;main.c: 387: INTCONbits.GIE = 1;
  1190  0843  178B               	bsf	11,7	;volatile
  1191                           
  1192                           ;main.c: 389: _delay((unsigned long)((5)*(32000000/4000.0)));
  1193  0844  3034               	movlw	52
  1194  0845  0020               	movlb	0	; select bank0
  1195  0846  00EB               	movwf	??_main
  1196  0847  30F1               	movlw	241
  1197  0848                     u4477:	
  1198  0848  0B89               	decfsz	9,f
  1199  0849  2848               	goto	u4477
  1200  084A  0BEB               	decfsz	??_main,f
  1201  084B  2848               	goto	u4477
  1202  084C  3200               	nop2
  1203                           
  1204                           ;main.c: 391: if (PORTAbits.RA3 == 0) {
  1205  084D  0020               	movlb	0	; select bank0
  1206  084E  198C               	btfsc	12,3	;volatile
  1207  084F  2855               	goto	l158
  1208                           
  1209                           ;main.c: 392: eeprom_write(0, 0x24);
  1210  0850  3024               	movlw	36
  1211  0851  00A2               	movwf	eeprom_write@value
  1212  0852  3000               	movlw	0
  1213  0853  22DF  3188         	fcall	_eeprom_write
  1214  0855                     l158:	
  1215                           ;main.c: 393: };main.c: 395: while (1) {
  1216                           
  1217  0855  0064               	clrwdt	;# 
  1218                           
  1219                           ;main.c: 397: if (I2C_buffer.data.START_STOP == 1) {
  1220  0856  0021               	movlb	1	; select bank1
  1221  0857  0B22               	decfsz	(_I2C_buffer^(0+128)+2),w	;volatile
  1222  0858  29F8               	goto	l3802
  1223  0859  29E4               	goto	l3798
  1224  085A                     l3678:	
  1225                           
  1226                           ;main.c: 400: M_control(0);
  1227  085A  0020               	movlb	0	; select bank0
  1228  085B  01AC               	clrf	M_control@ctr
  1229  085C  01AD               	clrf	M_control@ctr+1
  1230  085D  22FC  3188         	fcall	_M_control
  1231                           
  1232                           ;main.c: 401: break;
  1233  085F  29EE               	goto	l3800
  1234  0860                     l3680:	
  1235                           
  1236                           ;main.c: 403: M_control(I2C_buffer.data.SPEED);
  1237  0860  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1238  0861  0020               	movlb	0	; select bank0
  1239  0862  00AD               	movwf	M_control@ctr+1
  1240  0863  0021               	movlb	1	; select bank1
  1241  0864  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1242  0865  0020               	movlb	0	; select bank0
  1243  0866  00AC               	movwf	M_control@ctr
  1244  0867  22FC  3188         	fcall	_M_control
  1245                           
  1246                           ;main.c: 404: break;
  1247  0869  29EE               	goto	l3800
  1248  086A                     l3682:	
  1249                           
  1250                           ;main.c: 406: calculate_pidM(I2C_buffer.data.SPEED);
  1251  086A  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1252  086B  0020               	movlb	0	; select bank0
  1253  086C  00E6               	movwf	calculate_pidM@set+1
  1254  086D  0021               	movlb	1	; select bank1
  1255  086E  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1256  086F  0020               	movlb	0	; select bank0
  1257  0870  00E5               	movwf	calculate_pidM@set
  1258  0871  2649  3188         	fcall	_calculate_pidM
  1259                           
  1260                           ;main.c: 407: break;
  1261  0873  29EE               	goto	l3800
  1262  0874                     l3684:	
  1263                           
  1264                           ;main.c: 409: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1265  0874  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1266  0875  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1267  0876  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1268  0877  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1269  0878  1D03               	btfss	3,2
  1270  0879  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1271  087A  2888               	goto	l3694
  1272  087B  300F               	movlw	15
  1273                           
  1274                           ;main.c: 410: loadDistance = 1;
  1275  087C  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1276                           
  1277                           ;main.c: 411: auxDistance = I2C_buffer.data.DISTANCE;
  1278  087D  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1279  087E  0086               	movwf	6
  1280  087F  0187               	clrf	7
  1281  0880  3F40               	moviw [0]fsr1
  1282  0881  00CB               	movwf	_auxDistance^(0+128)
  1283  0882  3F41               	moviw [1]fsr1
  1284  0883  00CC               	movwf	(_auxDistance+1)^(0+128)
  1285  0884  3F42               	moviw [2]fsr1
  1286  0885  00CD               	movwf	(_auxDistance+2)^(0+128)
  1287  0886  3F43               	moviw [3]fsr1
  1288  0887  29AD               	goto	L1
  1289  0888                     l3694:	
  1290                           ;main.c: 413: } else {
  1291                           
  1292                           ;main.c: 412: I2C_buffer.data.DISTANCE = 0;
  1293                           
  1294                           
  1295                           ;main.c: 414: if (auxDistance > 0) {
  1296  0888  1BCE               	btfsc	(_auxDistance+3)^(0+128),7
  1297  0889  28C1               	goto	l3706
  1298  088A  084E               	movf	(_auxDistance+3)^(0+128),w
  1299  088B  1D03               	btfss	3,2
  1300  088C  2897               	goto	l3696
  1301  088D  084D               	movf	(_auxDistance+2)^(0+128),w
  1302  088E  1D03               	btfss	3,2
  1303  088F  2897               	goto	l3696
  1304  0890  084C               	movf	(_auxDistance+1)^(0+128),w
  1305  0891  1D03               	btfss	3,2
  1306  0892  2897               	goto	l3696
  1307  0893  3001               	movlw	1
  1308  0894  024B               	subwf	_auxDistance^(0+128),w
  1309  0895  1C03               	btfss	3,0
  1310  0896  28C1               	goto	l3706
  1311  0897                     l3696:	
  1312                           
  1313                           ;main.c: 415: calculate_pidM(I2C_buffer.data.SPEED);
  1314  0897  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1315  0898  0020               	movlb	0	; select bank0
  1316  0899  00E6               	movwf	calculate_pidM@set+1
  1317  089A  0021               	movlb	1	; select bank1
  1318  089B  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1319  089C  0020               	movlb	0	; select bank0
  1320  089D  00E5               	movwf	calculate_pidM@set
  1321  089E  2649  3188         	fcall	_calculate_pidM
  1322                           
  1323                           ;main.c: 416: if (auxDistance <= I2C_buffer.data.DISTANCE) {
  1324  08A0  0021               	movlb	1	; select bank1
  1325  08A1  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1326  08A2  3A80               	xorlw	128
  1327  08A3  0020               	movlb	0	; select bank0
  1328  08A4  00EB               	movwf	??_main
  1329  08A5  0021               	movlb	1	; select bank1
  1330  08A6  084E               	movf	(_auxDistance+3)^(0+128),w
  1331  08A7  3A80               	xorlw	128
  1332  08A8  0020               	movlb	0	; select bank0
  1333  08A9  026B               	subwf	??_main,w
  1334  08AA  0021               	movlb	1	; select bank1
  1335  08AB  1D03               	skipz
  1336  08AC  28B7               	goto	u4303
  1337  08AD  084D               	movf	(_auxDistance+2)^(0+128),w
  1338  08AE  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1339  08AF  1D03               	skipz
  1340  08B0  28B7               	goto	u4303
  1341  08B1  084C               	movf	(_auxDistance+1)^(0+128),w
  1342  08B2  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1343  08B3  1D03               	skipz
  1344  08B4  28B7               	goto	u4303
  1345  08B5  084B               	movf	_auxDistance^(0+128),w
  1346  08B6  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1347  08B7                     u4303:	
  1348  08B7  1C03               	skipc
  1349  08B8  28C1               	goto	l3706
  1350                           
  1351                           ;main.c: 417: loadDistance = 0;
  1352  08B9  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1353                           
  1354                           ;main.c: 418: M_control(0);
  1355  08BA  0020               	movlb	0	; select bank0
  1356  08BB  01AC               	clrf	M_control@ctr
  1357  08BC  01AD               	clrf	M_control@ctr+1
  1358  08BD  22FC  3188         	fcall	_M_control
  1359                           
  1360                           ;main.c: 419: I2C_buffer.data.START_STOP = 0;
  1361  08BF  0021               	movlb	1	; select bank1
  1362  08C0  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1363  08C1                     l3706:	
  1364                           
  1365                           ;main.c: 420: };main.c: 421: };main.c: 422: if (auxDistance < 0) {
  1366  08C1  1FCE               	btfss	(_auxDistance+3)^(0+128),7
  1367  08C2  29EE               	goto	l3800
  1368                           
  1369                           ;main.c: 423: calculate_pidM(I2C_buffer.data.SPEED);
  1370  08C3  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1371  08C4  0020               	movlb	0	; select bank0
  1372  08C5  00E6               	movwf	calculate_pidM@set+1
  1373  08C6  0021               	movlb	1	; select bank1
  1374  08C7  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1375  08C8  0020               	movlb	0	; select bank0
  1376  08C9  00E5               	movwf	calculate_pidM@set
  1377  08CA  2649  3188         	fcall	_calculate_pidM
  1378                           
  1379                           ;main.c: 424: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1380  08CC  0021               	movlb	1	; select bank1
  1381  08CD  084E               	movf	(_auxDistance+3)^(0+128),w
  1382  08CE  3A80               	xorlw	128
  1383  08CF  0020               	movlb	0	; select bank0
  1384  08D0  00EB               	movwf	??_main
  1385  08D1  0021               	movlb	1	; select bank1
  1386  08D2  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1387  08D3  3A80               	xorlw	128
  1388  08D4  0020               	movlb	0	; select bank0
  1389  08D5  026B               	subwf	??_main,w
  1390  08D6  0021               	movlb	1	; select bank1
  1391  08D7  1D03               	skipz
  1392  08D8  28E3               	goto	u4323
  1393  08D9  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1394  08DA  024D               	subwf	(_auxDistance+2)^(0+128),w
  1395  08DB  1D03               	skipz
  1396  08DC  28E3               	goto	u4323
  1397  08DD  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1398  08DE  024C               	subwf	(_auxDistance+1)^(0+128),w
  1399  08DF  1D03               	skipz
  1400  08E0  28E3               	goto	u4323
  1401  08E1  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  1402  08E2  024B               	subwf	_auxDistance^(0+128),w
  1403  08E3                     u4323:	
  1404  08E3  1C03               	skipc
  1405  08E4  29EE               	goto	l3800
  1406                           
  1407                           ;main.c: 425: loadDistance = 0;
  1408  08E5  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1409                           
  1410                           ;main.c: 426: M_control(0);
  1411  08E6  0020               	movlb	0	; select bank0
  1412  08E7  01AC               	clrf	M_control@ctr
  1413  08E8  01AD               	clrf	M_control@ctr+1
  1414  08E9  22FC  3188         	fcall	_M_control
  1415  08EB  29E1               	goto	l3792
  1416  08EC                     l3718:	
  1417                           ;main.c: 428: };main.c: 429: };main.c: 430: };main.c: 431: break;
  1418                           
  1419                           ;main.c: 427: I2C_buffer.data.START_STOP = 0;
  1420                           
  1421                           
  1422                           ;main.c: 433: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1423  08EC  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1424  08ED  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1425  08EE  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1426  08EF  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1427  08F0  1D03               	btfss	3,2
  1428  08F1  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1429  08F2  2900               	goto	l3728
  1430  08F3  300F               	movlw	15
  1431                           
  1432                           ;main.c: 434: loadDistance = 1;
  1433  08F4  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1434                           
  1435                           ;main.c: 435: auxDistance = I2C_buffer.data.DISTANCE;
  1436  08F5  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1437  08F6  0086               	movwf	6
  1438  08F7  0187               	clrf	7
  1439  08F8  3F40               	moviw [0]fsr1
  1440  08F9  00CB               	movwf	_auxDistance^(0+128)
  1441  08FA  3F41               	moviw [1]fsr1
  1442  08FB  00CC               	movwf	(_auxDistance+1)^(0+128)
  1443  08FC  3F42               	moviw [2]fsr1
  1444  08FD  00CD               	movwf	(_auxDistance+2)^(0+128)
  1445  08FE  3F43               	moviw [3]fsr1
  1446  08FF  29AD               	goto	L1
  1447  0900                     l3728:	
  1448                           ;main.c: 437: } else {
  1449                           
  1450                           ;main.c: 436: I2C_buffer.data.DISTANCE = 0;
  1451                           
  1452                           
  1453                           ;main.c: 438: calculate_pidM(calculate_pidA(auxDistance));
  1454  0900  084E               	movf	(_auxDistance+3)^(0+128),w
  1455  0901  0020               	movlb	0	; select bank0
  1456  0902  00E2               	movwf	calculate_pidA@set+3
  1457  0903  0021               	movlb	1	; select bank1
  1458  0904  084D               	movf	(_auxDistance+2)^(0+128),w
  1459  0905  0020               	movlb	0	; select bank0
  1460  0906  00E1               	movwf	calculate_pidA@set+2
  1461  0907  0021               	movlb	1	; select bank1
  1462  0908  084C               	movf	(_auxDistance+1)^(0+128),w
  1463  0909  0020               	movlb	0	; select bank0
  1464  090A  00E0               	movwf	calculate_pidA@set+1
  1465  090B  0021               	movlb	1	; select bank1
  1466  090C  084B               	movf	_auxDistance^(0+128),w
  1467  090D  0020               	movlb	0	; select bank0
  1468  090E  00DF               	movwf	calculate_pidA@set
  1469  090F  23A7  3188         	fcall	_calculate_pidA
  1470  0911  0860               	movf	?_calculate_pidA+1,w
  1471  0912  00E6               	movwf	calculate_pidM@set+1
  1472  0913  085F               	movf	?_calculate_pidA,w
  1473  0914  00E5               	movwf	calculate_pidM@set
  1474  0915  2649  3188         	fcall	_calculate_pidM
  1475  0917  29CA               	goto	L2
  1476  0918                     l3738:	
  1477                           ;main.c: 442: I2C_buffer.data.START_STOP = 0;
  1478                           
  1479                           ;main.c: 441: M_control(0);
  1480                           
  1481                           ;main.c: 440: loadDistance = 0;
  1482                           
  1483                           ;main.c: 439: if (auxDistance == I2C_buffer.data.DISTANCE) {
  1484                           
  1485                           
  1486                           ;main.c: 447: pre_pidM(I2C_buffer.data.SPEED);
  1487  0918  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1488  0919  0020               	movlb	0	; select bank0
  1489  091A  00E8               	movwf	pre_pidM@set+1
  1490  091B  0021               	movlb	1	; select bank1
  1491  091C  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1492  091D  0020               	movlb	0	; select bank0
  1493  091E  00E7               	movwf	pre_pidM@set
  1494  091F  2334  3188         	fcall	_pre_pidM
  1495                           
  1496                           ;main.c: 448: break;
  1497  0921  29EE               	goto	l3800
  1498  0922                     l3740:	
  1499                           
  1500                           ;main.c: 450: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1501  0922  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1502  0923  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1503  0924  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1504  0925  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1505  0926  1D03               	btfss	3,2
  1506  0927  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1507  0928  2936               	goto	l3750
  1508  0929  300F               	movlw	15
  1509                           
  1510                           ;main.c: 451: loadDistance = 1;
  1511  092A  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1512                           
  1513                           ;main.c: 452: auxDistance = I2C_buffer.data.DISTANCE;
  1514  092B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1515  092C  0086               	movwf	6
  1516  092D  0187               	clrf	7
  1517  092E  3F40               	moviw [0]fsr1
  1518  092F  00CB               	movwf	_auxDistance^(0+128)
  1519  0930  3F41               	moviw [1]fsr1
  1520  0931  00CC               	movwf	(_auxDistance+1)^(0+128)
  1521  0932  3F42               	moviw [2]fsr1
  1522  0933  00CD               	movwf	(_auxDistance+2)^(0+128)
  1523  0934  3F43               	moviw [3]fsr1
  1524  0935  29AD               	goto	L1
  1525  0936                     l3750:	
  1526                           ;main.c: 454: } else {
  1527                           
  1528                           ;main.c: 453: I2C_buffer.data.DISTANCE = 0;
  1529                           
  1530                           
  1531                           ;main.c: 455: if (auxDistance > 0) {
  1532  0936  1BCE               	btfsc	(_auxDistance+3)^(0+128),7
  1533  0937  296F               	goto	l3762
  1534  0938  084E               	movf	(_auxDistance+3)^(0+128),w
  1535  0939  1D03               	btfss	3,2
  1536  093A  2945               	goto	l3752
  1537  093B  084D               	movf	(_auxDistance+2)^(0+128),w
  1538  093C  1D03               	btfss	3,2
  1539  093D  2945               	goto	l3752
  1540  093E  084C               	movf	(_auxDistance+1)^(0+128),w
  1541  093F  1D03               	btfss	3,2
  1542  0940  2945               	goto	l3752
  1543  0941  3001               	movlw	1
  1544  0942  024B               	subwf	_auxDistance^(0+128),w
  1545  0943  1C03               	btfss	3,0
  1546  0944  296F               	goto	l3762
  1547  0945                     l3752:	
  1548                           
  1549                           ;main.c: 456: pre_pidM(I2C_buffer.data.SPEED);
  1550  0945  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1551  0946  0020               	movlb	0	; select bank0
  1552  0947  00E8               	movwf	pre_pidM@set+1
  1553  0948  0021               	movlb	1	; select bank1
  1554  0949  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1555  094A  0020               	movlb	0	; select bank0
  1556  094B  00E7               	movwf	pre_pidM@set
  1557  094C  2334  3188         	fcall	_pre_pidM
  1558                           
  1559                           ;main.c: 457: if (auxDistance <= I2C_buffer.data.DISTANCE) {
  1560  094E  0021               	movlb	1	; select bank1
  1561  094F  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1562  0950  3A80               	xorlw	128
  1563  0951  0020               	movlb	0	; select bank0
  1564  0952  00EB               	movwf	??_main
  1565  0953  0021               	movlb	1	; select bank1
  1566  0954  084E               	movf	(_auxDistance+3)^(0+128),w
  1567  0955  3A80               	xorlw	128
  1568  0956  0020               	movlb	0	; select bank0
  1569  0957  026B               	subwf	??_main,w
  1570  0958  0021               	movlb	1	; select bank1
  1571  0959  1D03               	skipz
  1572  095A  2965               	goto	u4393
  1573  095B  084D               	movf	(_auxDistance+2)^(0+128),w
  1574  095C  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1575  095D  1D03               	skipz
  1576  095E  2965               	goto	u4393
  1577  095F  084C               	movf	(_auxDistance+1)^(0+128),w
  1578  0960  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1579  0961  1D03               	skipz
  1580  0962  2965               	goto	u4393
  1581  0963  084B               	movf	_auxDistance^(0+128),w
  1582  0964  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1583  0965                     u4393:	
  1584  0965  1C03               	skipc
  1585  0966  296F               	goto	l3762
  1586                           
  1587                           ;main.c: 458: loadDistance = 0;
  1588  0967  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1589                           
  1590                           ;main.c: 459: M_control(0);
  1591  0968  0020               	movlb	0	; select bank0
  1592  0969  01AC               	clrf	M_control@ctr
  1593  096A  01AD               	clrf	M_control@ctr+1
  1594  096B  22FC  3188         	fcall	_M_control
  1595                           
  1596                           ;main.c: 460: I2C_buffer.data.START_STOP = 0;
  1597  096D  0021               	movlb	1	; select bank1
  1598  096E  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1599  096F                     l3762:	
  1600                           
  1601                           ;main.c: 461: };main.c: 462: };main.c: 463: if (auxDistance < 0) {
  1602  096F  1FCE               	btfss	(_auxDistance+3)^(0+128),7
  1603  0970  29EE               	goto	l3800
  1604                           
  1605                           ;main.c: 464: pre_pidM(I2C_buffer.data.SPEED);
  1606  0971  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1607  0972  0020               	movlb	0	; select bank0
  1608  0973  00E8               	movwf	pre_pidM@set+1
  1609  0974  0021               	movlb	1	; select bank1
  1610  0975  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1611  0976  0020               	movlb	0	; select bank0
  1612  0977  00E7               	movwf	pre_pidM@set
  1613  0978  2334  3188         	fcall	_pre_pidM
  1614                           
  1615                           ;main.c: 465: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1616  097A  0021               	movlb	1	; select bank1
  1617  097B  084E               	movf	(_auxDistance+3)^(0+128),w
  1618  097C  3A80               	xorlw	128
  1619  097D  0020               	movlb	0	; select bank0
  1620  097E  00EB               	movwf	??_main
  1621  097F  0021               	movlb	1	; select bank1
  1622  0980  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1623  0981  3A80               	xorlw	128
  1624  0982  0020               	movlb	0	; select bank0
  1625  0983  026B               	subwf	??_main,w
  1626  0984  0021               	movlb	1	; select bank1
  1627  0985  1D03               	skipz
  1628  0986  2991               	goto	u4413
  1629  0987  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1630  0988  024D               	subwf	(_auxDistance+2)^(0+128),w
  1631  0989  1D03               	skipz
  1632  098A  2991               	goto	u4413
  1633  098B  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1634  098C  024C               	subwf	(_auxDistance+1)^(0+128),w
  1635  098D  1D03               	skipz
  1636  098E  2991               	goto	u4413
  1637  098F  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  1638  0990  024B               	subwf	_auxDistance^(0+128),w
  1639  0991                     u4413:	
  1640  0991  1C03               	skipc
  1641  0992  29EE               	goto	l3800
  1642                           
  1643                           ;main.c: 466: loadDistance = 0;
  1644  0993  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1645                           
  1646                           ;main.c: 467: M_control(0);
  1647  0994  0020               	movlb	0	; select bank0
  1648  0995  01AC               	clrf	M_control@ctr
  1649  0996  01AD               	clrf	M_control@ctr+1
  1650  0997  22FC  3188         	fcall	_M_control
  1651  0999  29E1               	goto	l3792
  1652  099A                     l3774:	
  1653                           ;main.c: 468: I2C_buffer.data.START_STOP = 0;
  1654                           
  1655                           
  1656                           ;main.c: 474: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1657  099A  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1658  099B  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1659  099C  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1660  099D  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1661  099E  1D03               	btfss	3,2
  1662  099F  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1663  09A0  29B3               	goto	l3784
  1664  09A1  300F               	movlw	15
  1665                           
  1666                           ;main.c: 475: loadDistance = 1;
  1667  09A2  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1668                           
  1669                           ;main.c: 476: auxDistance = I2C_buffer.data.DISTANCE;
  1670  09A3  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1671  09A4  0086               	movwf	6
  1672  09A5  0187               	clrf	7
  1673  09A6  3F40               	moviw [0]fsr1
  1674  09A7  00CB               	movwf	_auxDistance^(0+128)
  1675  09A8  3F41               	moviw [1]fsr1
  1676  09A9  00CC               	movwf	(_auxDistance+1)^(0+128)
  1677  09AA  3F42               	moviw [2]fsr1
  1678  09AB  00CD               	movwf	(_auxDistance+2)^(0+128)
  1679  09AC  3F43               	moviw [3]fsr1
  1680  09AD                     L1:	
  1681  09AD  00CE               	movwf	(_auxDistance+3)^(0+128)
  1682                           
  1683                           ;main.c: 477: I2C_buffer.data.DISTANCE = 0;
  1684  09AE  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  1685  09AF  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  1686  09B0  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  1687  09B1  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  1688                           
  1689                           ;main.c: 478: } else {
  1690  09B2  29EE               	goto	l3800
  1691  09B3                     l3784:	
  1692                           
  1693                           ;main.c: 479: pre_pidM(calculate_pidA(auxDistance));
  1694  09B3  084E               	movf	(_auxDistance+3)^(0+128),w
  1695  09B4  0020               	movlb	0	; select bank0
  1696  09B5  00E2               	movwf	calculate_pidA@set+3
  1697  09B6  0021               	movlb	1	; select bank1
  1698  09B7  084D               	movf	(_auxDistance+2)^(0+128),w
  1699  09B8  0020               	movlb	0	; select bank0
  1700  09B9  00E1               	movwf	calculate_pidA@set+2
  1701  09BA  0021               	movlb	1	; select bank1
  1702  09BB  084C               	movf	(_auxDistance+1)^(0+128),w
  1703  09BC  0020               	movlb	0	; select bank0
  1704  09BD  00E0               	movwf	calculate_pidA@set+1
  1705  09BE  0021               	movlb	1	; select bank1
  1706  09BF  084B               	movf	_auxDistance^(0+128),w
  1707  09C0  0020               	movlb	0	; select bank0
  1708  09C1  00DF               	movwf	calculate_pidA@set
  1709  09C2  23A7  3188         	fcall	_calculate_pidA
  1710  09C4  0860               	movf	?_calculate_pidA+1,w
  1711  09C5  00E8               	movwf	pre_pidM@set+1
  1712  09C6  085F               	movf	?_calculate_pidA,w
  1713  09C7  00E7               	movwf	pre_pidM@set
  1714  09C8  2334  3188         	fcall	_pre_pidM
  1715  09CA                     L2:	
  1716                           
  1717                           ;main.c: 480: if (auxDistance == I2C_buffer.data.DISTANCE) {
  1718  09CA  0021               	movlb	1	; select bank1
  1719  09CB  084E               	movf	(_auxDistance+3)^(0+128),w
  1720  09CC  0632               	xorwf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1721  09CD  1D03               	skipz
  1722  09CE  29D9               	goto	u4445
  1723  09CF  084D               	movf	(_auxDistance+2)^(0+128),w
  1724  09D0  0631               	xorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1725  09D1  1D03               	skipz
  1726  09D2  29D9               	goto	u4445
  1727  09D3  084C               	movf	(_auxDistance+1)^(0+128),w
  1728  09D4  0630               	xorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1729  09D5  1D03               	skipz
  1730  09D6  29D9               	goto	u4445
  1731  09D7  084B               	movf	_auxDistance^(0+128),w
  1732  09D8  062F               	xorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1733  09D9                     u4445:	
  1734  09D9  1D03               	skipz
  1735  09DA  29EE               	goto	l3800
  1736                           
  1737                           ;main.c: 481: loadDistance = 0;
  1738  09DB  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1739                           
  1740                           ;main.c: 482: M_control(0);
  1741  09DC  0020               	movlb	0	; select bank0
  1742  09DD  01AC               	clrf	M_control@ctr
  1743  09DE  01AD               	clrf	M_control@ctr+1
  1744  09DF  22FC  3188         	fcall	_M_control
  1745  09E1                     l3792:	
  1746                           
  1747                           ;main.c: 483: I2C_buffer.data.START_STOP = 0;
  1748  09E1  0021               	movlb	1	; select bank1
  1749  09E2  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1750  09E3  29EE               	goto	l3800
  1751  09E4                     l3798:	
  1752  09E4  0824               	movf	(_I2C_buffer^(0+128)+4),w	;volatile
  1753                           
  1754                           ; Switch size 1, requested type "speed"
  1755                           ; Number of cases is 8, Range of values is 0 to 7
  1756                           ; switch strategies available:
  1757                           ; Name         Instructions Cycles
  1758                           ; direct_byte           22     6 (fixed)
  1759                           ; simple_byte           25    13 (average)
  1760                           ; jumptable            260     6 (fixed)
  1761                           ;	Chosen strategy is direct_byte
  1762  09E5  0084               	movwf	4
  1763  09E6  3008               	movlw	8
  1764  09E7  0204               	subwf	4,w
  1765  09E8  1803               	skipnc
  1766  09E9  285A               	goto	l3678
  1767  09EA  3185               	movlp	high S3850
  1768  09EB  3504               	lslf	4,w
  1769  09EC  3ECA               	addlw	low S3850
  1770  09ED  0082               	movwf	2
  1771  09EE                     l3800:	
  1772                           
  1773                           ;main.c: 491: _delay((unsigned long)((5)*(32000000/4000.0)));
  1774  09EE  3034               	movlw	52
  1775  09EF  0020               	movlb	0	; select bank0
  1776  09F0  00EB               	movwf	??_main
  1777  09F1  30F1               	movlw	241
  1778  09F2                     u4487:	
  1779  09F2  0B89               	decfsz	9,f
  1780  09F3  29F2               	goto	u4487
  1781  09F4  0BEB               	decfsz	??_main,f
  1782  09F5  29F2               	goto	u4487
  1783  09F6  3200               	nop2
  1784                           
  1785                           ;main.c: 492: } else {
  1786  09F7  29FD               	goto	l3804
  1787  09F8                     l3802:	
  1788                           
  1789                           ;main.c: 493: M_control(0);
  1790  09F8  0020               	movlb	0	; select bank0
  1791  09F9  01AC               	clrf	M_control@ctr
  1792  09FA  01AD               	clrf	M_control@ctr+1
  1793  09FB  22FC  3188         	fcall	_M_control
  1794  09FD                     l3804:	
  1795                           
  1796                           ;main.c: 494: };main.c: 495: if (I2C_buffer.data.RESET == 1) {
  1797  09FD  0021               	movlb	1	; select bank1
  1798  09FE  0B26               	decfsz	(_I2C_buffer^(0+128)+6),w	;volatile
  1799  09FF  2A01               	goto	l3808
  1800  0A00  0001               	reset	;# 
  1801  0A01                     l3808:	
  1802                           
  1803                           ;main.c: 497: };main.c: 498: if (I2C_buffer.data.SAVE == 1) {
  1804  0A01  0021               	movlb	1	; select bank1
  1805  0A02  0B25               	decfsz	(_I2C_buffer^(0+128)+5),w	;volatile
  1806  0A03  2855               	goto	l158
  1807                           
  1808                           ;main.c: 499: eeprom_write(0, I2C_buffer.data.ADDRESS);
  1809  0A04  0821               	movf	(_I2C_buffer^(0+128)+1),w	;volatile
  1810  0A05  0020               	movlb	0	; select bank0
  1811  0A06  00A2               	movwf	eeprom_write@value
  1812  0A07  3000               	movlw	0
  1813  0A08  22DF  3188         	fcall	_eeprom_write
  1814                           
  1815                           ;main.c: 500: eeprom_write(1, I2C_buffer.data.IOWPU);
  1816  0A0A  0021               	movlb	1	; select bank1
  1817  0A0B  0823               	movf	(_I2C_buffer^(0+128)+3),w	;volatile
  1818  0A0C  0020               	movlb	0	; select bank0
  1819  0A0D  00A2               	movwf	eeprom_write@value
  1820  0A0E  3001               	movlw	1
  1821  0A0F  22DF  3188         	fcall	_eeprom_write
  1822                           
  1823                           ;main.c: 501: eeprom_write(2, I2C_buffer.byte[0x07]);
  1824  0A11  0021               	movlb	1	; select bank1
  1825  0A12  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  1826  0A13  0020               	movlb	0	; select bank0
  1827  0A14  00A2               	movwf	eeprom_write@value
  1828  0A15  3002               	movlw	2
  1829  0A16  22DF  3188         	fcall	_eeprom_write
  1830                           
  1831                           ;main.c: 502: eeprom_write(3, I2C_buffer.byte[0x08]);
  1832  0A18  0021               	movlb	1	; select bank1
  1833  0A19  0828               	movf	(_I2C_buffer^(0+128)+8),w	;volatile
  1834  0A1A  0020               	movlb	0	; select bank0
  1835  0A1B  00A2               	movwf	eeprom_write@value
  1836  0A1C  3003               	movlw	3
  1837  0A1D  22DF  3188         	fcall	_eeprom_write
  1838                           
  1839                           ;main.c: 503: eeprom_write(4, I2C_buffer.byte[0x09]);
  1840  0A1F  0021               	movlb	1	; select bank1
  1841  0A20  0829               	movf	(_I2C_buffer^(0+128)+9),w	;volatile
  1842  0A21  0020               	movlb	0	; select bank0
  1843  0A22  00A2               	movwf	eeprom_write@value
  1844  0A23  3004               	movlw	4
  1845  0A24  22DF  3188         	fcall	_eeprom_write
  1846                           
  1847                           ;main.c: 504: eeprom_write(5, I2C_buffer.byte[0x0A]);
  1848  0A26  0021               	movlb	1	; select bank1
  1849  0A27  082A               	movf	(_I2C_buffer^(0+128)+10),w	;volatile
  1850  0A28  0020               	movlb	0	; select bank0
  1851  0A29  00A2               	movwf	eeprom_write@value
  1852  0A2A  3005               	movlw	5
  1853  0A2B  22DF  3188         	fcall	_eeprom_write
  1854                           
  1855                           ;main.c: 505: eeprom_write(8, I2C_buffer.byte[0x13]);
  1856  0A2D  0021               	movlb	1	; select bank1
  1857  0A2E  0833               	movf	(_I2C_buffer^(0+128)+19),w	;volatile
  1858  0A2F  0020               	movlb	0	; select bank0
  1859  0A30  00A2               	movwf	eeprom_write@value
  1860  0A31  3008               	movlw	8
  1861  0A32  22DF  3188         	fcall	_eeprom_write
  1862                           
  1863                           ;main.c: 506: eeprom_write(9, I2C_buffer.byte[0x14]);
  1864  0A34  0021               	movlb	1	; select bank1
  1865  0A35  0834               	movf	(_I2C_buffer^(0+128)+20),w	;volatile
  1866  0A36  0020               	movlb	0	; select bank0
  1867  0A37  00A2               	movwf	eeprom_write@value
  1868  0A38  3009               	movlw	9
  1869  0A39  22DF  3188         	fcall	_eeprom_write
  1870                           
  1871                           ;main.c: 507: eeprom_write(10, I2C_buffer.byte[0x15]);
  1872  0A3B  0021               	movlb	1	; select bank1
  1873  0A3C  0835               	movf	(_I2C_buffer^(0+128)+21),w	;volatile
  1874  0A3D  0020               	movlb	0	; select bank0
  1875  0A3E  00A2               	movwf	eeprom_write@value
  1876  0A3F  300A               	movlw	10
  1877  0A40  22DF  3188         	fcall	_eeprom_write
  1878                           
  1879                           ;main.c: 508: eeprom_write(11, I2C_buffer.byte[0x16]);
  1880  0A42  0021               	movlb	1	; select bank1
  1881  0A43  0836               	movf	(_I2C_buffer^(0+128)+22),w	;volatile
  1882  0A44  0020               	movlb	0	; select bank0
  1883  0A45  00A2               	movwf	eeprom_write@value
  1884  0A46  300B               	movlw	11
  1885  0A47  22DF  3188         	fcall	_eeprom_write
  1886                           
  1887                           ;main.c: 509: eeprom_write(12, I2C_buffer.byte[0x17]);
  1888  0A49  0021               	movlb	1	; select bank1
  1889  0A4A  0837               	movf	(_I2C_buffer^(0+128)+23),w	;volatile
  1890  0A4B  0020               	movlb	0	; select bank0
  1891  0A4C  00A2               	movwf	eeprom_write@value
  1892  0A4D  300C               	movlw	12
  1893  0A4E  22DF  3188         	fcall	_eeprom_write
  1894                           
  1895                           ;main.c: 510: eeprom_write(13, I2C_buffer.byte[0x18]);
  1896  0A50  0021               	movlb	1	; select bank1
  1897  0A51  0838               	movf	(_I2C_buffer^(0+128)+24),w	;volatile
  1898  0A52  0020               	movlb	0	; select bank0
  1899  0A53  00A2               	movwf	eeprom_write@value
  1900  0A54  300D               	movlw	13
  1901  0A55  22DF  3188         	fcall	_eeprom_write
  1902                           
  1903                           ;main.c: 511: eeprom_write(14, I2C_buffer.byte[0x19]);
  1904  0A57  0021               	movlb	1	; select bank1
  1905  0A58  0839               	movf	(_I2C_buffer^(0+128)+25),w	;volatile
  1906  0A59  0020               	movlb	0	; select bank0
  1907  0A5A  00A2               	movwf	eeprom_write@value
  1908  0A5B  300E               	movlw	14
  1909  0A5C  22DF  3188         	fcall	_eeprom_write
  1910                           
  1911                           ;main.c: 512: eeprom_write(15, I2C_buffer.byte[0x1A]);
  1912  0A5E  0021               	movlb	1	; select bank1
  1913  0A5F  083A               	movf	(_I2C_buffer^(0+128)+26),w	;volatile
  1914  0A60  0020               	movlb	0	; select bank0
  1915  0A61  00A2               	movwf	eeprom_write@value
  1916  0A62  300F               	movlw	15
  1917  0A63  22DF  3188         	fcall	_eeprom_write
  1918                           
  1919                           ;main.c: 513: eeprom_write(16, I2C_buffer.byte[0x1B]);
  1920  0A65  0021               	movlb	1	; select bank1
  1921  0A66  083B               	movf	(_I2C_buffer^(0+128)+27),w	;volatile
  1922  0A67  0020               	movlb	0	; select bank0
  1923  0A68  00A2               	movwf	eeprom_write@value
  1924  0A69  3010               	movlw	16
  1925  0A6A  22DF  3188         	fcall	_eeprom_write
  1926                           
  1927                           ;main.c: 514: eeprom_write(17, I2C_buffer.byte[0x1C]);
  1928  0A6C  0021               	movlb	1	; select bank1
  1929  0A6D  083C               	movf	(_I2C_buffer^(0+128)+28),w	;volatile
  1930  0A6E  0020               	movlb	0	; select bank0
  1931  0A6F  00A2               	movwf	eeprom_write@value
  1932  0A70  3011               	movlw	17
  1933  0A71  22DF  3188         	fcall	_eeprom_write
  1934                           
  1935                           ;main.c: 515: eeprom_write(18, I2C_buffer.byte[0x1D]);
  1936  0A73  0021               	movlb	1	; select bank1
  1937  0A74  083D               	movf	(_I2C_buffer^(0+128)+29),w	;volatile
  1938  0A75  0020               	movlb	0	; select bank0
  1939  0A76  00A2               	movwf	eeprom_write@value
  1940  0A77  3012               	movlw	18
  1941  0A78  22DF  3188         	fcall	_eeprom_write
  1942                           
  1943                           ;main.c: 516: eeprom_write(19, I2C_buffer.byte[0x1E]);
  1944  0A7A  0021               	movlb	1	; select bank1
  1945  0A7B  083E               	movf	(_I2C_buffer^(0+128)+30),w	;volatile
  1946  0A7C  0020               	movlb	0	; select bank0
  1947  0A7D  00A2               	movwf	eeprom_write@value
  1948  0A7E  3013               	movlw	19
  1949  0A7F  22DF  3188         	fcall	_eeprom_write
  1950                           
  1951                           ;main.c: 517: eeprom_write(20, I2C_buffer.byte[0x1F]);
  1952  0A81  0021               	movlb	1	; select bank1
  1953  0A82  083F               	movf	(_I2C_buffer^(0+128)+31),w	;volatile
  1954  0A83  0020               	movlb	0	; select bank0
  1955  0A84  00A2               	movwf	eeprom_write@value
  1956  0A85  3014               	movlw	20
  1957  0A86  22DF  3188         	fcall	_eeprom_write
  1958                           
  1959                           ;main.c: 518: eeprom_write(21, I2C_buffer.byte[0x20]);
  1960  0A88  0021               	movlb	1	; select bank1
  1961  0A89  0840               	movf	(_I2C_buffer^(0+128)+32),w	;volatile
  1962  0A8A  0020               	movlb	0	; select bank0
  1963  0A8B  00A2               	movwf	eeprom_write@value
  1964  0A8C  3015               	movlw	21
  1965  0A8D  22DF  3188         	fcall	_eeprom_write
  1966                           
  1967                           ;main.c: 519: eeprom_write(22, I2C_buffer.byte[0x21]);
  1968  0A8F  0021               	movlb	1	; select bank1
  1969  0A90  0841               	movf	(_I2C_buffer^(0+128)+33),w	;volatile
  1970  0A91  0020               	movlb	0	; select bank0
  1971  0A92  00A2               	movwf	eeprom_write@value
  1972  0A93  3016               	movlw	22
  1973  0A94  22DF  3188         	fcall	_eeprom_write
  1974                           
  1975                           ;main.c: 520: eeprom_write(23, I2C_buffer.byte[0x22]);
  1976  0A96  0021               	movlb	1	; select bank1
  1977  0A97  0842               	movf	(_I2C_buffer^(0+128)+34),w	;volatile
  1978  0A98  0020               	movlb	0	; select bank0
  1979  0A99  00A2               	movwf	eeprom_write@value
  1980  0A9A  3017               	movlw	23
  1981  0A9B  22DF  3188         	fcall	_eeprom_write
  1982                           
  1983                           ;main.c: 521: eeprom_write(24, I2C_buffer.byte[0x23]);
  1984  0A9D  0021               	movlb	1	; select bank1
  1985  0A9E  0843               	movf	(_I2C_buffer^(0+128)+35),w	;volatile
  1986  0A9F  0020               	movlb	0	; select bank0
  1987  0AA0  00A2               	movwf	eeprom_write@value
  1988  0AA1  3018               	movlw	24
  1989  0AA2  22DF  3188         	fcall	_eeprom_write
  1990                           
  1991                           ;main.c: 522: eeprom_write(25, I2C_buffer.byte[0x24]);
  1992  0AA4  0021               	movlb	1	; select bank1
  1993  0AA5  0844               	movf	(_I2C_buffer^(0+128)+36),w	;volatile
  1994  0AA6  0020               	movlb	0	; select bank0
  1995  0AA7  00A2               	movwf	eeprom_write@value
  1996  0AA8  3019               	movlw	25
  1997  0AA9  22DF  3188         	fcall	_eeprom_write
  1998                           
  1999                           ;main.c: 523: eeprom_write(26, I2C_buffer.byte[0x25]);
  2000  0AAB  0021               	movlb	1	; select bank1
  2001  0AAC  0845               	movf	(_I2C_buffer^(0+128)+37),w	;volatile
  2002  0AAD  0020               	movlb	0	; select bank0
  2003  0AAE  00A2               	movwf	eeprom_write@value
  2004  0AAF  301A               	movlw	26
  2005  0AB0  22DF  3188         	fcall	_eeprom_write
  2006                           
  2007                           ;main.c: 524: eeprom_write(27, I2C_buffer.byte[0x26]);
  2008  0AB2  0021               	movlb	1	; select bank1
  2009  0AB3  0846               	movf	(_I2C_buffer^(0+128)+38),w	;volatile
  2010  0AB4  0020               	movlb	0	; select bank0
  2011  0AB5  00A2               	movwf	eeprom_write@value
  2012  0AB6  301B               	movlw	27
  2013  0AB7  22DF  3188         	fcall	_eeprom_write
  2014                           
  2015                           ;main.c: 525: eeprom_write(28, I2C_buffer.byte[0x27]);
  2016  0AB9  0021               	movlb	1	; select bank1
  2017  0ABA  0847               	movf	(_I2C_buffer^(0+128)+39),w	;volatile
  2018  0ABB  0020               	movlb	0	; select bank0
  2019  0ABC  00A2               	movwf	eeprom_write@value
  2020  0ABD  301C               	movlw	28
  2021  0ABE  22DF  3188         	fcall	_eeprom_write
  2022                           
  2023                           ;main.c: 526: eeprom_write(29, I2C_buffer.byte[0x28]);
  2024  0AC0  0021               	movlb	1	; select bank1
  2025  0AC1  0848               	movf	(_I2C_buffer^(0+128)+40),w	;volatile
  2026  0AC2  0020               	movlb	0	; select bank0
  2027  0AC3  00A2               	movwf	eeprom_write@value
  2028  0AC4  301D               	movlw	29
  2029  0AC5  22DF  3188         	fcall	_eeprom_write
  2030                           
  2031                           ;main.c: 527: eeprom_write(30, I2C_buffer.byte[0x29]);
  2032  0AC7  0021               	movlb	1	; select bank1
  2033  0AC8  0849               	movf	(_I2C_buffer^(0+128)+41),w	;volatile
  2034  0AC9  0020               	movlb	0	; select bank0
  2035  0ACA  00A2               	movwf	eeprom_write@value
  2036  0ACB  301E               	movlw	30
  2037  0ACC  22DF  3188         	fcall	_eeprom_write
  2038                           
  2039                           ;main.c: 528: eeprom_write(31, I2C_buffer.byte[0x2A]);
  2040  0ACE  0021               	movlb	1	; select bank1
  2041  0ACF  084A               	movf	(_I2C_buffer^(0+128)+42),w	;volatile
  2042  0AD0  0020               	movlb	0	; select bank0
  2043  0AD1  00A2               	movwf	eeprom_write@value
  2044  0AD2  301F               	movlw	31
  2045  0AD3  22DF  3188         	fcall	_eeprom_write
  2046                           
  2047                           ;main.c: 529: _delay((unsigned long)((5)*(32000000/4000.0)));
  2048  0AD5  3034               	movlw	52
  2049  0AD6  0020               	movlb	0	; select bank0
  2050  0AD7  00EB               	movwf	??_main
  2051  0AD8  30F1               	movlw	241
  2052  0AD9                     u4497:	
  2053  0AD9  0B89               	decfsz	9,f
  2054  0ADA  2AD9               	goto	u4497
  2055  0ADB  0BEB               	decfsz	??_main,f
  2056  0ADC  2AD9               	goto	u4497
  2057  0ADD  3200               	nop2
  2058  0ADE  2855               	goto	l158
  2059  0ADF                     __end_of_main:	
  2060  0ADF                     __ptext8:	
  2061 ;; *************** function _eeprom_write *****************
  2062 ;; Defined at:
  2063 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eewrite.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  addr            1    wreg     unsigned char 
  2066 ;;  value           1    2[BANK0 ] unsigned char 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  addr            1    3[BANK0 ] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 1F/0
  2075 ;;		On exit  : 1F/3
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2078 ;;      Params:         0       1       0       0
  2079 ;;      Locals:         0       1       0       0
  2080 ;;      Temps:          0       0       0       0
  2081 ;;      Totals:         0       2       0       0
  2082 ;;Total ram usage:        2 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    2
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           
  2093                           ;psect for function _eeprom_write
  2094  0ADF                     _eeprom_write:	
  2095                           
  2096                           ;incstack = 0
  2097                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2098                           ;eeprom_write@addr stored from wreg
  2099  0ADF  00A3               	movwf	eeprom_write@addr
  2100  0AE0                     l307:	
  2101                           ;__eewrite.c: 8: do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value
      +                          ); EECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } I
      +                          NTCONbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1;
      +                           EE
  2102                           
  2103  0AE0  0023               	movlb	3	; select bank3
  2104  0AE1  1895               	btfsc	21,1	;volsfr
  2105  0AE2  2AE0               	goto	l307
  2106  0AE3  0020               	movlb	0	; select bank0
  2107  0AE4  0823               	movf	eeprom_write@addr,w
  2108  0AE5  0023               	movlb	3	; select bank3
  2109  0AE6  0091               	movwf	17	;volatile
  2110  0AE7  0192               	clrf	18	;volatile
  2111  0AE8  0020               	movlb	0	; select bank0
  2112  0AE9  0822               	movf	eeprom_write@value,w
  2113  0AEA  0023               	movlb	3	; select bank3
  2114  0AEB  0093               	movwf	19	;volatile
  2115  0AEC  303F               	movlw	63
  2116  0AED  0595               	andwf	21,f	;volsfr
  2117  0AEE  1003               	bcf	3,0	;volatile
  2118  0AEF  1B8B               	btfsc	11,7	;volatile
  2119  0AF0  1403               	bsf	3,0	;volatile
  2120  0AF1  138B               	bcf	11,7	;volatile
  2121  0AF2  1515               	bsf	21,2	;volsfr
  2122  0AF3  3055               	movlw	85
  2123  0AF4  0096               	movwf	22	;volsfr
  2124  0AF5  30AA               	movlw	170
  2125  0AF6  0096               	movwf	22	;volsfr
  2126  0AF7  1495               	bsf	21,1	;volsfr
  2127  0AF8  1115               	bcf	21,2	;volsfr
  2128  0AF9  1803               	btfsc	3,0	;volatile
  2129  0AFA  178B               	bsf	11,7	;volatile
  2130  0AFB  0008               	return
  2131  0AFC                     __end_of_eeprom_write:	
  2132  0AFC                     __ptext3:	
  2133 ;; *************** function _M_control *****************
  2134 ;; Defined at:
  2135 ;;		line 231 in file "main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  ctr             2   12[BANK0 ] int 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, pclath, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 1F/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2149 ;;      Params:         0       2       0       0
  2150 ;;      Locals:         0       0       0       0
  2151 ;;      Temps:          0       1       0       0
  2152 ;;      Totals:         0       3       0       0
  2153 ;;Total ram usage:        3 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    3
  2156 ;; This function calls:
  2157 ;;		_PWM_set_duty
  2158 ;;		___wmul
  2159 ;; This function is called by:
  2160 ;;		_calculate_pidM
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           
  2166                           ;psect for function _M_control
  2167  0AFC                     _M_control:	
  2168  0AFC                     l3194:	
  2169                           ;incstack = 0
  2170                           ; Regs used in _M_control: [wreg+status,2+status,0+pclath+cstack]
  2171                           
  2172                           
  2173                           ;main.c: 233: if (ctr == 0)
  2174  0AFC  082C               	movf	M_control@ctr,w
  2175  0AFD  042D               	iorwf	M_control@ctr+1,w
  2176  0AFE  1D03               	btfss	3,2
  2177  0AFF  2B06               	goto	l3198
  2178                           
  2179                           ;main.c: 234: {;main.c: 235: PWM_set_duty(ctr);
  2180  0B00  082D               	movf	M_control@ctr+1,w
  2181  0B01  00A3               	movwf	PWM_set_duty@duty+1
  2182  0B02  082C               	movf	M_control@ctr,w
  2183  0B03  00A2               	movwf	PWM_set_duty@duty
  2184  0B04  2388  3188         	fcall	_PWM_set_duty
  2185  0B06                     l3198:	
  2186                           
  2187                           ;main.c: 236: };main.c: 237: if (ctr > 0)
  2188  0B06  0020               	movlb	0	; select bank0
  2189  0B07  082D               	movf	M_control@ctr+1,w
  2190  0B08  3A80               	xorlw	128
  2191  0B09  00AE               	movwf	??_M_control
  2192  0B0A  3080               	movlw	128
  2193  0B0B  022E               	subwf	??_M_control,w
  2194  0B0C  1D03               	skipz
  2195  0B0D  2B10               	goto	u3645
  2196  0B0E  3001               	movlw	1
  2197  0B0F  022C               	subwf	M_control@ctr,w
  2198  0B10                     u3645:	
  2199  0B10  1C03               	skipc
  2200  0B11  2B1B               	goto	l3204
  2201                           
  2202                           ;main.c: 238: {;main.c: 239: LATAbits.LATA0 = 1;
  2203  0B12  0022               	movlb	2	; select bank2
  2204  0B13  140C               	bsf	12,0	;volatile
  2205                           
  2206                           ;main.c: 240: PWM_set_duty(ctr);
  2207  0B14  0020               	movlb	0	; select bank0
  2208  0B15  082D               	movf	M_control@ctr+1,w
  2209  0B16  00A3               	movwf	PWM_set_duty@duty+1
  2210  0B17  082C               	movf	M_control@ctr,w
  2211  0B18  00A2               	movwf	PWM_set_duty@duty
  2212  0B19  2388  3188         	fcall	_PWM_set_duty
  2213  0B1B                     l3204:	
  2214                           
  2215                           ;main.c: 241: };main.c: 242: if (ctr < 0)
  2216  0B1B  0020               	movlb	0	; select bank0
  2217  0B1C  1FAD               	btfss	M_control@ctr+1,7
  2218  0B1D  0008               	return
  2219                           
  2220                           ;main.c: 243: {;main.c: 244: LATAbits.LATA0 = 0;
  2221  0B1E  0022               	movlb	2	; select bank2
  2222  0B1F  100C               	bcf	12,0	;volatile
  2223                           
  2224                           ;main.c: 245: ctr = ctr * -1;
  2225  0B20  30FF               	movlw	255
  2226  0B21  0020               	movlb	0	; select bank0
  2227  0B22  00A2               	movwf	___wmul@multiplier
  2228  0B23  00A3               	movwf	___wmul@multiplier+1
  2229  0B24  082D               	movf	M_control@ctr+1,w
  2230  0B25  00A5               	movwf	___wmul@multiplicand+1
  2231  0B26  082C               	movf	M_control@ctr,w
  2232  0B27  00A4               	movwf	___wmul@multiplicand
  2233  0B28  3185  25A0  3188   	fcall	___wmul
  2234  0B2B  0823               	movf	?___wmul+1,w
  2235  0B2C  00AD               	movwf	M_control@ctr+1
  2236  0B2D  0822               	movf	?___wmul,w
  2237  0B2E  00AC               	movwf	M_control@ctr
  2238                           
  2239                           ;main.c: 246: PWM_set_duty(ctr);
  2240  0B2F  082D               	movf	M_control@ctr+1,w
  2241  0B30  00A3               	movwf	PWM_set_duty@duty+1
  2242  0B31  082C               	movf	M_control@ctr,w
  2243  0B32  00A2               	movwf	PWM_set_duty@duty
  2244  0B33  2B88               	ljmp	l2944
  2245  0B34                     __end_of_M_control:	
  2246  0B34                     __ptext1:	
  2247 ;; *************** function _pre_pidM *****************
  2248 ;; Defined at:
  2249 ;;		line 290 in file "main.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  set             2   71[BANK0 ] int 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 1F/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2263 ;;      Params:         0       2       0       0
  2264 ;;      Locals:         0       0       0       0
  2265 ;;      Temps:          0       2       0       0
  2266 ;;      Totals:         0       4       0       0
  2267 ;;Total ram usage:        4 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    5
  2270 ;; This function calls:
  2271 ;;		_calculate_pidM
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           
  2278                           ;psect for function _pre_pidM
  2279  0B34                     _pre_pidM:	
  2280                           
  2281                           ;main.c: 292: zero_cross = ((lset^set) < 0);
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _pre_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2285  0B34  0867               	movf	pre_pidM@set,w
  2286  0B35  0021               	movlb	1	; select bank1
  2287  0B36  064F               	xorwf	_lset^(0+128),w
  2288  0B37  0020               	movlb	0	; select bank0
  2289  0B38  00E9               	movwf	??_pre_pidM
  2290  0B39  0868               	movf	pre_pidM@set+1,w
  2291  0B3A  0021               	movlb	1	; select bank1
  2292  0B3B  0650               	xorwf	(_lset+1)^(0+128),w
  2293  0B3C  0020               	movlb	0	; select bank0
  2294  0B3D  00EA               	movwf	??_pre_pidM+1
  2295  0B3E  1FEA               	btfss	??_pre_pidM+1,7
  2296  0B3F  2B43               	goto	u4130
  2297  0B40  0020               	movlb	0	; select bank0
  2298  0B41  146C               	bsf	_zero_cross/(0+8),_zero_cross& (0+7)
  2299  0B42  2B45               	goto	u4144
  2300  0B43                     u4130:	
  2301  0B43  0020               	movlb	0	; select bank0
  2302  0B44  106C               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  2303  0B45                     u4144:	
  2304                           
  2305                           ;main.c: 293: if (((zero_cross == 1) &(set <= 0) & (lset <= 0)))
  2306  0B45  0868               	movf	pre_pidM@set+1,w
  2307  0B46  3A80               	xorlw	128
  2308  0B47  00E9               	movwf	??_pre_pidM
  2309  0B48  3080               	movlw	128
  2310  0B49  0269               	subwf	??_pre_pidM,w
  2311  0B4A  1D03               	skipz
  2312  0B4B  2B4E               	goto	u4155
  2313  0B4C  3001               	movlw	1
  2314  0B4D  0267               	subwf	pre_pidM@set,w
  2315  0B4E                     u4155:	
  2316  0B4E  1803               	skipnc
  2317  0B4F  2B63               	goto	l145
  2318  0B50  0020               	movlb	0	; select bank0
  2319  0B51  1C6C               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  2320  0B52  2B63               	goto	l145
  2321  0B53  0021               	movlb	1	; select bank1
  2322  0B54  0850               	movf	(_lset+1)^(0+128),w
  2323  0B55  3A80               	xorlw	128
  2324  0B56  0020               	movlb	0	; select bank0
  2325  0B57  00E9               	movwf	??_pre_pidM
  2326  0B58  3080               	movlw	128
  2327  0B59  0269               	subwf	??_pre_pidM,w
  2328  0B5A  1D03               	skipz
  2329  0B5B  2B5F               	goto	u4175
  2330  0B5C  3001               	movlw	1
  2331  0B5D  0021               	movlb	1	; select bank1
  2332  0B5E  024F               	subwf	_lset^(0+128),w
  2333  0B5F                     u4175:	
  2334  0B5F  1803               	skipnc
  2335  0B60  2B63               	goto	l145
  2336                           
  2337                           ;main.c: 294: {;main.c: 295: zero_cross = 0;
  2338  0B61  0020               	movlb	0	; select bank0
  2339  0B62  106C               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  2340  0B63                     l145:	
  2341                           
  2342                           ;main.c: 296: };main.c: 297: if (zero_cross == 1) {
  2343  0B63  0020               	movlb	0	; select bank0
  2344  0B64  1C6C               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  2345  0B65  2B7A               	goto	l3512
  2346  0B66                     l3506:	
  2347                           
  2348                           ;main.c: 299: calculate_pidM(0);
  2349  0B66  0020               	movlb	0	; select bank0
  2350  0B67  01E5               	clrf	calculate_pidM@set
  2351  0B68  01E6               	clrf	calculate_pidM@set+1
  2352  0B69  2649  3188         	fcall	_calculate_pidM
  2353  0B6B  0064               	clrwdt	;# 
  2354                           
  2355                           ;main.c: 301: _delay((unsigned long)((5)*(32000000/4000.0)));
  2356  0B6C  3034               	movlw	52
  2357  0B6D  0020               	movlb	0	; select bank0
  2358  0B6E  00E9               	movwf	??_pre_pidM
  2359  0B6F  30F1               	movlw	241
  2360  0B70                     u4507:	
  2361  0B70  0B89               	decfsz	9,f
  2362  0B71  2B70               	goto	u4507
  2363  0B72  0BE9               	decfsz	??_pre_pidM,f
  2364  0B73  2B70               	goto	u4507
  2365  0B74  3200               	nop2
  2366                           
  2367                           ;main.c: 302: } while ((I2C_buffer.data.RPM != 0));
  2368  0B75  0021               	movlb	1	; select bank1
  2369  0B76  082B               	movf	(_I2C_buffer^(0+128)+11),w	;volatile
  2370  0B77  042C               	iorwf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  2371  0B78  1D03               	btfss	3,2
  2372  0B79  2B66               	goto	l3506
  2373  0B7A                     l3512:	
  2374                           
  2375                           ;main.c: 303: };main.c: 304: lset = set;
  2376  0B7A  0020               	movlb	0	; select bank0
  2377  0B7B  0868               	movf	pre_pidM@set+1,w
  2378  0B7C  0021               	movlb	1	; select bank1
  2379  0B7D  00D0               	movwf	(_lset+1)^(0+128)
  2380  0B7E  0020               	movlb	0	; select bank0
  2381  0B7F  0867               	movf	pre_pidM@set,w
  2382  0B80  0021               	movlb	1	; select bank1
  2383  0B81  00CF               	movwf	_lset^(0+128)
  2384                           
  2385                           ;main.c: 305: calculate_pidM(set);
  2386  0B82  0020               	movlb	0	; select bank0
  2387  0B83  0868               	movf	pre_pidM@set+1,w
  2388  0B84  00E6               	movwf	calculate_pidM@set+1
  2389  0B85  0867               	movf	pre_pidM@set,w
  2390  0B86  00E5               	movwf	calculate_pidM@set
  2391  0B87  2E49               	ljmp	l3442
  2392  0B88                     __end_of_pre_pidM:	
  2393  0B88                     __ptext5:	
  2394 ;; *************** function _PWM_set_duty *****************
  2395 ;; Defined at:
  2396 ;;		line 222 in file "main.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  duty            2    2[BANK0 ] int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  2    2[BANK0 ] int 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0
  2405 ;; Tracked objects:
  2406 ;;		On entry : 1F/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2410 ;;      Params:         0       2       0       0
  2411 ;;      Locals:         0       0       0       0
  2412 ;;      Temps:          0       2       0       0
  2413 ;;      Totals:         0       4       0       0
  2414 ;;Total ram usage:        4 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    2
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_M_control
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _PWM_set_duty
  2427  0B88                     _PWM_set_duty:	
  2428  0B88                     l2944:	
  2429                           ;incstack = 0
  2430                           ; Regs used in _PWM_set_duty: [wreg+status,2+status,0]
  2431                           
  2432                           
  2433                           ;main.c: 224: if (duty < 1024) {
  2434  0B88  0823               	movf	PWM_set_duty@duty+1,w
  2435  0B89  3A80               	xorlw	128
  2436  0B8A  00A4               	movwf	??_PWM_set_duty
  2437  0B8B  3084               	movlw	132
  2438  0B8C  0224               	subwf	??_PWM_set_duty,w
  2439  0B8D  1D03               	skipz
  2440  0B8E  2B91               	goto	u3135
  2441  0B8F  3000               	movlw	0
  2442  0B90  0222               	subwf	PWM_set_duty@duty,w
  2443  0B91                     u3135:	
  2444  0B91  1803               	skipnc
  2445  0B92  0008               	return
  2446                           
  2447                           ;main.c: 225: CCPR1L = (0xFF & ((unsigned int) duty >> 2));
  2448  0B93  0020               	movlb	0	; select bank0
  2449  0B94  0823               	movf	PWM_set_duty@duty+1,w
  2450  0B95  00A5               	movwf	??_PWM_set_duty+1
  2451  0B96  0822               	movf	PWM_set_duty@duty,w
  2452  0B97  00A4               	movwf	??_PWM_set_duty
  2453  0B98  36A5               	lsrf	??_PWM_set_duty+1,f
  2454  0B99  0CA4               	rrf	??_PWM_set_duty,f
  2455  0B9A  36A5               	lsrf	??_PWM_set_duty+1,f
  2456  0B9B  0CA4               	rrf	??_PWM_set_duty,f
  2457  0B9C  0824               	movf	??_PWM_set_duty,w
  2458  0B9D  0025               	movlb	5	; select bank5
  2459  0B9E  0091               	movwf	17	;volatile
  2460                           
  2461                           ;main.c: 226: CCP1CON = (0x0C | (0x30 & ((unsigned int) duty << 4)));
  2462  0B9F  0020               	movlb	0	; select bank0
  2463  0BA0  0E22               	swapf	PWM_set_duty@duty,w
  2464  0BA1  39F0               	andlw	240
  2465  0BA2  3930               	andlw	48
  2466  0BA3  380C               	iorlw	12
  2467  0BA4  0025               	movlb	5	; select bank5
  2468  0BA5  0093               	movwf	19	;volatile
  2469  0BA6  0008               	return
  2470  0BA7                     __end_of_PWM_set_duty:	
  2471  0BA7                     __ptext9:	
  2472 ;; *************** function _calculate_pidA *****************
  2473 ;; Defined at:
  2474 ;;		line 250 in file "main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  set             4   63[BANK0 ] long 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  pid             4    8[BANK1 ] float 
  2479 ;;  error           4    4[BANK1 ] float 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  2   63[BANK0 ] int 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 1F/0
  2486 ;;		On exit  : 1F/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2489 ;;      Params:         0       4       0       0
  2490 ;;      Locals:         0       0      12       0
  2491 ;;      Temps:          0       2       0       0
  2492 ;;      Totals:         0       6      12       0
  2493 ;;Total ram usage:       18 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		___fladd
  2498 ;;		___flge
  2499 ;;		___flmul
  2500 ;;		___flsub
  2501 ;;		___fltol
  2502 ;;		___xxtofl
  2503 ;;		_abs
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           
  2510                           ;psect for function _calculate_pidA
  2511  0BA7                     _calculate_pidA:	
  2512                           
  2513                           ;main.c: 253: float pid = 0;
  2514                           
  2515                           ;incstack = 0
  2516                           ; Regs used in _calculate_pidA: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2517  0BA7  0021               	movlb	1	; select bank1
  2518  0BA8  01DC               	clrf	calculate_pidA@pid^(0+128)
  2519  0BA9  01DD               	clrf	(calculate_pidA@pid+1)^(0+128)
  2520  0BAA  01DE               	clrf	(calculate_pidA@pid+2)^(0+128)
  2521  0BAB  01DF               	clrf	(calculate_pidA@pid+3)^(0+128)
  2522                           
  2523                           ;main.c: 254: error = set - I2C_buffer.data.DISTANCE;
  2524  0BAC  0020               	movlb	0	; select bank0
  2525  0BAD  0862               	movf	calculate_pidA@set+3,w
  2526  0BAE  00A9               	movwf	___xxtofl@val+3
  2527  0BAF  0861               	movf	calculate_pidA@set+2,w
  2528  0BB0  00A8               	movwf	___xxtofl@val+2
  2529  0BB1  0860               	movf	calculate_pidA@set+1,w
  2530  0BB2  00A7               	movwf	___xxtofl@val+1
  2531  0BB3  085F               	movf	calculate_pidA@set,w
  2532  0BB4  00A6               	movwf	___xxtofl@val
  2533  0BB5  0021               	movlb	1	; select bank1
  2534  0BB6  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  2535  0BB7  0020               	movlb	0	; select bank0
  2536  0BB8  02A6               	subwf	___xxtofl@val,f
  2537  0BB9  0021               	movlb	1	; select bank1
  2538  0BBA  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  2539  0BBB  0020               	movlb	0	; select bank0
  2540  0BBC  3BA7               	subwfb	___xxtofl@val+1,f
  2541  0BBD  0021               	movlb	1	; select bank1
  2542  0BBE  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  2543  0BBF  0020               	movlb	0	; select bank0
  2544  0BC0  3BA8               	subwfb	___xxtofl@val+2,f
  2545  0BC1  0021               	movlb	1	; select bank1
  2546  0BC2  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  2547  0BC3  0020               	movlb	0	; select bank0
  2548  0BC4  3BA9               	subwfb	___xxtofl@val+3,f
  2549  0BC5  3001               	movlw	1
  2550  0BC6  25DC  3188         	fcall	___xxtofl
  2551  0BC8  0829               	movf	?___xxtofl+3,w
  2552  0BC9  0021               	movlb	1	; select bank1
  2553  0BCA  00DB               	movwf	(calculate_pidA@error+3)^(0+128)
  2554  0BCB  0020               	movlb	0	; select bank0
  2555  0BCC  0828               	movf	?___xxtofl+2,w
  2556  0BCD  0021               	movlb	1	; select bank1
  2557  0BCE  00DA               	movwf	(calculate_pidA@error+2)^(0+128)
  2558  0BCF  0020               	movlb	0	; select bank0
  2559  0BD0  0827               	movf	?___xxtofl+1,w
  2560  0BD1  0021               	movlb	1	; select bank1
  2561  0BD2  00D9               	movwf	(calculate_pidA@error+1)^(0+128)
  2562  0BD3  0020               	movlb	0	; select bank0
  2563  0BD4  0826               	movf	?___xxtofl,w
  2564  0BD5  0021               	movlb	1	; select bank1
  2565  0BD6  00D8               	movwf	calculate_pidA@error^(0+128)
  2566                           
  2567                           ;main.c: 255: pid = error * I2C_buffer.data.ATS_PID_KP;
  2568  0BD7  085B               	movf	(calculate_pidA@error+3)^(0+128),w
  2569  0BD8  0020               	movlb	0	; select bank0
  2570  0BD9  00AD               	movwf	___flmul@b+3
  2571  0BDA  0021               	movlb	1	; select bank1
  2572  0BDB  085A               	movf	(calculate_pidA@error+2)^(0+128),w
  2573  0BDC  0020               	movlb	0	; select bank0
  2574  0BDD  00AC               	movwf	___flmul@b+2
  2575  0BDE  0021               	movlb	1	; select bank1
  2576  0BDF  0859               	movf	(calculate_pidA@error+1)^(0+128),w
  2577  0BE0  0020               	movlb	0	; select bank0
  2578  0BE1  00AB               	movwf	___flmul@b+1
  2579  0BE2  0021               	movlb	1	; select bank1
  2580  0BE3  0858               	movf	calculate_pidA@error^(0+128),w
  2581  0BE4  0020               	movlb	0	; select bank0
  2582  0BE5  00AA               	movwf	___flmul@b
  2583  0BE6  301F               	movlw	31
  2584  0BE7  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2585  0BE8  0086               	movwf	6
  2586  0BE9  0187               	clrf	7
  2587  0BEA  3F40               	moviw [0]fsr1
  2588  0BEB  00AE               	movwf	___flmul@a
  2589  0BEC  3F41               	moviw [1]fsr1
  2590  0BED  00AF               	movwf	___flmul@a+1
  2591  0BEE  3F42               	moviw [2]fsr1
  2592  0BEF  00B0               	movwf	___flmul@a+2
  2593  0BF0  3F43               	moviw [3]fsr1
  2594  0BF1  00B1               	movwf	___flmul@a+3
  2595  0BF2  3180  20D9  3188   	fcall	___flmul
  2596  0BF5  082D               	movf	?___flmul+3,w
  2597  0BF6  0021               	movlb	1	; select bank1
  2598  0BF7  00DF               	movwf	(calculate_pidA@pid+3)^(0+128)
  2599  0BF8  0020               	movlb	0	; select bank0
  2600  0BF9  082C               	movf	?___flmul+2,w
  2601  0BFA  0021               	movlb	1	; select bank1
  2602  0BFB  00DE               	movwf	(calculate_pidA@pid+2)^(0+128)
  2603  0BFC  0020               	movlb	0	; select bank0
  2604  0BFD  082B               	movf	?___flmul+1,w
  2605  0BFE  0021               	movlb	1	; select bank1
  2606  0BFF  00DD               	movwf	(calculate_pidA@pid+1)^(0+128)
  2607  0C00  0020               	movlb	0	; select bank0
  2608  0C01  082A               	movf	?___flmul,w
  2609  0C02  0021               	movlb	1	; select bank1
  2610  0C03  00DC               	movwf	calculate_pidA@pid^(0+128)
  2611                           
  2612                           ;main.c: 256: accumulatorA += error;
  2613  0C04  085B               	movf	(calculate_pidA@error+3)^(0+128),w
  2614  0C05  0020               	movlb	0	; select bank0
  2615  0C06  00C6               	movwf	___fladd@b+3
  2616  0C07  0021               	movlb	1	; select bank1
  2617  0C08  085A               	movf	(calculate_pidA@error+2)^(0+128),w
  2618  0C09  0020               	movlb	0	; select bank0
  2619  0C0A  00C5               	movwf	___fladd@b+2
  2620  0C0B  0021               	movlb	1	; select bank1
  2621  0C0C  0859               	movf	(calculate_pidA@error+1)^(0+128),w
  2622  0C0D  0020               	movlb	0	; select bank0
  2623  0C0E  00C4               	movwf	___fladd@b+1
  2624  0C0F  0021               	movlb	1	; select bank1
  2625  0C10  0858               	movf	calculate_pidA@error^(0+128),w
  2626  0C11  0020               	movlb	0	; select bank0
  2627  0C12  00C3               	movwf	___fladd@b
  2628  0C13  0022               	movlb	2	; select bank2
  2629  0C14  0827               	movf	(_accumulatorA+3)^(0+256),w
  2630  0C15  0020               	movlb	0	; select bank0
  2631  0C16  00CA               	movwf	___fladd@a+3
  2632  0C17  0022               	movlb	2	; select bank2
  2633  0C18  0826               	movf	(_accumulatorA+2)^(0+256),w
  2634  0C19  0020               	movlb	0	; select bank0
  2635  0C1A  00C9               	movwf	___fladd@a+2
  2636  0C1B  0022               	movlb	2	; select bank2
  2637  0C1C  0825               	movf	(_accumulatorA+1)^(0+256),w
  2638  0C1D  0020               	movlb	0	; select bank0
  2639  0C1E  00C8               	movwf	___fladd@a+1
  2640  0C1F  0022               	movlb	2	; select bank2
  2641  0C20  0824               	movf	_accumulatorA^(0+256),w
  2642  0C21  0020               	movlb	0	; select bank0
  2643  0C22  00C7               	movwf	___fladd@a
  2644  0C23  3182  22C0  3188   	fcall	___fladd
  2645  0C26  0846               	movf	?___fladd+3,w
  2646  0C27  0022               	movlb	2	; select bank2
  2647  0C28  00A7               	movwf	(_accumulatorA+3)^(0+256)
  2648  0C29  0020               	movlb	0	; select bank0
  2649  0C2A  0845               	movf	?___fladd+2,w
  2650  0C2B  0022               	movlb	2	; select bank2
  2651  0C2C  00A6               	movwf	(_accumulatorA+2)^(0+256)
  2652  0C2D  0020               	movlb	0	; select bank0
  2653  0C2E  0844               	movf	?___fladd+1,w
  2654  0C2F  0022               	movlb	2	; select bank2
  2655  0C30  00A5               	movwf	(_accumulatorA+1)^(0+256)
  2656  0C31  0020               	movlb	0	; select bank0
  2657  0C32  0843               	movf	?___fladd,w
  2658  0C33  0022               	movlb	2	; select bank2
  2659  0C34  00A4               	movwf	_accumulatorA^(0+256)
  2660                           
  2661                           ;main.c: 257: pid += I2C_buffer.data.ATS_PID_KI*accumulatorA;
  2662  0C35  3027               	movlw	39
  2663  0C36  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2664  0C37  0086               	movwf	6
  2665  0C38  0187               	clrf	7
  2666  0C39  3F40               	moviw [0]fsr1
  2667  0C3A  0020               	movlb	0	; select bank0
  2668  0C3B  00AE               	movwf	___flmul@a
  2669  0C3C  3F41               	moviw [1]fsr1
  2670  0C3D  00AF               	movwf	___flmul@a+1
  2671  0C3E  3F42               	moviw [2]fsr1
  2672  0C3F  00B0               	movwf	___flmul@a+2
  2673  0C40  3F43               	moviw [3]fsr1
  2674  0C41  00B1               	movwf	___flmul@a+3
  2675  0C42  0022               	movlb	2	; select bank2
  2676  0C43  0827               	movf	(_accumulatorA+3)^(0+256),w
  2677  0C44  0020               	movlb	0	; select bank0
  2678  0C45  00AD               	movwf	___flmul@b+3
  2679  0C46  0022               	movlb	2	; select bank2
  2680  0C47  0826               	movf	(_accumulatorA+2)^(0+256),w
  2681  0C48  0020               	movlb	0	; select bank0
  2682  0C49  00AC               	movwf	___flmul@b+2
  2683  0C4A  0022               	movlb	2	; select bank2
  2684  0C4B  0825               	movf	(_accumulatorA+1)^(0+256),w
  2685  0C4C  0020               	movlb	0	; select bank0
  2686  0C4D  00AB               	movwf	___flmul@b+1
  2687  0C4E  0022               	movlb	2	; select bank2
  2688  0C4F  0824               	movf	_accumulatorA^(0+256),w
  2689  0C50  0020               	movlb	0	; select bank0
  2690  0C51  00AA               	movwf	___flmul@b
  2691  0C52  3180  20D9  3188   	fcall	___flmul
  2692  0C55  082D               	movf	?___flmul+3,w
  2693  0C56  00C6               	movwf	___fladd@b+3
  2694  0C57  082C               	movf	?___flmul+2,w
  2695  0C58  00C5               	movwf	___fladd@b+2
  2696  0C59  082B               	movf	?___flmul+1,w
  2697  0C5A  00C4               	movwf	___fladd@b+1
  2698  0C5B  082A               	movf	?___flmul,w
  2699  0C5C  00C3               	movwf	___fladd@b
  2700  0C5D  0021               	movlb	1	; select bank1
  2701  0C5E  085F               	movf	(calculate_pidA@pid+3)^(0+128),w
  2702  0C5F  0020               	movlb	0	; select bank0
  2703  0C60  00CA               	movwf	___fladd@a+3
  2704  0C61  0021               	movlb	1	; select bank1
  2705  0C62  085E               	movf	(calculate_pidA@pid+2)^(0+128),w
  2706  0C63  0020               	movlb	0	; select bank0
  2707  0C64  00C9               	movwf	___fladd@a+2
  2708  0C65  0021               	movlb	1	; select bank1
  2709  0C66  085D               	movf	(calculate_pidA@pid+1)^(0+128),w
  2710  0C67  0020               	movlb	0	; select bank0
  2711  0C68  00C8               	movwf	___fladd@a+1
  2712  0C69  0021               	movlb	1	; select bank1
  2713  0C6A  085C               	movf	calculate_pidA@pid^(0+128),w
  2714  0C6B  0020               	movlb	0	; select bank0
  2715  0C6C  00C7               	movwf	___fladd@a
  2716  0C6D  3182  22C0  3188   	fcall	___fladd
  2717  0C70  0846               	movf	?___fladd+3,w
  2718  0C71  0021               	movlb	1	; select bank1
  2719  0C72  00DF               	movwf	(calculate_pidA@pid+3)^(0+128)
  2720  0C73  0020               	movlb	0	; select bank0
  2721  0C74  0845               	movf	?___fladd+2,w
  2722  0C75  0021               	movlb	1	; select bank1
  2723  0C76  00DE               	movwf	(calculate_pidA@pid+2)^(0+128)
  2724  0C77  0020               	movlb	0	; select bank0
  2725  0C78  0844               	movf	?___fladd+1,w
  2726  0C79  0021               	movlb	1	; select bank1
  2727  0C7A  00DD               	movwf	(calculate_pidA@pid+1)^(0+128)
  2728  0C7B  0020               	movlb	0	; select bank0
  2729  0C7C  0843               	movf	?___fladd,w
  2730  0C7D  0021               	movlb	1	; select bank1
  2731  0C7E  00DC               	movwf	calculate_pidA@pid^(0+128)
  2732                           
  2733                           ;main.c: 258: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2734  0C7F  085B               	movf	(calculate_pidA@error+3)^(0+128),w
  2735  0C80  0020               	movlb	0	; select bank0
  2736  0C81  00DE               	movwf	___flsub@b+3
  2737  0C82  0021               	movlb	1	; select bank1
  2738  0C83  085A               	movf	(calculate_pidA@error+2)^(0+128),w
  2739  0C84  0020               	movlb	0	; select bank0
  2740  0C85  00DD               	movwf	___flsub@b+2
  2741  0C86  0021               	movlb	1	; select bank1
  2742  0C87  0859               	movf	(calculate_pidA@error+1)^(0+128),w
  2743  0C88  0020               	movlb	0	; select bank0
  2744  0C89  00DC               	movwf	___flsub@b+1
  2745  0C8A  0021               	movlb	1	; select bank1
  2746  0C8B  0858               	movf	calculate_pidA@error^(0+128),w
  2747  0C8C  0020               	movlb	0	; select bank0
  2748  0C8D  00DB               	movwf	___flsub@b
  2749  0C8E  0022               	movlb	2	; select bank2
  2750  0C8F  0823               	movf	(_lasterrorA+3)^(0+256),w
  2751  0C90  0020               	movlb	0	; select bank0
  2752  0C91  00DA               	movwf	___flsub@a+3
  2753  0C92  0022               	movlb	2	; select bank2
  2754  0C93  0822               	movf	(_lasterrorA+2)^(0+256),w
  2755  0C94  0020               	movlb	0	; select bank0
  2756  0C95  00D9               	movwf	___flsub@a+2
  2757  0C96  0022               	movlb	2	; select bank2
  2758  0C97  0821               	movf	(_lasterrorA+1)^(0+256),w
  2759  0C98  0020               	movlb	0	; select bank0
  2760  0C99  00D8               	movwf	___flsub@a+1
  2761  0C9A  0022               	movlb	2	; select bank2
  2762  0C9B  0820               	movf	_lasterrorA^(0+256),w
  2763  0C9C  0020               	movlb	0	; select bank0
  2764  0C9D  00D7               	movwf	___flsub@a
  2765  0C9E  3182  22A4  3188   	fcall	___flsub
  2766  0CA1  085A               	movf	?___flsub+3,w
  2767  0CA2  00B1               	movwf	___flmul@a+3
  2768  0CA3  0859               	movf	?___flsub+2,w
  2769  0CA4  00B0               	movwf	___flmul@a+2
  2770  0CA5  0858               	movf	?___flsub+1,w
  2771  0CA6  00AF               	movwf	___flmul@a+1
  2772  0CA7  0857               	movf	?___flsub,w
  2773  0CA8  00AE               	movwf	___flmul@a
  2774  0CA9  3023               	movlw	35
  2775  0CAA  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2776  0CAB  0086               	movwf	6
  2777  0CAC  0187               	clrf	7
  2778  0CAD  3F40               	moviw [0]fsr1
  2779  0CAE  00AA               	movwf	___flmul@b
  2780  0CAF  3F41               	moviw [1]fsr1
  2781  0CB0  00AB               	movwf	___flmul@b+1
  2782  0CB1  3F42               	moviw [2]fsr1
  2783  0CB2  00AC               	movwf	___flmul@b+2
  2784  0CB3  3F43               	moviw [3]fsr1
  2785  0CB4  00AD               	movwf	___flmul@b+3
  2786  0CB5  3180  20D9  3188   	fcall	___flmul
  2787  0CB8  082D               	movf	?___flmul+3,w
  2788  0CB9  0021               	movlb	1	; select bank1
  2789  0CBA  00D7               	movwf	(_calculate_pidA$1317+3)^(0+128)
  2790  0CBB  0020               	movlb	0	; select bank0
  2791  0CBC  082C               	movf	?___flmul+2,w
  2792  0CBD  0021               	movlb	1	; select bank1
  2793  0CBE  00D6               	movwf	(_calculate_pidA$1317+2)^(0+128)
  2794  0CBF  0020               	movlb	0	; select bank0
  2795  0CC0  082B               	movf	?___flmul+1,w
  2796  0CC1  0021               	movlb	1	; select bank1
  2797  0CC2  00D5               	movwf	(_calculate_pidA$1317+1)^(0+128)
  2798  0CC3  0020               	movlb	0	; select bank0
  2799  0CC4  082A               	movf	?___flmul,w
  2800  0CC5  0021               	movlb	1	; select bank1
  2801  0CC6  00D4               	movwf	_calculate_pidA$1317^(0+128)
  2802                           
  2803                           ;main.c: 258: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2804  0CC7  0857               	movf	(_calculate_pidA$1317+3)^(0+128),w
  2805  0CC8  0020               	movlb	0	; select bank0
  2806  0CC9  00C6               	movwf	___fladd@b+3
  2807  0CCA  0021               	movlb	1	; select bank1
  2808  0CCB  0856               	movf	(_calculate_pidA$1317+2)^(0+128),w
  2809  0CCC  0020               	movlb	0	; select bank0
  2810  0CCD  00C5               	movwf	___fladd@b+2
  2811  0CCE  0021               	movlb	1	; select bank1
  2812  0CCF  0855               	movf	(_calculate_pidA$1317+1)^(0+128),w
  2813  0CD0  0020               	movlb	0	; select bank0
  2814  0CD1  00C4               	movwf	___fladd@b+1
  2815  0CD2  0021               	movlb	1	; select bank1
  2816  0CD3  0854               	movf	_calculate_pidA$1317^(0+128),w
  2817  0CD4  0020               	movlb	0	; select bank0
  2818  0CD5  00C3               	movwf	___fladd@b
  2819  0CD6  0021               	movlb	1	; select bank1
  2820  0CD7  085F               	movf	(calculate_pidA@pid+3)^(0+128),w
  2821  0CD8  0020               	movlb	0	; select bank0
  2822  0CD9  00CA               	movwf	___fladd@a+3
  2823  0CDA  0021               	movlb	1	; select bank1
  2824  0CDB  085E               	movf	(calculate_pidA@pid+2)^(0+128),w
  2825  0CDC  0020               	movlb	0	; select bank0
  2826  0CDD  00C9               	movwf	___fladd@a+2
  2827  0CDE  0021               	movlb	1	; select bank1
  2828  0CDF  085D               	movf	(calculate_pidA@pid+1)^(0+128),w
  2829  0CE0  0020               	movlb	0	; select bank0
  2830  0CE1  00C8               	movwf	___fladd@a+1
  2831  0CE2  0021               	movlb	1	; select bank1
  2832  0CE3  085C               	movf	calculate_pidA@pid^(0+128),w
  2833  0CE4  0020               	movlb	0	; select bank0
  2834  0CE5  00C7               	movwf	___fladd@a
  2835  0CE6  3182  22C0  3188   	fcall	___fladd
  2836  0CE9  0846               	movf	?___fladd+3,w
  2837  0CEA  0021               	movlb	1	; select bank1
  2838  0CEB  00DF               	movwf	(calculate_pidA@pid+3)^(0+128)
  2839  0CEC  0020               	movlb	0	; select bank0
  2840  0CED  0845               	movf	?___fladd+2,w
  2841  0CEE  0021               	movlb	1	; select bank1
  2842  0CEF  00DE               	movwf	(calculate_pidA@pid+2)^(0+128)
  2843  0CF0  0020               	movlb	0	; select bank0
  2844  0CF1  0844               	movf	?___fladd+1,w
  2845  0CF2  0021               	movlb	1	; select bank1
  2846  0CF3  00DD               	movwf	(calculate_pidA@pid+1)^(0+128)
  2847  0CF4  0020               	movlb	0	; select bank0
  2848  0CF5  0843               	movf	?___fladd,w
  2849  0CF6  0021               	movlb	1	; select bank1
  2850  0CF7  00DC               	movwf	calculate_pidA@pid^(0+128)
  2851                           
  2852                           ;main.c: 259: lasterrorA = error;
  2853  0CF8  085B               	movf	(calculate_pidA@error+3)^(0+128),w
  2854  0CF9  0022               	movlb	2	; select bank2
  2855  0CFA  00A3               	movwf	(_lasterrorA+3)^(0+256)
  2856  0CFB  0021               	movlb	1	; select bank1
  2857  0CFC  085A               	movf	(calculate_pidA@error+2)^(0+128),w
  2858  0CFD  0022               	movlb	2	; select bank2
  2859  0CFE  00A2               	movwf	(_lasterrorA+2)^(0+256)
  2860  0CFF  0021               	movlb	1	; select bank1
  2861  0D00  0859               	movf	(calculate_pidA@error+1)^(0+128),w
  2862  0D01  0022               	movlb	2	; select bank2
  2863  0D02  00A1               	movwf	(_lasterrorA+1)^(0+256)
  2864  0D03  0021               	movlb	1	; select bank1
  2865  0D04  0858               	movf	calculate_pidA@error^(0+128),w
  2866  0D05  0022               	movlb	2	; select bank2
  2867  0D06  00A0               	movwf	_lasterrorA^(0+256)
  2868                           
  2869                           ;main.c: 260: if (pid >= abs(I2C_buffer.data.SPEED))
  2870  0D07  0021               	movlb	1	; select bank1
  2871  0D08  085F               	movf	(calculate_pidA@pid+3)^(0+128),w
  2872  0D09  0020               	movlb	0	; select bank0
  2873  0D0A  00B7               	movwf	___flge@ff1+3
  2874  0D0B  0021               	movlb	1	; select bank1
  2875  0D0C  085E               	movf	(calculate_pidA@pid+2)^(0+128),w
  2876  0D0D  0020               	movlb	0	; select bank0
  2877  0D0E  00B6               	movwf	___flge@ff1+2
  2878  0D0F  0021               	movlb	1	; select bank1
  2879  0D10  085D               	movf	(calculate_pidA@pid+1)^(0+128),w
  2880  0D11  0020               	movlb	0	; select bank0
  2881  0D12  00B5               	movwf	___flge@ff1+1
  2882  0D13  0021               	movlb	1	; select bank1
  2883  0D14  085C               	movf	calculate_pidA@pid^(0+128),w
  2884  0D15  0020               	movlb	0	; select bank0
  2885  0D16  00B4               	movwf	___flge@ff1
  2886  0D17  0021               	movlb	1	; select bank1
  2887  0D18  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2888  0D19  0020               	movlb	0	; select bank0
  2889  0D1A  00A3               	movwf	abs@a+1
  2890  0D1B  0021               	movlb	1	; select bank1
  2891  0D1C  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2892  0D1D  0020               	movlb	0	; select bank0
  2893  0D1E  00A2               	movwf	abs@a
  2894  0D1F  3185  25DA  3188   	fcall	_abs
  2895  0D22  0822               	movf	?_abs,w
  2896  0D23  00A6               	movwf	___xxtofl@val
  2897  0D24  0823               	movf	?_abs+1,w
  2898  0D25  00A7               	movwf	___xxtofl@val+1
  2899  0D26  0D89               	rlf	9,f
  2900  0D27  3B89               	subwfb	9,f
  2901  0D28  0989               	comf	9,f
  2902  0D29  00A8               	movwf	___xxtofl@val+2
  2903  0D2A  00A9               	movwf	___xxtofl@val+3
  2904  0D2B  3001               	movlw	1
  2905  0D2C  25DC               	fcall	___xxtofl
  2906  0D2D  0829               	movf	?___xxtofl+3,w
  2907  0D2E  00BB               	movwf	___flge@ff2+3
  2908  0D2F  0828               	movf	?___xxtofl+2,w
  2909  0D30  00BA               	movwf	___flge@ff2+2
  2910  0D31  0827               	movf	?___xxtofl+1,w
  2911  0D32  00B9               	movwf	___flge@ff2+1
  2912  0D33  0826               	movf	?___xxtofl,w
  2913  0D34  00B8               	movwf	___flge@ff2
  2914  0D35  3184  24C6  3188   	fcall	___flge
  2915  0D38  1C03               	btfss	3,0
  2916  0D39  2D5F               	goto	l135
  2917                           
  2918                           ;main.c: 261: {;main.c: 262: pid = abs(I2C_buffer.data.SPEED);
  2919  0D3A  0021               	movlb	1	; select bank1
  2920  0D3B  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2921  0D3C  0020               	movlb	0	; select bank0
  2922  0D3D  00A3               	movwf	abs@a+1
  2923  0D3E  0021               	movlb	1	; select bank1
  2924  0D3F  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2925  0D40  0020               	movlb	0	; select bank0
  2926  0D41  00A2               	movwf	abs@a
  2927  0D42  3185  25DA  3188   	fcall	_abs
  2928  0D45  0822               	movf	?_abs,w
  2929  0D46  00A6               	movwf	___xxtofl@val
  2930  0D47  0823               	movf	?_abs+1,w
  2931  0D48  00A7               	movwf	___xxtofl@val+1
  2932  0D49  0D89               	rlf	9,f
  2933  0D4A  3B89               	subwfb	9,f
  2934  0D4B  0989               	comf	9,f
  2935  0D4C  00A8               	movwf	___xxtofl@val+2
  2936  0D4D  00A9               	movwf	___xxtofl@val+3
  2937  0D4E  3001               	movlw	1
  2938  0D4F  25DC               	fcall	___xxtofl
  2939  0D50  0829               	movf	?___xxtofl+3,w
  2940  0D51  0021               	movlb	1	; select bank1
  2941  0D52  00DF               	movwf	(calculate_pidA@pid+3)^(0+128)
  2942  0D53  0020               	movlb	0	; select bank0
  2943  0D54  0828               	movf	?___xxtofl+2,w
  2944  0D55  0021               	movlb	1	; select bank1
  2945  0D56  00DE               	movwf	(calculate_pidA@pid+2)^(0+128)
  2946  0D57  0020               	movlb	0	; select bank0
  2947  0D58  0827               	movf	?___xxtofl+1,w
  2948  0D59  0021               	movlb	1	; select bank1
  2949  0D5A  00DD               	movwf	(calculate_pidA@pid+1)^(0+128)
  2950  0D5B  0020               	movlb	0	; select bank0
  2951  0D5C  0826               	movf	?___xxtofl,w
  2952  0D5D  0021               	movlb	1	; select bank1
  2953  0D5E  00DC               	movwf	calculate_pidA@pid^(0+128)
  2954  0D5F                     l135:	
  2955                           
  2956                           ;main.c: 263: };main.c: 264: if (pid <= abs(I2C_buffer.data.SPEED)*-1) {
  2957  0D5F  0021               	movlb	1	; select bank1
  2958  0D60  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2959  0D61  0020               	movlb	0	; select bank0
  2960  0D62  00A3               	movwf	abs@a+1
  2961  0D63  0021               	movlb	1	; select bank1
  2962  0D64  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2963  0D65  0020               	movlb	0	; select bank0
  2964  0D66  00A2               	movwf	abs@a
  2965  0D67  3185  25DA  3188   	fcall	_abs
  2966  0D6A  0922               	comf	?_abs,w
  2967  0D6B  00E3               	movwf	??_calculate_pidA
  2968  0D6C  0923               	comf	?_abs+1,w
  2969  0D6D  00E4               	movwf	??_calculate_pidA+1
  2970  0D6E  0AE3               	incf	??_calculate_pidA,f
  2971  0D6F  1903               	skipnz
  2972  0D70  0AE4               	incf	??_calculate_pidA+1,f
  2973  0D71  0863               	movf	??_calculate_pidA,w
  2974  0D72  00A6               	movwf	___xxtofl@val
  2975  0D73  0864               	movf	??_calculate_pidA+1,w
  2976  0D74  00A7               	movwf	___xxtofl@val+1
  2977  0D75  0D89               	rlf	9,f
  2978  0D76  3B89               	subwfb	9,f
  2979  0D77  0989               	comf	9,f
  2980  0D78  00A8               	movwf	___xxtofl@val+2
  2981  0D79  00A9               	movwf	___xxtofl@val+3
  2982  0D7A  3001               	movlw	1
  2983  0D7B  25DC               	fcall	___xxtofl
  2984  0D7C  0829               	movf	?___xxtofl+3,w
  2985  0D7D  00B7               	movwf	___flge@ff1+3
  2986  0D7E  0828               	movf	?___xxtofl+2,w
  2987  0D7F  00B6               	movwf	___flge@ff1+2
  2988  0D80  0827               	movf	?___xxtofl+1,w
  2989  0D81  00B5               	movwf	___flge@ff1+1
  2990  0D82  0826               	movf	?___xxtofl,w
  2991  0D83  00B4               	movwf	___flge@ff1
  2992  0D84  0021               	movlb	1	; select bank1
  2993  0D85  085F               	movf	(calculate_pidA@pid+3)^(0+128),w
  2994  0D86  0020               	movlb	0	; select bank0
  2995  0D87  00BB               	movwf	___flge@ff2+3
  2996  0D88  0021               	movlb	1	; select bank1
  2997  0D89  085E               	movf	(calculate_pidA@pid+2)^(0+128),w
  2998  0D8A  0020               	movlb	0	; select bank0
  2999  0D8B  00BA               	movwf	___flge@ff2+2
  3000  0D8C  0021               	movlb	1	; select bank1
  3001  0D8D  085D               	movf	(calculate_pidA@pid+1)^(0+128),w
  3002  0D8E  0020               	movlb	0	; select bank0
  3003  0D8F  00B9               	movwf	___flge@ff2+1
  3004  0D90  0021               	movlb	1	; select bank1
  3005  0D91  085C               	movf	calculate_pidA@pid^(0+128),w
  3006  0D92  0020               	movlb	0	; select bank0
  3007  0D93  00B8               	movwf	___flge@ff2
  3008  0D94  3184  24C6  3188   	fcall	___flge
  3009  0D97  1C03               	btfss	3,0
  3010  0D98  2DC5               	goto	l136
  3011                           
  3012                           ;main.c: 265: pid = abs(I2C_buffer.data.SPEED)*-1;
  3013  0D99  0021               	movlb	1	; select bank1
  3014  0D9A  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  3015  0D9B  0020               	movlb	0	; select bank0
  3016  0D9C  00A3               	movwf	abs@a+1
  3017  0D9D  0021               	movlb	1	; select bank1
  3018  0D9E  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  3019  0D9F  0020               	movlb	0	; select bank0
  3020  0DA0  00A2               	movwf	abs@a
  3021  0DA1  3185  25DA  3188   	fcall	_abs
  3022  0DA4  0922               	comf	?_abs,w
  3023  0DA5  00E3               	movwf	??_calculate_pidA
  3024  0DA6  0923               	comf	?_abs+1,w
  3025  0DA7  00E4               	movwf	??_calculate_pidA+1
  3026  0DA8  0AE3               	incf	??_calculate_pidA,f
  3027  0DA9  1903               	skipnz
  3028  0DAA  0AE4               	incf	??_calculate_pidA+1,f
  3029  0DAB  0863               	movf	??_calculate_pidA,w
  3030  0DAC  00A6               	movwf	___xxtofl@val
  3031  0DAD  0864               	movf	??_calculate_pidA+1,w
  3032  0DAE  00A7               	movwf	___xxtofl@val+1
  3033  0DAF  0D89               	rlf	9,f
  3034  0DB0  3B89               	subwfb	9,f
  3035  0DB1  0989               	comf	9,f
  3036  0DB2  00A8               	movwf	___xxtofl@val+2
  3037  0DB3  00A9               	movwf	___xxtofl@val+3
  3038  0DB4  3001               	movlw	1
  3039  0DB5  25DC               	fcall	___xxtofl
  3040  0DB6  0829               	movf	?___xxtofl+3,w
  3041  0DB7  0021               	movlb	1	; select bank1
  3042  0DB8  00DF               	movwf	(calculate_pidA@pid+3)^(0+128)
  3043  0DB9  0020               	movlb	0	; select bank0
  3044  0DBA  0828               	movf	?___xxtofl+2,w
  3045  0DBB  0021               	movlb	1	; select bank1
  3046  0DBC  00DE               	movwf	(calculate_pidA@pid+2)^(0+128)
  3047  0DBD  0020               	movlb	0	; select bank0
  3048  0DBE  0827               	movf	?___xxtofl+1,w
  3049  0DBF  0021               	movlb	1	; select bank1
  3050  0DC0  00DD               	movwf	(calculate_pidA@pid+1)^(0+128)
  3051  0DC1  0020               	movlb	0	; select bank0
  3052  0DC2  0826               	movf	?___xxtofl,w
  3053  0DC3  0021               	movlb	1	; select bank1
  3054  0DC4  00DC               	movwf	calculate_pidA@pid^(0+128)
  3055  0DC5                     l136:	
  3056                           
  3057                           ;main.c: 266: };main.c: 267: return ((int) pid);
  3058  0DC5  0021               	movlb	1	; select bank1
  3059  0DC6  085F               	movf	(calculate_pidA@pid+3)^(0+128),w
  3060  0DC7  0020               	movlb	0	; select bank0
  3061  0DC8  00A5               	movwf	___fltol@f1+3
  3062  0DC9  0021               	movlb	1	; select bank1
  3063  0DCA  085E               	movf	(calculate_pidA@pid+2)^(0+128),w
  3064  0DCB  0020               	movlb	0	; select bank0
  3065  0DCC  00A4               	movwf	___fltol@f1+2
  3066  0DCD  0021               	movlb	1	; select bank1
  3067  0DCE  085D               	movf	(calculate_pidA@pid+1)^(0+128),w
  3068  0DCF  0020               	movlb	0	; select bank0
  3069  0DD0  00A3               	movwf	___fltol@f1+1
  3070  0DD1  0021               	movlb	1	; select bank1
  3071  0DD2  085C               	movf	calculate_pidA@pid^(0+128),w
  3072  0DD3  0020               	movlb	0	; select bank0
  3073  0DD4  00A2               	movwf	___fltol@f1
  3074  0DD5  3185  2528         	fcall	___fltol
  3075  0DD7  0823               	movf	?___fltol+1,w
  3076  0DD8  00E0               	movwf	?_calculate_pidA+1
  3077  0DD9  0822               	movf	?___fltol,w
  3078  0DDA  00DF               	movwf	?_calculate_pidA
  3079  0DDB  0008               	return
  3080  0DDC                     __end_of_calculate_pidA:	
  3081  0DDC                     __ptext11:	
  3082 ;; *************** function ___xxtofl *****************
  3083 ;; Defined at:
  3084 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\xxtofl.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  sign            1    wreg     unsigned char 
  3087 ;;  val             4    6[BANK0 ] long 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  sign            1   14[BANK0 ] unsigned char 
  3090 ;;  arg             4   16[BANK0 ] unsigned long 
  3091 ;;  exp             1   15[BANK0 ] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  4    6[BANK0 ] unsigned char 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 1F/0
  3098 ;;		On exit  : 1F/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3101 ;;      Params:         0       4       0       0
  3102 ;;      Locals:         0       6       0       0
  3103 ;;      Temps:          0       4       0       0
  3104 ;;      Totals:         0      14       0       0
  3105 ;;Total ram usage:       14 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    2
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_calculate_pidA
  3112 ;;		_calculate_pidM
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function ___xxtofl
  3118  0DDC                     ___xxtofl:	
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3122                           ;___xxtofl@sign stored from wreg
  3123  0DDC  00AE               	movwf	___xxtofl@sign
  3124  0DDD  082E               	movf	___xxtofl@sign,w
  3125  0DDE  1D03               	btfss	3,2
  3126  0DDF  1FA9               	btfss	___xxtofl@val+3,7
  3127  0DE0  2DF1               	goto	l3398
  3128  0DE1  0926               	comf	___xxtofl@val,w
  3129  0DE2  00B0               	movwf	___xxtofl@arg
  3130  0DE3  0927               	comf	___xxtofl@val+1,w
  3131  0DE4  00B1               	movwf	___xxtofl@arg+1
  3132  0DE5  0928               	comf	___xxtofl@val+2,w
  3133  0DE6  00B2               	movwf	___xxtofl@arg+2
  3134  0DE7  0929               	comf	___xxtofl@val+3,w
  3135  0DE8  00B3               	movwf	___xxtofl@arg+3
  3136  0DE9  0AB0               	incf	___xxtofl@arg,f
  3137  0DEA  1903               	skipnz
  3138  0DEB  0AB1               	incf	___xxtofl@arg+1,f
  3139  0DEC  1903               	skipnz
  3140  0DED  0AB2               	incf	___xxtofl@arg+2,f
  3141  0DEE  1903               	skipnz
  3142  0DEF  0AB3               	incf	___xxtofl@arg+3,f
  3143  0DF0  2DF9               	goto	l730
  3144  0DF1                     l3398:	
  3145  0DF1  0829               	movf	___xxtofl@val+3,w
  3146  0DF2  00B3               	movwf	___xxtofl@arg+3
  3147  0DF3  0828               	movf	___xxtofl@val+2,w
  3148  0DF4  00B2               	movwf	___xxtofl@arg+2
  3149  0DF5  0827               	movf	___xxtofl@val+1,w
  3150  0DF6  00B1               	movwf	___xxtofl@arg+1
  3151  0DF7  0826               	movf	___xxtofl@val,w
  3152  0DF8  00B0               	movwf	___xxtofl@arg
  3153  0DF9                     l730:	
  3154  0DF9  0829               	movf	___xxtofl@val+3,w
  3155  0DFA  0428               	iorwf	___xxtofl@val+2,w
  3156  0DFB  0427               	iorwf	___xxtofl@val+1,w
  3157  0DFC  0426               	iorwf	___xxtofl@val,w
  3158  0DFD  1D03               	skipz
  3159  0DFE  2E04               	goto	l3402
  3160  0DFF  01A6               	clrf	?___xxtofl
  3161  0E00  01A7               	clrf	?___xxtofl+1
  3162  0E01  01A8               	clrf	?___xxtofl+2
  3163  0E02  01A9               	clrf	?___xxtofl+3
  3164  0E03  0008               	return
  3165  0E04                     l3402:	
  3166  0E04  3096               	movlw	150
  3167  0E05  00AF               	movwf	___xxtofl@exp
  3168  0E06                     l3406:	
  3169  0E06  30FE               	movlw	254
  3170  0E07  0533               	andwf	___xxtofl@arg+3,w
  3171  0E08  1903               	btfsc	3,2
  3172  0E09  2E1B               	goto	l3414
  3173  0E0A  0AAF               	incf	___xxtofl@exp,f
  3174  0E0B  36B3               	lsrf	___xxtofl@arg+3,f
  3175  0E0C  0CB2               	rrf	___xxtofl@arg+2,f
  3176  0E0D  0CB1               	rrf	___xxtofl@arg+1,f
  3177  0E0E  0CB0               	rrf	___xxtofl@arg,f
  3178  0E0F  2E06               	goto	l3406
  3179  0E10                     l3408:	
  3180  0E10  3001               	movlw	1
  3181  0E11  0AAF               	incf	___xxtofl@exp,f
  3182  0E12  07B0               	addwf	___xxtofl@arg,f
  3183  0E13  3000               	movlw	0
  3184  0E14  3DB1               	addwfc	___xxtofl@arg+1,f
  3185  0E15  3DB2               	addwfc	___xxtofl@arg+2,f
  3186  0E16  3DB3               	addwfc	___xxtofl@arg+3,f
  3187  0E17  36B3               	lsrf	___xxtofl@arg+3,f
  3188  0E18  0CB2               	rrf	___xxtofl@arg+2,f
  3189  0E19  0CB1               	rrf	___xxtofl@arg+1,f
  3190  0E1A  0CB0               	rrf	___xxtofl@arg,f
  3191  0E1B                     l3414:	
  3192  0E1B  30FF               	movlw	255
  3193  0E1C  0533               	andwf	___xxtofl@arg+3,w
  3194  0E1D  1903               	btfsc	3,2
  3195  0E1E  2E29               	goto	l3418
  3196  0E1F  2E10               	goto	l3408
  3197  0E20                     l3420:	
  3198  0E20  3002               	movlw	2
  3199  0E21  022F               	subwf	___xxtofl@exp,w
  3200  0E22  1C03               	btfss	3,0
  3201  0E23  2E2B               	goto	l743
  3202  0E24  03AF               	decf	___xxtofl@exp,f
  3203  0E25  35B0               	lslf	___xxtofl@arg,f
  3204  0E26  0DB1               	rlf	___xxtofl@arg+1,f
  3205  0E27  0DB2               	rlf	___xxtofl@arg+2,f
  3206  0E28  0DB3               	rlf	___xxtofl@arg+3,f
  3207  0E29                     l3418:	
  3208  0E29  1FB2               	btfss	___xxtofl@arg+2,7
  3209  0E2A  2E20               	goto	l3420
  3210  0E2B                     l743:	
  3211  0E2B  1C2F               	btfss	___xxtofl@exp,0
  3212  0E2C  13B2               	bcf	___xxtofl@arg+2,7
  3213  0E2D  36AF               	lsrf	___xxtofl@exp,f
  3214  0E2E  082F               	movf	___xxtofl@exp,w
  3215  0E2F  00AD               	movwf	??___xxtofl+3
  3216  0E30  01AC               	clrf	??___xxtofl+2
  3217  0E31  01AB               	clrf	??___xxtofl+1
  3218  0E32  01AA               	clrf	??___xxtofl
  3219  0E33  082A               	movf	??___xxtofl,w
  3220  0E34  04B0               	iorwf	___xxtofl@arg,f
  3221  0E35  082B               	movf	??___xxtofl+1,w
  3222  0E36  04B1               	iorwf	___xxtofl@arg+1,f
  3223  0E37  082C               	movf	??___xxtofl+2,w
  3224  0E38  04B2               	iorwf	___xxtofl@arg+2,f
  3225  0E39  082D               	movf	??___xxtofl+3,w
  3226  0E3A  04B3               	iorwf	___xxtofl@arg+3,f
  3227  0E3B  082E               	movf	___xxtofl@sign,w
  3228  0E3C  1D03               	btfss	3,2
  3229  0E3D  1FA9               	btfss	___xxtofl@val+3,7
  3230  0E3E  2E40               	goto	l3432
  3231  0E3F  17B3               	bsf	___xxtofl@arg+3,7
  3232  0E40                     l3432:	
  3233  0E40  0833               	movf	___xxtofl@arg+3,w
  3234  0E41  00A9               	movwf	?___xxtofl+3
  3235  0E42  0832               	movf	___xxtofl@arg+2,w
  3236  0E43  00A8               	movwf	?___xxtofl+2
  3237  0E44  0831               	movf	___xxtofl@arg+1,w
  3238  0E45  00A7               	movwf	?___xxtofl+1
  3239  0E46  0830               	movf	___xxtofl@arg,w
  3240  0E47  00A6               	movwf	?___xxtofl
  3241  0E48  0008               	return
  3242  0E49                     __end_of___xxtofl:	
  3243  0E49                     __ptext2:	
  3244 ;; *************** function _calculate_pidM *****************
  3245 ;; Defined at:
  3246 ;;		line 270 in file "main.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  set             2   69[BANK0 ] int 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  pid             4   20[BANK1 ] float 
  3251 ;;  error           4   16[BANK1 ] float 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 1F/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3261 ;;      Params:         0       2       0       0
  3262 ;;      Locals:         0       0      12       0
  3263 ;;      Temps:          0       0       0       0
  3264 ;;      Totals:         0       2      12       0
  3265 ;;Total ram usage:       14 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    4
  3268 ;; This function calls:
  3269 ;;		_M_control
  3270 ;;		___fladd
  3271 ;;		___flge
  3272 ;;		___flmul
  3273 ;;		___flsub
  3274 ;;		___fltol
  3275 ;;		___xxtofl
  3276 ;; This function is called by:
  3277 ;;		_pre_pidM
  3278 ;;		_main
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           
  3283                           ;psect for function _calculate_pidM
  3284  0E49                     _calculate_pidM:	
  3285  0E49                     l3442:	
  3286                           ;incstack = 0
  3287                           ; Regs used in _calculate_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3288                           
  3289                           
  3290                           ;main.c: 273: float pid = 0;
  3291  0E49  0021               	movlb	1	; select bank1
  3292  0E4A  30AB               	movlw	((low (_I2C_buffer| 0))& (0+255)+11)
  3293  0E4B  01E8               	clrf	calculate_pidM@pid^(0+128)
  3294  0E4C  01E9               	clrf	(calculate_pidM@pid+1)^(0+128)
  3295  0E4D  01EA               	clrf	(calculate_pidM@pid+2)^(0+128)
  3296  0E4E  01EB               	clrf	(calculate_pidM@pid+3)^(0+128)
  3297                           
  3298                           ;main.c: 274: error = set - I2C_buffer.data.RPM;
  3299  0E4F  0086               	movwf	6
  3300  0E50  0187               	clrf	7
  3301  0E51  3F40               	moviw [0]fsr1
  3302  0E52  0020               	movlb	0	; select bank0
  3303  0E53  0265               	subwf	calculate_pidM@set,w
  3304  0E54  00A6               	movwf	___xxtofl@val
  3305  0E55  3F41               	moviw [1]fsr1
  3306  0E56  3B66               	subwfb	calculate_pidM@set+1,w
  3307  0E57  00A7               	movwf	___xxtofl@val+1
  3308  0E58  01A8               	clrf	___xxtofl@val+2
  3309  0E59  1BA7               	btfsc	___xxtofl@val+1,7
  3310  0E5A  03A8               	decf	___xxtofl@val+2,f
  3311  0E5B  0828               	movf	___xxtofl@val+2,w
  3312  0E5C  00A9               	movwf	___xxtofl@val+3
  3313  0E5D  3001               	movlw	1
  3314  0E5E  25DC  3188         	fcall	___xxtofl
  3315  0E60  0829               	movf	?___xxtofl+3,w
  3316  0E61  0021               	movlb	1	; select bank1
  3317  0E62  00E7               	movwf	(calculate_pidM@error+3)^(0+128)
  3318  0E63  0020               	movlb	0	; select bank0
  3319  0E64  0828               	movf	?___xxtofl+2,w
  3320  0E65  0021               	movlb	1	; select bank1
  3321  0E66  00E6               	movwf	(calculate_pidM@error+2)^(0+128)
  3322  0E67  0020               	movlb	0	; select bank0
  3323  0E68  0827               	movf	?___xxtofl+1,w
  3324  0E69  0021               	movlb	1	; select bank1
  3325  0E6A  00E5               	movwf	(calculate_pidM@error+1)^(0+128)
  3326  0E6B  0020               	movlb	0	; select bank0
  3327  0E6C  0826               	movf	?___xxtofl,w
  3328  0E6D  0021               	movlb	1	; select bank1
  3329  0E6E  00E4               	movwf	calculate_pidM@error^(0+128)
  3330                           
  3331                           ;main.c: 275: pid = error * I2C_buffer.data.RPM_PID_KP;
  3332  0E6F  0867               	movf	(calculate_pidM@error+3)^(0+128),w
  3333  0E70  0020               	movlb	0	; select bank0
  3334  0E71  00AD               	movwf	___flmul@b+3
  3335  0E72  0021               	movlb	1	; select bank1
  3336  0E73  0866               	movf	(calculate_pidM@error+2)^(0+128),w
  3337  0E74  0020               	movlb	0	; select bank0
  3338  0E75  00AC               	movwf	___flmul@b+2
  3339  0E76  0021               	movlb	1	; select bank1
  3340  0E77  0865               	movf	(calculate_pidM@error+1)^(0+128),w
  3341  0E78  0020               	movlb	0	; select bank0
  3342  0E79  00AB               	movwf	___flmul@b+1
  3343  0E7A  0021               	movlb	1	; select bank1
  3344  0E7B  0864               	movf	calculate_pidM@error^(0+128),w
  3345  0E7C  0020               	movlb	0	; select bank0
  3346  0E7D  00AA               	movwf	___flmul@b
  3347  0E7E  3013               	movlw	19
  3348  0E7F  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  3349  0E80  0086               	movwf	6
  3350  0E81  0187               	clrf	7
  3351  0E82  3F40               	moviw [0]fsr1
  3352  0E83  00AE               	movwf	___flmul@a
  3353  0E84  3F41               	moviw [1]fsr1
  3354  0E85  00AF               	movwf	___flmul@a+1
  3355  0E86  3F42               	moviw [2]fsr1
  3356  0E87  00B0               	movwf	___flmul@a+2
  3357  0E88  3F43               	moviw [3]fsr1
  3358  0E89  00B1               	movwf	___flmul@a+3
  3359  0E8A  3180  20D9  3188   	fcall	___flmul
  3360  0E8D  082D               	movf	?___flmul+3,w
  3361  0E8E  0021               	movlb	1	; select bank1
  3362  0E8F  00EB               	movwf	(calculate_pidM@pid+3)^(0+128)
  3363  0E90  0020               	movlb	0	; select bank0
  3364  0E91  082C               	movf	?___flmul+2,w
  3365  0E92  0021               	movlb	1	; select bank1
  3366  0E93  00EA               	movwf	(calculate_pidM@pid+2)^(0+128)
  3367  0E94  0020               	movlb	0	; select bank0
  3368  0E95  082B               	movf	?___flmul+1,w
  3369  0E96  0021               	movlb	1	; select bank1
  3370  0E97  00E9               	movwf	(calculate_pidM@pid+1)^(0+128)
  3371  0E98  0020               	movlb	0	; select bank0
  3372  0E99  082A               	movf	?___flmul,w
  3373  0E9A  0021               	movlb	1	; select bank1
  3374  0E9B  00E8               	movwf	calculate_pidM@pid^(0+128)
  3375                           
  3376                           ;main.c: 276: accumulatorM += error;
  3377  0E9C  0867               	movf	(calculate_pidM@error+3)^(0+128),w
  3378  0E9D  0020               	movlb	0	; select bank0
  3379  0E9E  00C6               	movwf	___fladd@b+3
  3380  0E9F  0021               	movlb	1	; select bank1
  3381  0EA0  0866               	movf	(calculate_pidM@error+2)^(0+128),w
  3382  0EA1  0020               	movlb	0	; select bank0
  3383  0EA2  00C5               	movwf	___fladd@b+2
  3384  0EA3  0021               	movlb	1	; select bank1
  3385  0EA4  0865               	movf	(calculate_pidM@error+1)^(0+128),w
  3386  0EA5  0020               	movlb	0	; select bank0
  3387  0EA6  00C4               	movwf	___fladd@b+1
  3388  0EA7  0021               	movlb	1	; select bank1
  3389  0EA8  0864               	movf	calculate_pidM@error^(0+128),w
  3390  0EA9  0020               	movlb	0	; select bank0
  3391  0EAA  00C3               	movwf	___fladd@b
  3392  0EAB  0022               	movlb	2	; select bank2
  3393  0EAC  082F               	movf	(_accumulatorM+3)^(0+256),w
  3394  0EAD  0020               	movlb	0	; select bank0
  3395  0EAE  00CA               	movwf	___fladd@a+3
  3396  0EAF  0022               	movlb	2	; select bank2
  3397  0EB0  082E               	movf	(_accumulatorM+2)^(0+256),w
  3398  0EB1  0020               	movlb	0	; select bank0
  3399  0EB2  00C9               	movwf	___fladd@a+2
  3400  0EB3  0022               	movlb	2	; select bank2
  3401  0EB4  082D               	movf	(_accumulatorM+1)^(0+256),w
  3402  0EB5  0020               	movlb	0	; select bank0
  3403  0EB6  00C8               	movwf	___fladd@a+1
  3404  0EB7  0022               	movlb	2	; select bank2
  3405  0EB8  082C               	movf	_accumulatorM^(0+256),w
  3406  0EB9  0020               	movlb	0	; select bank0
  3407  0EBA  00C7               	movwf	___fladd@a
  3408  0EBB  3182  22C0  3188   	fcall	___fladd
  3409  0EBE  0846               	movf	?___fladd+3,w
  3410  0EBF  0022               	movlb	2	; select bank2
  3411  0EC0  00AF               	movwf	(_accumulatorM+3)^(0+256)
  3412  0EC1  0020               	movlb	0	; select bank0
  3413  0EC2  0845               	movf	?___fladd+2,w
  3414  0EC3  0022               	movlb	2	; select bank2
  3415  0EC4  00AE               	movwf	(_accumulatorM+2)^(0+256)
  3416  0EC5  0020               	movlb	0	; select bank0
  3417  0EC6  0844               	movf	?___fladd+1,w
  3418  0EC7  0022               	movlb	2	; select bank2
  3419  0EC8  00AD               	movwf	(_accumulatorM+1)^(0+256)
  3420  0EC9  0020               	movlb	0	; select bank0
  3421  0ECA  0843               	movf	?___fladd,w
  3422  0ECB  0022               	movlb	2	; select bank2
  3423  0ECC  00AC               	movwf	_accumulatorM^(0+256)
  3424                           
  3425                           ;main.c: 277: pid += I2C_buffer.data.RPM_PID_KI*accumulatorM;
  3426  0ECD  301B               	movlw	27
  3427  0ECE  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  3428  0ECF  0086               	movwf	6
  3429  0ED0  0187               	clrf	7
  3430  0ED1  3F40               	moviw [0]fsr1
  3431  0ED2  0020               	movlb	0	; select bank0
  3432  0ED3  00AE               	movwf	___flmul@a
  3433  0ED4  3F41               	moviw [1]fsr1
  3434  0ED5  00AF               	movwf	___flmul@a+1
  3435  0ED6  3F42               	moviw [2]fsr1
  3436  0ED7  00B0               	movwf	___flmul@a+2
  3437  0ED8  3F43               	moviw [3]fsr1
  3438  0ED9  00B1               	movwf	___flmul@a+3
  3439  0EDA  0022               	movlb	2	; select bank2
  3440  0EDB  082F               	movf	(_accumulatorM+3)^(0+256),w
  3441  0EDC  0020               	movlb	0	; select bank0
  3442  0EDD  00AD               	movwf	___flmul@b+3
  3443  0EDE  0022               	movlb	2	; select bank2
  3444  0EDF  082E               	movf	(_accumulatorM+2)^(0+256),w
  3445  0EE0  0020               	movlb	0	; select bank0
  3446  0EE1  00AC               	movwf	___flmul@b+2
  3447  0EE2  0022               	movlb	2	; select bank2
  3448  0EE3  082D               	movf	(_accumulatorM+1)^(0+256),w
  3449  0EE4  0020               	movlb	0	; select bank0
  3450  0EE5  00AB               	movwf	___flmul@b+1
  3451  0EE6  0022               	movlb	2	; select bank2
  3452  0EE7  082C               	movf	_accumulatorM^(0+256),w
  3453  0EE8  0020               	movlb	0	; select bank0
  3454  0EE9  00AA               	movwf	___flmul@b
  3455  0EEA  3180  20D9  3188   	fcall	___flmul
  3456  0EED  082D               	movf	?___flmul+3,w
  3457  0EEE  00C6               	movwf	___fladd@b+3
  3458  0EEF  082C               	movf	?___flmul+2,w
  3459  0EF0  00C5               	movwf	___fladd@b+2
  3460  0EF1  082B               	movf	?___flmul+1,w
  3461  0EF2  00C4               	movwf	___fladd@b+1
  3462  0EF3  082A               	movf	?___flmul,w
  3463  0EF4  00C3               	movwf	___fladd@b
  3464  0EF5  0021               	movlb	1	; select bank1
  3465  0EF6  086B               	movf	(calculate_pidM@pid+3)^(0+128),w
  3466  0EF7  0020               	movlb	0	; select bank0
  3467  0EF8  00CA               	movwf	___fladd@a+3
  3468  0EF9  0021               	movlb	1	; select bank1
  3469  0EFA  086A               	movf	(calculate_pidM@pid+2)^(0+128),w
  3470  0EFB  0020               	movlb	0	; select bank0
  3471  0EFC  00C9               	movwf	___fladd@a+2
  3472  0EFD  0021               	movlb	1	; select bank1
  3473  0EFE  0869               	movf	(calculate_pidM@pid+1)^(0+128),w
  3474  0EFF  0020               	movlb	0	; select bank0
  3475  0F00  00C8               	movwf	___fladd@a+1
  3476  0F01  0021               	movlb	1	; select bank1
  3477  0F02  0868               	movf	calculate_pidM@pid^(0+128),w
  3478  0F03  0020               	movlb	0	; select bank0
  3479  0F04  00C7               	movwf	___fladd@a
  3480  0F05  3182  22C0  3188   	fcall	___fladd
  3481  0F08  0846               	movf	?___fladd+3,w
  3482  0F09  0021               	movlb	1	; select bank1
  3483  0F0A  00EB               	movwf	(calculate_pidM@pid+3)^(0+128)
  3484  0F0B  0020               	movlb	0	; select bank0
  3485  0F0C  0845               	movf	?___fladd+2,w
  3486  0F0D  0021               	movlb	1	; select bank1
  3487  0F0E  00EA               	movwf	(calculate_pidM@pid+2)^(0+128)
  3488  0F0F  0020               	movlb	0	; select bank0
  3489  0F10  0844               	movf	?___fladd+1,w
  3490  0F11  0021               	movlb	1	; select bank1
  3491  0F12  00E9               	movwf	(calculate_pidM@pid+1)^(0+128)
  3492  0F13  0020               	movlb	0	; select bank0
  3493  0F14  0843               	movf	?___fladd,w
  3494  0F15  0021               	movlb	1	; select bank1
  3495  0F16  00E8               	movwf	calculate_pidM@pid^(0+128)
  3496                           
  3497                           ;main.c: 278: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  3498  0F17  0867               	movf	(calculate_pidM@error+3)^(0+128),w
  3499  0F18  0020               	movlb	0	; select bank0
  3500  0F19  00DE               	movwf	___flsub@b+3
  3501  0F1A  0021               	movlb	1	; select bank1
  3502  0F1B  0866               	movf	(calculate_pidM@error+2)^(0+128),w
  3503  0F1C  0020               	movlb	0	; select bank0
  3504  0F1D  00DD               	movwf	___flsub@b+2
  3505  0F1E  0021               	movlb	1	; select bank1
  3506  0F1F  0865               	movf	(calculate_pidM@error+1)^(0+128),w
  3507  0F20  0020               	movlb	0	; select bank0
  3508  0F21  00DC               	movwf	___flsub@b+1
  3509  0F22  0021               	movlb	1	; select bank1
  3510  0F23  0864               	movf	calculate_pidM@error^(0+128),w
  3511  0F24  0020               	movlb	0	; select bank0
  3512  0F25  00DB               	movwf	___flsub@b
  3513  0F26  0022               	movlb	2	; select bank2
  3514  0F27  082B               	movf	(_lasterrorM+3)^(0+256),w
  3515  0F28  0020               	movlb	0	; select bank0
  3516  0F29  00DA               	movwf	___flsub@a+3
  3517  0F2A  0022               	movlb	2	; select bank2
  3518  0F2B  082A               	movf	(_lasterrorM+2)^(0+256),w
  3519  0F2C  0020               	movlb	0	; select bank0
  3520  0F2D  00D9               	movwf	___flsub@a+2
  3521  0F2E  0022               	movlb	2	; select bank2
  3522  0F2F  0829               	movf	(_lasterrorM+1)^(0+256),w
  3523  0F30  0020               	movlb	0	; select bank0
  3524  0F31  00D8               	movwf	___flsub@a+1
  3525  0F32  0022               	movlb	2	; select bank2
  3526  0F33  0828               	movf	_lasterrorM^(0+256),w
  3527  0F34  0020               	movlb	0	; select bank0
  3528  0F35  00D7               	movwf	___flsub@a
  3529  0F36  3182  22A4  3188   	fcall	___flsub
  3530  0F39  085A               	movf	?___flsub+3,w
  3531  0F3A  00B1               	movwf	___flmul@a+3
  3532  0F3B  0859               	movf	?___flsub+2,w
  3533  0F3C  00B0               	movwf	___flmul@a+2
  3534  0F3D  0858               	movf	?___flsub+1,w
  3535  0F3E  00AF               	movwf	___flmul@a+1
  3536  0F3F  0857               	movf	?___flsub,w
  3537  0F40  00AE               	movwf	___flmul@a
  3538  0F41  3017               	movlw	23
  3539  0F42  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  3540  0F43  0086               	movwf	6
  3541  0F44  0187               	clrf	7
  3542  0F45  3F40               	moviw [0]fsr1
  3543  0F46  00AA               	movwf	___flmul@b
  3544  0F47  3F41               	moviw [1]fsr1
  3545  0F48  00AB               	movwf	___flmul@b+1
  3546  0F49  3F42               	moviw [2]fsr1
  3547  0F4A  00AC               	movwf	___flmul@b+2
  3548  0F4B  3F43               	moviw [3]fsr1
  3549  0F4C  00AD               	movwf	___flmul@b+3
  3550  0F4D  3180  20D9  3188   	fcall	___flmul
  3551  0F50  082D               	movf	?___flmul+3,w
  3552  0F51  0021               	movlb	1	; select bank1
  3553  0F52  00E3               	movwf	(_calculate_pidM$1318+3)^(0+128)
  3554  0F53  0020               	movlb	0	; select bank0
  3555  0F54  082C               	movf	?___flmul+2,w
  3556  0F55  0021               	movlb	1	; select bank1
  3557  0F56  00E2               	movwf	(_calculate_pidM$1318+2)^(0+128)
  3558  0F57  0020               	movlb	0	; select bank0
  3559  0F58  082B               	movf	?___flmul+1,w
  3560  0F59  0021               	movlb	1	; select bank1
  3561  0F5A  00E1               	movwf	(_calculate_pidM$1318+1)^(0+128)
  3562  0F5B  0020               	movlb	0	; select bank0
  3563  0F5C  082A               	movf	?___flmul,w
  3564  0F5D  0021               	movlb	1	; select bank1
  3565  0F5E  00E0               	movwf	_calculate_pidM$1318^(0+128)
  3566                           
  3567                           ;main.c: 278: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  3568  0F5F  0863               	movf	(_calculate_pidM$1318+3)^(0+128),w
  3569  0F60  0020               	movlb	0	; select bank0
  3570  0F61  00C6               	movwf	___fladd@b+3
  3571  0F62  0021               	movlb	1	; select bank1
  3572  0F63  0862               	movf	(_calculate_pidM$1318+2)^(0+128),w
  3573  0F64  0020               	movlb	0	; select bank0
  3574  0F65  00C5               	movwf	___fladd@b+2
  3575  0F66  0021               	movlb	1	; select bank1
  3576  0F67  0861               	movf	(_calculate_pidM$1318+1)^(0+128),w
  3577  0F68  0020               	movlb	0	; select bank0
  3578  0F69  00C4               	movwf	___fladd@b+1
  3579  0F6A  0021               	movlb	1	; select bank1
  3580  0F6B  0860               	movf	_calculate_pidM$1318^(0+128),w
  3581  0F6C  0020               	movlb	0	; select bank0
  3582  0F6D  00C3               	movwf	___fladd@b
  3583  0F6E  0021               	movlb	1	; select bank1
  3584  0F6F  086B               	movf	(calculate_pidM@pid+3)^(0+128),w
  3585  0F70  0020               	movlb	0	; select bank0
  3586  0F71  00CA               	movwf	___fladd@a+3
  3587  0F72  0021               	movlb	1	; select bank1
  3588  0F73  086A               	movf	(calculate_pidM@pid+2)^(0+128),w
  3589  0F74  0020               	movlb	0	; select bank0
  3590  0F75  00C9               	movwf	___fladd@a+2
  3591  0F76  0021               	movlb	1	; select bank1
  3592  0F77  0869               	movf	(calculate_pidM@pid+1)^(0+128),w
  3593  0F78  0020               	movlb	0	; select bank0
  3594  0F79  00C8               	movwf	___fladd@a+1
  3595  0F7A  0021               	movlb	1	; select bank1
  3596  0F7B  0868               	movf	calculate_pidM@pid^(0+128),w
  3597  0F7C  0020               	movlb	0	; select bank0
  3598  0F7D  00C7               	movwf	___fladd@a
  3599  0F7E  3182  22C0  3188   	fcall	___fladd
  3600  0F81  0846               	movf	?___fladd+3,w
  3601  0F82  0021               	movlb	1	; select bank1
  3602  0F83  00EB               	movwf	(calculate_pidM@pid+3)^(0+128)
  3603  0F84  0020               	movlb	0	; select bank0
  3604  0F85  0845               	movf	?___fladd+2,w
  3605  0F86  0021               	movlb	1	; select bank1
  3606  0F87  00EA               	movwf	(calculate_pidM@pid+2)^(0+128)
  3607  0F88  0020               	movlb	0	; select bank0
  3608  0F89  0844               	movf	?___fladd+1,w
  3609  0F8A  0021               	movlb	1	; select bank1
  3610  0F8B  00E9               	movwf	(calculate_pidM@pid+1)^(0+128)
  3611  0F8C  0020               	movlb	0	; select bank0
  3612  0F8D  0843               	movf	?___fladd,w
  3613  0F8E  0021               	movlb	1	; select bank1
  3614  0F8F  00E8               	movwf	calculate_pidM@pid^(0+128)
  3615                           
  3616                           ;main.c: 279: lasterrorM = error;
  3617  0F90  0867               	movf	(calculate_pidM@error+3)^(0+128),w
  3618  0F91  0022               	movlb	2	; select bank2
  3619  0F92  00AB               	movwf	(_lasterrorM+3)^(0+256)
  3620  0F93  0021               	movlb	1	; select bank1
  3621  0F94  0866               	movf	(calculate_pidM@error+2)^(0+128),w
  3622  0F95  0022               	movlb	2	; select bank2
  3623  0F96  00AA               	movwf	(_lasterrorM+2)^(0+256)
  3624  0F97  0021               	movlb	1	; select bank1
  3625  0F98  0865               	movf	(calculate_pidM@error+1)^(0+128),w
  3626  0F99  0022               	movlb	2	; select bank2
  3627  0F9A  00A9               	movwf	(_lasterrorM+1)^(0+256)
  3628  0F9B  0021               	movlb	1	; select bank1
  3629  0F9C  0864               	movf	calculate_pidM@error^(0+128),w
  3630  0F9D  0022               	movlb	2	; select bank2
  3631  0F9E  00A8               	movwf	_lasterrorM^(0+256)
  3632                           
  3633                           ;main.c: 280: if (pid >= 1023)
  3634  0F9F  0021               	movlb	1	; select bank1
  3635  0FA0  086B               	movf	(calculate_pidM@pid+3)^(0+128),w
  3636  0FA1  0020               	movlb	0	; select bank0
  3637  0FA2  00B7               	movwf	___flge@ff1+3
  3638  0FA3  0021               	movlb	1	; select bank1
  3639  0FA4  086A               	movf	(calculate_pidM@pid+2)^(0+128),w
  3640  0FA5  0020               	movlb	0	; select bank0
  3641  0FA6  00B6               	movwf	___flge@ff1+2
  3642  0FA7  0021               	movlb	1	; select bank1
  3643  0FA8  0869               	movf	(calculate_pidM@pid+1)^(0+128),w
  3644  0FA9  0020               	movlb	0	; select bank0
  3645  0FAA  00B5               	movwf	___flge@ff1+1
  3646  0FAB  0021               	movlb	1	; select bank1
  3647  0FAC  0868               	movf	calculate_pidM@pid^(0+128),w
  3648  0FAD  0020               	movlb	0	; select bank0
  3649  0FAE  00B4               	movwf	___flge@ff1
  3650  0FAF  3044               	movlw	68
  3651  0FB0  00BB               	movwf	___flge@ff2+3
  3652  0FB1  307F               	movlw	127
  3653  0FB2  00BA               	movwf	___flge@ff2+2
  3654  0FB3  30C0               	movlw	192
  3655  0FB4  00B9               	movwf	___flge@ff2+1
  3656  0FB5  01B8               	clrf	___flge@ff2
  3657  0FB6  3184  24C6  3188   	fcall	___flge
  3658  0FB9  1C03               	btfss	3,0
  3659  0FBA  2FC3               	goto	l3460
  3660                           
  3661                           ;main.c: 281: {;main.c: 282: pid = 1023;
  3662  0FBB  3044               	movlw	68
  3663  0FBC  0021               	movlb	1	; select bank1
  3664  0FBD  00EB               	movwf	(calculate_pidM@pid+3)^(0+128)
  3665  0FBE  307F               	movlw	127
  3666  0FBF  00EA               	movwf	(calculate_pidM@pid+2)^(0+128)
  3667  0FC0  30C0               	movlw	192
  3668  0FC1  00E9               	movwf	(calculate_pidM@pid+1)^(0+128)
  3669  0FC2  01E8               	clrf	calculate_pidM@pid^(0+128)
  3670  0FC3                     l3460:	
  3671                           
  3672                           ;main.c: 283: };main.c: 284: if (pid <= -1023) {
  3673  0FC3  30C4               	movlw	196
  3674  0FC4  0020               	movlb	0	; select bank0
  3675  0FC5  00B7               	movwf	___flge@ff1+3
  3676  0FC6  307F               	movlw	127
  3677  0FC7  00B6               	movwf	___flge@ff1+2
  3678  0FC8  30C0               	movlw	192
  3679  0FC9  00B5               	movwf	___flge@ff1+1
  3680  0FCA  01B4               	clrf	___flge@ff1
  3681  0FCB  0021               	movlb	1	; select bank1
  3682  0FCC  086B               	movf	(calculate_pidM@pid+3)^(0+128),w
  3683  0FCD  0020               	movlb	0	; select bank0
  3684  0FCE  00BB               	movwf	___flge@ff2+3
  3685  0FCF  0021               	movlb	1	; select bank1
  3686  0FD0  086A               	movf	(calculate_pidM@pid+2)^(0+128),w
  3687  0FD1  0020               	movlb	0	; select bank0
  3688  0FD2  00BA               	movwf	___flge@ff2+2
  3689  0FD3  0021               	movlb	1	; select bank1
  3690  0FD4  0869               	movf	(calculate_pidM@pid+1)^(0+128),w
  3691  0FD5  0020               	movlb	0	; select bank0
  3692  0FD6  00B9               	movwf	___flge@ff2+1
  3693  0FD7  0021               	movlb	1	; select bank1
  3694  0FD8  0868               	movf	calculate_pidM@pid^(0+128),w
  3695  0FD9  0020               	movlb	0	; select bank0
  3696  0FDA  00B8               	movwf	___flge@ff2
  3697  0FDB  3184  24C6  3188   	fcall	___flge
  3698  0FDE  1C03               	btfss	3,0
  3699  0FDF  2FE8               	goto	l3464
  3700                           
  3701                           ;main.c: 285: pid = -1023;
  3702  0FE0  30C4               	movlw	196
  3703  0FE1  0021               	movlb	1	; select bank1
  3704  0FE2  00EB               	movwf	(calculate_pidM@pid+3)^(0+128)
  3705  0FE3  307F               	movlw	127
  3706  0FE4  00EA               	movwf	(calculate_pidM@pid+2)^(0+128)
  3707  0FE5  30C0               	movlw	192
  3708  0FE6  00E9               	movwf	(calculate_pidM@pid+1)^(0+128)
  3709  0FE7  01E8               	clrf	calculate_pidM@pid^(0+128)
  3710  0FE8                     l3464:	
  3711                           
  3712                           ;main.c: 286: };main.c: 287: M_control((int) pid);
  3713  0FE8  0021               	movlb	1	; select bank1
  3714  0FE9  086B               	movf	(calculate_pidM@pid+3)^(0+128),w
  3715  0FEA  0020               	movlb	0	; select bank0
  3716  0FEB  00A5               	movwf	___fltol@f1+3
  3717  0FEC  0021               	movlb	1	; select bank1
  3718  0FED  086A               	movf	(calculate_pidM@pid+2)^(0+128),w
  3719  0FEE  0020               	movlb	0	; select bank0
  3720  0FEF  00A4               	movwf	___fltol@f1+2
  3721  0FF0  0021               	movlb	1	; select bank1
  3722  0FF1  0869               	movf	(calculate_pidM@pid+1)^(0+128),w
  3723  0FF2  0020               	movlb	0	; select bank0
  3724  0FF3  00A3               	movwf	___fltol@f1+1
  3725  0FF4  0021               	movlb	1	; select bank1
  3726  0FF5  0868               	movf	calculate_pidM@pid^(0+128),w
  3727  0FF6  0020               	movlb	0	; select bank0
  3728  0FF7  00A2               	movwf	___fltol@f1
  3729  0FF8  3185  2528  3188   	fcall	___fltol
  3730  0FFB  0823               	movf	?___fltol+1,w
  3731  0FFC  00AD               	movwf	M_control@ctr+1
  3732  0FFD  0822               	movf	?___fltol,w
  3733  0FFE  00AC               	movwf	M_control@ctr
  3734  0FFF  2AFC               	ljmp	l3194
  3735  1000                     __end_of_calculate_pidM:	
  3736                           
  3737                           	psect	swtext1
  3738  05CA                     __pswtext1:	
  3739  05CA                     S3850:	
  3740  05CA  3188  285A         	ljmp	l3678
  3741  05CC  3188  2860         	ljmp	l3680
  3742  05CE  3188  286A         	ljmp	l3682
  3743  05D0  3188  2874         	ljmp	l3684
  3744  05D2  3188  28EC         	ljmp	l3718
  3745  05D4  3189  2918         	ljmp	l3738
  3746  05D6  3189  2922         	ljmp	l3740
  3747  05D8  3189  299A         	ljmp	l3774
  3748                           
  3749                           	psect	text4
  3750  05A0                     __ptext4:	
  3751 ;; *************** function ___wmul *****************
  3752 ;; Defined at:
  3753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  multiplier      2    2[BANK0 ] unsigned int 
  3756 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  product         2    6[BANK0 ] unsigned int 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  2    2[BANK0 ] unsigned int 
  3761 ;; Registers used:
  3762 ;;		wreg, status,2, status,0
  3763 ;; Tracked objects:
  3764 ;;		On entry : 1F/0
  3765 ;;		On exit  : 1F/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3768 ;;      Params:         0       4       0       0
  3769 ;;      Locals:         0       2       0       0
  3770 ;;      Temps:          0       0       0       0
  3771 ;;      Totals:         0       6       0       0
  3772 ;;Total ram usage:        6 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    2
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_M_control
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function ___wmul
  3784  05A0                     ___wmul:	
  3785                           
  3786                           ;incstack = 0
  3787                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3788  05A0  01A6               	clrf	___wmul@product
  3789  05A1  01A7               	clrf	___wmul@product+1
  3790  05A2                     l2950:	
  3791  05A2  1C22               	btfss	___wmul@multiplier,0
  3792  05A3  2DA8               	goto	l2954
  3793  05A4  0824               	movf	___wmul@multiplicand,w
  3794  05A5  07A6               	addwf	___wmul@product,f
  3795  05A6  0825               	movf	___wmul@multiplicand+1,w
  3796  05A7  3DA7               	addwfc	___wmul@product+1,f
  3797  05A8                     l2954:	
  3798  05A8  35A4               	lslf	___wmul@multiplicand,f
  3799  05A9  0DA5               	rlf	___wmul@multiplicand+1,f
  3800  05AA  36A3               	lsrf	___wmul@multiplier+1,f
  3801  05AB  0CA2               	rrf	___wmul@multiplier,f
  3802  05AC  0822               	movf	___wmul@multiplier,w
  3803  05AD  0423               	iorwf	___wmul@multiplier+1,w
  3804  05AE  1D03               	btfss	3,2
  3805  05AF  2DA2               	goto	l2950
  3806  05B0  0827               	movf	___wmul@product+1,w
  3807  05B1  00A3               	movwf	?___wmul+1
  3808  05B2  0826               	movf	___wmul@product,w
  3809  05B3  00A2               	movwf	?___wmul
  3810  05B4  0008               	return
  3811  05B5                     __end_of___wmul:	
  3812                           
  3813                           	psect	text6
  3814  0410                     __ptext6:	
  3815 ;; *************** function _init_I2C_buffer *****************
  3816 ;; Defined at:
  3817 ;;		line 308 in file "main.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;		None
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;		None
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      void 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0, pclath, cstack
  3826 ;; Tracked objects:
  3827 ;;		On entry : B1F/1
  3828 ;;		On exit  : 1F/1
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3831 ;;      Params:         0       0       0       0
  3832 ;;      Locals:         0       0       0       0
  3833 ;;      Temps:          0       0       0       0
  3834 ;;      Totals:         0       0       0       0
  3835 ;;Total ram usage:        0 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    3
  3838 ;; This function calls:
  3839 ;;		_eeprom_read
  3840 ;; This function is called by:
  3841 ;;		_main
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           
  3846                           ;psect for function _init_I2C_buffer
  3847  0410                     _init_I2C_buffer:	
  3848                           
  3849                           ;main.c: 309: I2C_buffer.data.ID = 0xF3;
  3850                           
  3851                           ;incstack = 0
  3852                           ; Regs used in _init_I2C_buffer: [wreg+status,2+status,0+pclath+cstack]
  3853  0410  30F3               	movlw	243
  3854  0411  00A0               	movwf	_I2C_buffer^(0+128)	;volatile
  3855                           
  3856                           ;main.c: 310: I2C_buffer.data.ADDRESS = eeprom_read(0);
  3857  0412  3000               	movlw	0
  3858  0413  24B4  3184         	fcall	_eeprom_read
  3859  0415  0021               	movlb	1	; select bank1
  3860  0416  00A1               	movwf	(_I2C_buffer^(0+128)+1)	;volatile
  3861                           
  3862                           ;main.c: 311: I2C_buffer.data.START_STOP = 0;
  3863  0417  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  3864                           
  3865                           ;main.c: 312: I2C_buffer.data.IOWPU = eeprom_read(1);
  3866  0418  3001               	movlw	1
  3867  0419  24B4  3184         	fcall	_eeprom_read
  3868  041B  0021               	movlb	1	; select bank1
  3869  041C  00A3               	movwf	(_I2C_buffer^(0+128)+3)	;volatile
  3870                           
  3871                           ;main.c: 313: I2C_buffer.data.MODE = 0;
  3872  041D  01A4               	clrf	(_I2C_buffer^(0+128)+4)	;volatile
  3873                           
  3874                           ;main.c: 314: I2C_buffer.data.SAVE = 0;
  3875  041E  01A5               	clrf	(_I2C_buffer^(0+128)+5)	;volatile
  3876                           
  3877                           ;main.c: 315: I2C_buffer.data.RESET = 0;
  3878  041F  01A6               	clrf	(_I2C_buffer^(0+128)+6)	;volatile
  3879                           
  3880                           ;main.c: 317: I2C_buffer.byte[0x07] = eeprom_read(2);
  3881  0420  3002               	movlw	2
  3882  0421  24B4  3184         	fcall	_eeprom_read
  3883  0423  0021               	movlb	1	; select bank1
  3884  0424  00A7               	movwf	(_I2C_buffer^(0+128)+7)	;volatile
  3885                           
  3886                           ;main.c: 318: I2C_buffer.byte[0x08] = eeprom_read(3);
  3887  0425  3003               	movlw	3
  3888  0426  24B4  3184         	fcall	_eeprom_read
  3889  0428  0021               	movlb	1	; select bank1
  3890  0429  00A8               	movwf	(_I2C_buffer^(0+128)+8)	;volatile
  3891                           
  3892                           ;main.c: 320: I2C_buffer.byte[0x09] = eeprom_read(4);
  3893  042A  3004               	movlw	4
  3894  042B  24B4  3184         	fcall	_eeprom_read
  3895  042D  0021               	movlb	1	; select bank1
  3896  042E  00A9               	movwf	(_I2C_buffer^(0+128)+9)	;volatile
  3897                           
  3898                           ;main.c: 321: I2C_buffer.byte[0x0A] = eeprom_read(5);
  3899  042F  3005               	movlw	5
  3900  0430  24B4  3184         	fcall	_eeprom_read
  3901  0432  0021               	movlb	1	; select bank1
  3902  0433  00AA               	movwf	(_I2C_buffer^(0+128)+10)	;volatile
  3903                           
  3904                           ;main.c: 322: I2C_buffer.data.RPM = 0;
  3905  0434  01AB               	clrf	(_I2C_buffer^(0+128)+11)	;volatile
  3906  0435  01AC               	clrf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  3907                           
  3908                           ;main.c: 323: I2C_buffer.data.SPEED = 0;
  3909  0436  01AD               	clrf	(_I2C_buffer^(0+128)+13)	;volatile
  3910  0437  01AE               	clrf	((_I2C_buffer+1)^(0+128)+13)	;volatile
  3911                           
  3912                           ;main.c: 324: I2C_buffer.data.DISTANCE = 0;
  3913  0438  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  3914  0439  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  3915  043A  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  3916  043B  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  3917                           
  3918                           ;main.c: 326: I2C_buffer.byte[0x13] = eeprom_read(8);
  3919  043C  3008               	movlw	8
  3920  043D  24B4  3184         	fcall	_eeprom_read
  3921  043F  0021               	movlb	1	; select bank1
  3922  0440  00B3               	movwf	(_I2C_buffer^(0+128)+19)	;volatile
  3923                           
  3924                           ;main.c: 327: I2C_buffer.byte[0x14] = eeprom_read(9);
  3925  0441  3009               	movlw	9
  3926  0442  24B4  3184         	fcall	_eeprom_read
  3927  0444  0021               	movlb	1	; select bank1
  3928  0445  00B4               	movwf	(_I2C_buffer^(0+128)+20)	;volatile
  3929                           
  3930                           ;main.c: 328: I2C_buffer.byte[0x15] = eeprom_read(10);
  3931  0446  300A               	movlw	10
  3932  0447  24B4  3184         	fcall	_eeprom_read
  3933  0449  0021               	movlb	1	; select bank1
  3934  044A  00B5               	movwf	(_I2C_buffer^(0+128)+21)	;volatile
  3935                           
  3936                           ;main.c: 329: I2C_buffer.byte[0x16] = eeprom_read(11);
  3937  044B  300B               	movlw	11
  3938  044C  24B4  3184         	fcall	_eeprom_read
  3939  044E  0021               	movlb	1	; select bank1
  3940  044F  00B6               	movwf	(_I2C_buffer^(0+128)+22)	;volatile
  3941                           
  3942                           ;main.c: 331: I2C_buffer.byte[0x17] = eeprom_read(12);
  3943  0450  300C               	movlw	12
  3944  0451  24B4  3184         	fcall	_eeprom_read
  3945  0453  0021               	movlb	1	; select bank1
  3946  0454  00B7               	movwf	(_I2C_buffer^(0+128)+23)	;volatile
  3947                           
  3948                           ;main.c: 332: I2C_buffer.byte[0x18] = eeprom_read(13);
  3949  0455  300D               	movlw	13
  3950  0456  24B4  3184         	fcall	_eeprom_read
  3951  0458  0021               	movlb	1	; select bank1
  3952  0459  00B8               	movwf	(_I2C_buffer^(0+128)+24)	;volatile
  3953                           
  3954                           ;main.c: 333: I2C_buffer.byte[0x19] = eeprom_read(14);
  3955  045A  300E               	movlw	14
  3956  045B  24B4  3184         	fcall	_eeprom_read
  3957  045D  0021               	movlb	1	; select bank1
  3958  045E  00B9               	movwf	(_I2C_buffer^(0+128)+25)	;volatile
  3959                           
  3960                           ;main.c: 334: I2C_buffer.byte[0x1A] = eeprom_read(15);
  3961  045F  300F               	movlw	15
  3962  0460  24B4  3184         	fcall	_eeprom_read
  3963  0462  0021               	movlb	1	; select bank1
  3964  0463  00BA               	movwf	(_I2C_buffer^(0+128)+26)	;volatile
  3965                           
  3966                           ;main.c: 336: I2C_buffer.byte[0x1B] = eeprom_read(16);
  3967  0464  3010               	movlw	16
  3968  0465  24B4  3184         	fcall	_eeprom_read
  3969  0467  0021               	movlb	1	; select bank1
  3970  0468  00BB               	movwf	(_I2C_buffer^(0+128)+27)	;volatile
  3971                           
  3972                           ;main.c: 337: I2C_buffer.byte[0x1C] = eeprom_read(17);
  3973  0469  3011               	movlw	17
  3974  046A  24B4  3184         	fcall	_eeprom_read
  3975  046C  0021               	movlb	1	; select bank1
  3976  046D  00BC               	movwf	(_I2C_buffer^(0+128)+28)	;volatile
  3977                           
  3978                           ;main.c: 338: I2C_buffer.byte[0x1D] = eeprom_read(18);
  3979  046E  3012               	movlw	18
  3980  046F  24B4  3184         	fcall	_eeprom_read
  3981  0471  0021               	movlb	1	; select bank1
  3982  0472  00BD               	movwf	(_I2C_buffer^(0+128)+29)	;volatile
  3983                           
  3984                           ;main.c: 339: I2C_buffer.byte[0x1E] = eeprom_read(19);
  3985  0473  3013               	movlw	19
  3986  0474  24B4  3184         	fcall	_eeprom_read
  3987  0476  0021               	movlb	1	; select bank1
  3988  0477  00BE               	movwf	(_I2C_buffer^(0+128)+30)	;volatile
  3989                           
  3990                           ;main.c: 341: I2C_buffer.byte[0x1F] = eeprom_read(20);
  3991  0478  3014               	movlw	20
  3992  0479  24B4  3184         	fcall	_eeprom_read
  3993  047B  0021               	movlb	1	; select bank1
  3994  047C  00BF               	movwf	(_I2C_buffer^(0+128)+31)	;volatile
  3995                           
  3996                           ;main.c: 342: I2C_buffer.byte[0x20] = eeprom_read(21);
  3997  047D  3015               	movlw	21
  3998  047E  24B4  3184         	fcall	_eeprom_read
  3999  0480  0021               	movlb	1	; select bank1
  4000  0481  00C0               	movwf	(_I2C_buffer^(0+128)+32)	;volatile
  4001                           
  4002                           ;main.c: 343: I2C_buffer.byte[0x21] = eeprom_read(22);
  4003  0482  3016               	movlw	22
  4004  0483  24B4  3184         	fcall	_eeprom_read
  4005  0485  0021               	movlb	1	; select bank1
  4006  0486  00C1               	movwf	(_I2C_buffer^(0+128)+33)	;volatile
  4007                           
  4008                           ;main.c: 344: I2C_buffer.byte[0x22] = eeprom_read(23);
  4009  0487  3017               	movlw	23
  4010  0488  24B4  3184         	fcall	_eeprom_read
  4011  048A  0021               	movlb	1	; select bank1
  4012  048B  00C2               	movwf	(_I2C_buffer^(0+128)+34)	;volatile
  4013                           
  4014                           ;main.c: 346: I2C_buffer.byte[0x23] = eeprom_read(24);
  4015  048C  3018               	movlw	24
  4016  048D  24B4  3184         	fcall	_eeprom_read
  4017  048F  0021               	movlb	1	; select bank1
  4018  0490  00C3               	movwf	(_I2C_buffer^(0+128)+35)	;volatile
  4019                           
  4020                           ;main.c: 347: I2C_buffer.byte[0x24] = eeprom_read(25);
  4021  0491  3019               	movlw	25
  4022  0492  24B4  3184         	fcall	_eeprom_read
  4023  0494  0021               	movlb	1	; select bank1
  4024  0495  00C4               	movwf	(_I2C_buffer^(0+128)+36)	;volatile
  4025                           
  4026                           ;main.c: 348: I2C_buffer.byte[0x25] = eeprom_read(26);
  4027  0496  301A               	movlw	26
  4028  0497  24B4  3184         	fcall	_eeprom_read
  4029  0499  0021               	movlb	1	; select bank1
  4030  049A  00C5               	movwf	(_I2C_buffer^(0+128)+37)	;volatile
  4031                           
  4032                           ;main.c: 349: I2C_buffer.byte[0x26] = eeprom_read(27);
  4033  049B  301B               	movlw	27
  4034  049C  24B4  3184         	fcall	_eeprom_read
  4035  049E  0021               	movlb	1	; select bank1
  4036  049F  00C6               	movwf	(_I2C_buffer^(0+128)+38)	;volatile
  4037                           
  4038                           ;main.c: 351: I2C_buffer.byte[0x27] = eeprom_read(28);
  4039  04A0  301C               	movlw	28
  4040  04A1  24B4  3184         	fcall	_eeprom_read
  4041  04A3  0021               	movlb	1	; select bank1
  4042  04A4  00C7               	movwf	(_I2C_buffer^(0+128)+39)	;volatile
  4043                           
  4044                           ;main.c: 352: I2C_buffer.byte[0x28] = eeprom_read(29);
  4045  04A5  301D               	movlw	29
  4046  04A6  24B4  3184         	fcall	_eeprom_read
  4047  04A8  0021               	movlb	1	; select bank1
  4048  04A9  00C8               	movwf	(_I2C_buffer^(0+128)+40)	;volatile
  4049                           
  4050                           ;main.c: 353: I2C_buffer.byte[0x29] = eeprom_read(30);
  4051  04AA  301E               	movlw	30
  4052  04AB  24B4  3184         	fcall	_eeprom_read
  4053  04AD  0021               	movlb	1	; select bank1
  4054  04AE  00C9               	movwf	(_I2C_buffer^(0+128)+41)	;volatile
  4055                           
  4056                           ;main.c: 354: I2C_buffer.byte[0x2A] = eeprom_read(31);
  4057  04AF  301F               	movlw	31
  4058  04B0  24B4               	fcall	_eeprom_read
  4059  04B1  0021               	movlb	1	; select bank1
  4060  04B2  00CA               	movwf	(_I2C_buffer^(0+128)+42)	;volatile
  4061  04B3  0008               	return
  4062  04B4                     __end_of_init_I2C_buffer:	
  4063  04B4                     __ptext7:	
  4064 ;; *************** function _eeprom_read *****************
  4065 ;; Defined at:
  4066 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eeread.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  addr            1    wreg     unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  addr            1    2[BANK0 ] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      unsigned char 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 1F/1
  4077 ;;		On exit  : 1F/3
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4080 ;;      Params:         0       0       0       0
  4081 ;;      Locals:         0       1       0       0
  4082 ;;      Temps:          0       0       0       0
  4083 ;;      Totals:         0       1       0       0
  4084 ;;Total ram usage:        1 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    2
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_init_I2C_buffer
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _eeprom_read
  4096  04B4                     _eeprom_read:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4100                           ;eeprom_read@addr stored from wreg
  4101  04B4  0020               	movlb	0	; select bank0
  4102  04B5  00A2               	movwf	eeprom_read@addr
  4103  04B6  2CB8               	goto	l287
  4104  04B7                     u4101:	
  4105  04B7  0020               	movlb	0	; select bank0
  4106  04B8                     l287:	
  4107                           ;__eeread.c: 8: do
  4108                           
  4109  04B8  0064               	clrwdt	;# 
  4110                           
  4111                           ;__eeread.c: 12: while(EECON1bits.WR);
  4112  04B9  0023               	movlb	3	; select bank3
  4113  04BA  1895               	btfsc	21,1	;volsfr
  4114  04BB  2CB7               	goto	u4101
  4115                           
  4116                           ;__eeread.c: 18: return ( EEADR = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4117  04BC  0020               	movlb	0	; select bank0
  4118  04BD  0822               	movf	eeprom_read@addr,w
  4119  04BE  0023               	movlb	3	; select bank3
  4120  04BF  0091               	movwf	17	;volatile
  4121  04C0  0192               	clrf	18	;volatile
  4122  04C1  303F               	movlw	63
  4123  04C2  0595               	andwf	21,f	;volsfr
  4124  04C3  1415               	bsf	21,0	;volsfr
  4125  04C4  0813               	movf	19,w	;volatile
  4126  04C5  0008               	return
  4127  04C6                     __end_of_eeprom_read:	
  4128                           
  4129                           	psect	text10
  4130  05DA                     __ptext10:	
  4131 ;; *************** function _abs *****************
  4132 ;; Defined at:
  4133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\abs.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  a               2    2[BANK0 ] int 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  2    2[BANK0 ] int 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 1F/0
  4144 ;;		On exit  : 1F/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       2       0       0
  4148 ;;      Locals:         0       0       0       0
  4149 ;;      Temps:          0       2       0       0
  4150 ;;      Totals:         0       4       0       0
  4151 ;;Total ram usage:        4 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    2
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_calculate_pidA
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _abs
  4163  05DA                     _abs:	
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in _abs: [wreg+status,2+status,0]
  4167  05DA  1FA3               	btfss	abs@a+1,7
  4168  05DB  0008               	return
  4169  05DC  0922               	comf	abs@a,w
  4170  05DD  00A4               	movwf	??_abs
  4171  05DE  0923               	comf	abs@a+1,w
  4172  05DF  00A5               	movwf	??_abs+1
  4173  05E0  0AA4               	incf	??_abs,f
  4174  05E1  1903               	skipnz
  4175  05E2  0AA5               	incf	??_abs+1,f
  4176  05E3  0824               	movf	??_abs,w
  4177  05E4  00A2               	movwf	?_abs
  4178  05E5  0825               	movf	??_abs+1,w
  4179  05E6  00A3               	movwf	?_abs+1
  4180  05E7  0008               	return
  4181  05E8                     __end_of_abs:	
  4182                           
  4183                           	psect	text12
  4184  0528                     __ptext12:	
  4185 ;; *************** function ___fltol *****************
  4186 ;; Defined at:
  4187 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fltol.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  f1              4    2[BANK0 ] unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  exp1            1   11[BANK0 ] unsigned char 
  4192 ;;  sign1           1   10[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  4    2[BANK0 ] long 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0
  4197 ;; Tracked objects:
  4198 ;;		On entry : 1F/0
  4199 ;;		On exit  : 1F/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4202 ;;      Params:         0       4       0       0
  4203 ;;      Locals:         0       2       0       0
  4204 ;;      Temps:          0       4       0       0
  4205 ;;      Totals:         0      10       0       0
  4206 ;;Total ram usage:       10 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    2
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_calculate_pidA
  4213 ;;		_calculate_pidM
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function ___fltol
  4219  0528                     ___fltol:	
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  4223  0528  0822               	movf	___fltol@f1,w
  4224  0529  00A6               	movwf	??___fltol
  4225  052A  0823               	movf	___fltol@f1+1,w
  4226  052B  00A7               	movwf	??___fltol+1
  4227  052C  0824               	movf	___fltol@f1+2,w
  4228  052D  00A8               	movwf	??___fltol+2
  4229  052E  0825               	movf	___fltol@f1+3,w
  4230  052F  00A9               	movwf	??___fltol+3
  4231  0530  1003               	clrc
  4232  0531  0D28               	rlf	??___fltol+2,w
  4233  0532  0D29               	rlf	??___fltol+3,w
  4234  0533  00AB               	movwf	___fltol@exp1
  4235  0534  082B               	movf	___fltol@exp1,w
  4236  0535  1D03               	btfss	3,2
  4237  0536  2D3C               	goto	l3234
  4238  0537                     l3232:	
  4239  0537  01A2               	clrf	?___fltol
  4240  0538  01A3               	clrf	?___fltol+1
  4241  0539  01A4               	clrf	?___fltol+2
  4242  053A  01A5               	clrf	?___fltol+3
  4243  053B  0008               	return
  4244  053C                     l3234:	
  4245  053C  0822               	movf	___fltol@f1,w
  4246  053D  00A6               	movwf	??___fltol
  4247  053E  0823               	movf	___fltol@f1+1,w
  4248  053F  00A7               	movwf	??___fltol+1
  4249  0540  0824               	movf	___fltol@f1+2,w
  4250  0541  00A8               	movwf	??___fltol+2
  4251  0542  0825               	movf	___fltol@f1+3,w
  4252  0543  00A9               	movwf	??___fltol+3
  4253  0544  301F               	movlw	31
  4254  0545                     u3725:	
  4255  0545  36A9               	lsrf	??___fltol+3,f
  4256  0546  0CA8               	rrf	??___fltol+2,f
  4257  0547  0CA7               	rrf	??___fltol+1,f
  4258  0548  0CA6               	rrf	??___fltol,f
  4259  0549  0B89               	decfsz	9,f
  4260  054A  2D45               	goto	u3725
  4261  054B  0826               	movf	??___fltol,w
  4262  054C  00AA               	movwf	___fltol@sign1
  4263  054D  3096               	movlw	150
  4264  054E  17A4               	bsf	___fltol@f1+2,7
  4265  054F  01A5               	clrf	___fltol@f1+3
  4266  0550  02AB               	subwf	___fltol@exp1,f
  4267  0551  1FAB               	btfss	___fltol@exp1,7
  4268  0552  2D5F               	goto	l3252
  4269  0553  082B               	movf	___fltol@exp1,w
  4270  0554  3A80               	xorlw	128
  4271  0555  3E97               	addlw	151
  4272  0556  1C03               	btfss	3,0
  4273  0557  2D37               	goto	l3232
  4274  0558                     l3248:	
  4275  0558  36A5               	lsrf	___fltol@f1+3,f
  4276  0559  0CA4               	rrf	___fltol@f1+2,f
  4277  055A  0CA3               	rrf	___fltol@f1+1,f
  4278  055B  0CA2               	rrf	___fltol@f1,f
  4279  055C  0FAB               	incfsz	___fltol@exp1,f
  4280  055D  2D58               	goto	l3248
  4281  055E  2D6C               	goto	l3260
  4282  055F                     l3252:	
  4283  055F  3020               	movlw	32
  4284  0560  022B               	subwf	___fltol@exp1,w
  4285  0561  1803               	btfsc	3,0
  4286  0562  2D37               	goto	l3232
  4287  0563                     l3258:	
  4288  0563  082B               	movf	___fltol@exp1,w
  4289  0564  1903               	btfsc	3,2
  4290  0565  2D6C               	goto	l3260
  4291  0566  35A2               	lslf	___fltol@f1,f
  4292  0567  0DA3               	rlf	___fltol@f1+1,f
  4293  0568  0DA4               	rlf	___fltol@f1+2,f
  4294  0569  0DA5               	rlf	___fltol@f1+3,f
  4295  056A  03AB               	decf	___fltol@exp1,f
  4296  056B  2D63               	goto	l3258
  4297  056C                     l3260:	
  4298  056C  082A               	movf	___fltol@sign1,w
  4299  056D  1903               	btfsc	3,2
  4300  056E  0008               	return
  4301  056F  09A2               	comf	___fltol@f1,f
  4302  0570  09A3               	comf	___fltol@f1+1,f
  4303  0571  09A4               	comf	___fltol@f1+2,f
  4304  0572  09A5               	comf	___fltol@f1+3,f
  4305  0573  0AA2               	incf	___fltol@f1,f
  4306  0574  1903               	skipnz
  4307  0575  0AA3               	incf	___fltol@f1+1,f
  4308  0576  1903               	skipnz
  4309  0577  0AA4               	incf	___fltol@f1+2,f
  4310  0578  1903               	skipnz
  4311  0579  0AA5               	incf	___fltol@f1+3,f
  4312  057A  0008               	return
  4313  057B                     __end_of___fltol:	
  4314                           
  4315                           	psect	text13
  4316  02A4                     __ptext13:	
  4317 ;; *************** function ___flsub *****************
  4318 ;; Defined at:
  4319 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  a               4   55[BANK0 ] long 
  4322 ;;  b               4   59[BANK0 ] long 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  4   55[BANK0 ] long 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 1F/0
  4331 ;;		On exit  : 1F/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4334 ;;      Params:         0       8       0       0
  4335 ;;      Locals:         0       0       0       0
  4336 ;;      Temps:          0       0       0       0
  4337 ;;      Totals:         0       8       0       0
  4338 ;;Total ram usage:        8 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		___fladd
  4343 ;; This function is called by:
  4344 ;;		_calculate_pidA
  4345 ;;		_calculate_pidM
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           
  4350                           ;psect for function ___flsub
  4351  02A4                     ___flsub:	
  4352                           
  4353                           ;incstack = 0
  4354                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  4355  02A4  3080               	movlw	128
  4356  02A5  06DA               	xorwf	___flsub@a+3,f
  4357  02A6  085E               	movf	___flsub@b+3,w
  4358  02A7  00C6               	movwf	___fladd@b+3
  4359  02A8  085D               	movf	___flsub@b+2,w
  4360  02A9  00C5               	movwf	___fladd@b+2
  4361  02AA  085C               	movf	___flsub@b+1,w
  4362  02AB  00C4               	movwf	___fladd@b+1
  4363  02AC  085B               	movf	___flsub@b,w
  4364  02AD  00C3               	movwf	___fladd@b
  4365  02AE  085A               	movf	___flsub@a+3,w
  4366  02AF  00CA               	movwf	___fladd@a+3
  4367  02B0  0859               	movf	___flsub@a+2,w
  4368  02B1  00C9               	movwf	___fladd@a+2
  4369  02B2  0858               	movf	___flsub@a+1,w
  4370  02B3  00C8               	movwf	___fladd@a+1
  4371  02B4  0857               	movf	___flsub@a,w
  4372  02B5  00C7               	movwf	___fladd@a
  4373  02B6  22C0               	fcall	___fladd
  4374  02B7  0846               	movf	?___fladd+3,w
  4375  02B8  00DA               	movwf	?___flsub+3
  4376  02B9  0845               	movf	?___fladd+2,w
  4377  02BA  00D9               	movwf	?___flsub+2
  4378  02BB  0844               	movf	?___fladd+1,w
  4379  02BC  00D8               	movwf	?___flsub+1
  4380  02BD  0843               	movf	?___fladd,w
  4381  02BE  00D7               	movwf	?___flsub
  4382  02BF  0008               	return
  4383  02C0                     __end_of___flsub:	
  4384  02C0                     __ptext14:	
  4385 ;; *************** function ___fladd *****************
  4386 ;; Defined at:
  4387 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  b               4   35[BANK0 ] long 
  4390 ;;  a               4   39[BANK0 ] long 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  grs             1   54[BANK0 ] unsigned char 
  4393 ;;  bexp            1   53[BANK0 ] unsigned char 
  4394 ;;  aexp            1   52[BANK0 ] unsigned char 
  4395 ;;  signs           1   51[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  4   35[BANK0 ] unsigned char 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 1F/0
  4402 ;;		On exit  : 1F/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4405 ;;      Params:         0       8       0       0
  4406 ;;      Locals:         0       4       0       0
  4407 ;;      Temps:          0       8       0       0
  4408 ;;      Totals:         0      20       0       0
  4409 ;;Total ram usage:       20 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    2
  4412 ;; This function calls:
  4413 ;;		Nothing
  4414 ;; This function is called by:
  4415 ;;		_calculate_pidA
  4416 ;;		_calculate_pidM
  4417 ;;		___flsub
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function ___fladd
  4423  02C0                     ___fladd:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  4427  02C0  0846               	movf	___fladd@b+3,w
  4428  02C1  00D3               	movwf	___fladd@signs
  4429  02C2  3080               	movlw	128
  4430  02C3  05D3               	andwf	___fladd@signs,f
  4431  02C4  3546               	lslf	___fladd@b+3,w
  4432  02C5  00D5               	movwf	___fladd@bexp
  4433  02C6  1BC5               	btfsc	___fladd@b+2,7
  4434  02C7  1455               	bsf	___fladd@bexp,0
  4435  02C8  0855               	movf	___fladd@bexp,w
  4436  02C9  1903               	btfsc	3,2
  4437  02CA  2AD3               	goto	l608
  4438  02CB  0F55               	incfsz	___fladd@bexp,w
  4439  02CC  2AD1               	goto	l609
  4440  02CD  01C3               	clrf	___fladd@b
  4441  02CE  01C4               	clrf	___fladd@b+1
  4442  02CF  01C5               	clrf	___fladd@b+2
  4443  02D0  01C6               	clrf	___fladd@b+3
  4444  02D1                     l609:	
  4445  02D1  17C5               	bsf	___fladd@b+2,7
  4446  02D2  2AD6               	goto	L3
  4447  02D3                     l608:	
  4448  02D3  01C3               	clrf	___fladd@b
  4449  02D4  01C4               	clrf	___fladd@b+1
  4450  02D5  01C5               	clrf	___fladd@b+2
  4451  02D6                     L3:	
  4452  02D6  01C6               	clrf	___fladd@b+3
  4453  02D7  084A               	movf	___fladd@a+3,w
  4454  02D8  00D4               	movwf	___fladd@aexp
  4455  02D9  3080               	movlw	128
  4456  02DA  05D4               	andwf	___fladd@aexp,f
  4457  02DB  0854               	movf	___fladd@aexp,w
  4458  02DC  0653               	xorwf	___fladd@signs,w
  4459  02DD  1D03               	btfss	3,2
  4460  02DE  1753               	bsf	___fladd@signs,6
  4461  02DF  354A               	lslf	___fladd@a+3,w
  4462  02E0  00D4               	movwf	___fladd@aexp
  4463  02E1  1BC9               	btfsc	___fladd@a+2,7
  4464  02E2  1454               	bsf	___fladd@aexp,0
  4465  02E3  0854               	movf	___fladd@aexp,w
  4466  02E4  1903               	btfsc	3,2
  4467  02E5  2AEE               	goto	l613
  4468  02E6  0F54               	incfsz	___fladd@aexp,w
  4469  02E7  2AEC               	goto	l614
  4470  02E8  01C7               	clrf	___fladd@a
  4471  02E9  01C8               	clrf	___fladd@a+1
  4472  02EA  01C9               	clrf	___fladd@a+2
  4473  02EB  01CA               	clrf	___fladd@a+3
  4474  02EC                     l614:	
  4475  02EC  17C9               	bsf	___fladd@a+2,7
  4476  02ED  2AF1               	goto	L4
  4477  02EE                     l613:	
  4478  02EE  01C7               	clrf	___fladd@a
  4479  02EF  01C8               	clrf	___fladd@a+1
  4480  02F0  01C9               	clrf	___fladd@a+2
  4481  02F1                     L4:	
  4482  02F1  01CA               	clrf	___fladd@a+3
  4483  02F2  0855               	movf	___fladd@bexp,w
  4484  02F3  0254               	subwf	___fladd@aexp,w
  4485  02F4  1803               	skipnc
  4486  02F5  2B18               	goto	l3040
  4487  02F6  1F53               	btfss	___fladd@signs,6
  4488  02F7  2AFA               	goto	l3010
  4489  02F8  3080               	movlw	128
  4490  02F9  06D3               	xorwf	___fladd@signs,f
  4491  02FA                     l3010:	
  4492  02FA  0855               	movf	___fladd@bexp,w
  4493  02FB  00D6               	movwf	___fladd@grs
  4494  02FC  0854               	movf	___fladd@aexp,w
  4495  02FD  00D5               	movwf	___fladd@bexp
  4496  02FE  0856               	movf	___fladd@grs,w
  4497  02FF  00D4               	movwf	___fladd@aexp
  4498  0300  0843               	movf	___fladd@b,w
  4499  0301  00D6               	movwf	___fladd@grs
  4500  0302  0847               	movf	___fladd@a,w
  4501  0303  00C3               	movwf	___fladd@b
  4502  0304  0856               	movf	___fladd@grs,w
  4503  0305  00C7               	movwf	___fladd@a
  4504  0306  0844               	movf	___fladd@b+1,w
  4505  0307  00D6               	movwf	___fladd@grs
  4506  0308  0848               	movf	___fladd@a+1,w
  4507  0309  00C4               	movwf	___fladd@b+1
  4508  030A  0856               	movf	___fladd@grs,w
  4509  030B  00C8               	movwf	___fladd@a+1
  4510  030C  0845               	movf	___fladd@b+2,w
  4511  030D  00D6               	movwf	___fladd@grs
  4512  030E  0849               	movf	___fladd@a+2,w
  4513  030F  00C5               	movwf	___fladd@b+2
  4514  0310  0856               	movf	___fladd@grs,w
  4515  0311  00C9               	movwf	___fladd@a+2
  4516  0312  0846               	movf	___fladd@b+3,w
  4517  0313  00D6               	movwf	___fladd@grs
  4518  0314  084A               	movf	___fladd@a+3,w
  4519  0315  00C6               	movwf	___fladd@b+3
  4520  0316  0856               	movf	___fladd@grs,w
  4521  0317  00CA               	movwf	___fladd@a+3
  4522  0318                     l3040:	
  4523  0318  01D6               	clrf	___fladd@grs
  4524  0319  0854               	movf	___fladd@aexp,w
  4525  031A  00CB               	movwf	??___fladd
  4526  031B  01CC               	clrf	??___fladd+1
  4527  031C  084C               	movf	??___fladd+1,w
  4528  031D  00CE               	movwf	??___fladd+3
  4529  031E  0855               	movf	___fladd@bexp,w
  4530  031F  024B               	subwf	??___fladd,w
  4531  0320  00CD               	movwf	??___fladd+2
  4532  0321  1C03               	skipc
  4533  0322  03CE               	decf	??___fladd+3,f
  4534  0323  084E               	movf	??___fladd+3,w
  4535  0324  3A80               	xorlw	128
  4536  0325  00CF               	movwf	??___fladd+4
  4537  0326  3080               	movlw	128
  4538  0327  024F               	subwf	??___fladd+4,w
  4539  0328  1D03               	skipz
  4540  0329  2B2C               	goto	u3255
  4541  032A  301A               	movlw	26
  4542  032B  024D               	subwf	??___fladd+2,w
  4543  032C                     u3255:	
  4544  032C  1C03               	skipc
  4545  032D  2B4E               	goto	l3054
  4546  032E  0020               	movlb	0	; select bank0
  4547  032F  0846               	movf	___fladd@b+3,w
  4548  0330  0445               	iorwf	___fladd@b+2,w
  4549  0331  0444               	iorwf	___fladd@b+1,w
  4550  0332  0443               	iorwf	___fladd@b,w
  4551  0333  1903               	btfsc	3,2
  4552  0334  2B37               	goto	u3260
  4553  0335  3001               	movlw	1
  4554  0336  2B38               	goto	u3270
  4555  0337                     u3260:	
  4556  0337  3000               	movlw	0
  4557  0338                     u3270:	
  4558  0338  00D6               	movwf	___fladd@grs
  4559  0339  01C3               	clrf	___fladd@b
  4560  033A  01C4               	clrf	___fladd@b+1
  4561  033B  01C5               	clrf	___fladd@b+2
  4562  033C  01C6               	clrf	___fladd@b+3
  4563  033D  0854               	movf	___fladd@aexp,w
  4564  033E  00D5               	movwf	___fladd@bexp
  4565  033F  2B53               	goto	l619
  4566  0340                     l621:	
  4567  0340  1C56               	btfss	___fladd@grs,0
  4568  0341  2B46               	goto	l622
  4569  0342  3656               	lsrf	___fladd@grs,w
  4570  0343  3801               	iorlw	1
  4571  0344  00D6               	movwf	___fladd@grs
  4572  0345  2B47               	goto	l623
  4573  0346                     l622:	
  4574  0346  36D6               	lsrf	___fladd@grs,f
  4575  0347                     l623:	
  4576  0347  1843               	btfsc	___fladd@b,0
  4577  0348  17D6               	bsf	___fladd@grs,7
  4578  0349  37C6               	asrf	___fladd@b+3,f
  4579  034A  0CC5               	rrf	___fladd@b+2,f
  4580  034B  0CC4               	rrf	___fladd@b+1,f
  4581  034C  0CC3               	rrf	___fladd@b,f
  4582  034D  0AD5               	incf	___fladd@bexp,f
  4583  034E                     l3054:	
  4584  034E  0020               	movlb	0	; select bank0
  4585  034F  0854               	movf	___fladd@aexp,w
  4586  0350  0255               	subwf	___fladd@bexp,w
  4587  0351  1C03               	skipc
  4588  0352  2B40               	goto	l621
  4589  0353                     l619:	
  4590  0353  1B53               	btfsc	___fladd@signs,6
  4591  0354  2B76               	goto	l3072
  4592  0355  0855               	movf	___fladd@bexp,w
  4593  0356  1D03               	btfss	3,2
  4594  0357  2B5D               	goto	l3060
  4595  0358  01C3               	clrf	?___fladd
  4596  0359  01C4               	clrf	?___fladd+1
  4597  035A  01C5               	clrf	?___fladd+2
  4598  035B  01C6               	clrf	?___fladd+3
  4599  035C  0008               	return
  4600  035D                     l3060:	
  4601  035D  0847               	movf	___fladd@a,w
  4602  035E  07C3               	addwf	___fladd@b,f
  4603  035F  0848               	movf	___fladd@a+1,w
  4604  0360  3DC4               	addwfc	___fladd@b+1,f
  4605  0361  0849               	movf	___fladd@a+2,w
  4606  0362  3DC5               	addwfc	___fladd@b+2,f
  4607  0363  084A               	movf	___fladd@a+3,w
  4608  0364  3DC6               	addwfc	___fladd@b+3,f
  4609  0365  1C46               	btfss	___fladd@b+3,0
  4610  0366  2BDE               	goto	l3102
  4611  0367  1C56               	btfss	___fladd@grs,0
  4612  0368  2B6D               	goto	l630
  4613  0369  3656               	lsrf	___fladd@grs,w
  4614  036A  3801               	iorlw	1
  4615  036B  00D6               	movwf	___fladd@grs
  4616  036C  2B6E               	goto	l631
  4617  036D                     l630:	
  4618  036D  36D6               	lsrf	___fladd@grs,f
  4619  036E                     l631:	
  4620  036E  1843               	btfsc	___fladd@b,0
  4621  036F  17D6               	bsf	___fladd@grs,7
  4622  0370  37C6               	asrf	___fladd@b+3,f
  4623  0371  0CC5               	rrf	___fladd@b+2,f
  4624  0372  0CC4               	rrf	___fladd@b+1,f
  4625  0373  0CC3               	rrf	___fladd@b,f
  4626  0374  0AD5               	incf	___fladd@bexp,f
  4627  0375  2BDE               	goto	l3102
  4628  0376                     l3072:	
  4629  0376  0846               	movf	___fladd@b+3,w
  4630  0377  3A80               	xorlw	128
  4631  0378  00CB               	movwf	??___fladd
  4632  0379  084A               	movf	___fladd@a+3,w
  4633  037A  3A80               	xorlw	128
  4634  037B  024B               	subwf	??___fladd,w
  4635  037C  1D03               	skipz
  4636  037D  2B88               	goto	u3363
  4637  037E  0849               	movf	___fladd@a+2,w
  4638  037F  0245               	subwf	___fladd@b+2,w
  4639  0380  1D03               	skipz
  4640  0381  2B88               	goto	u3363
  4641  0382  0848               	movf	___fladd@a+1,w
  4642  0383  0244               	subwf	___fladd@b+1,w
  4643  0384  1D03               	skipz
  4644  0385  2B88               	goto	u3363
  4645  0386  0847               	movf	___fladd@a,w
  4646  0387  0243               	subwf	___fladd@b,w
  4647  0388                     u3363:	
  4648  0388  1803               	skipnc
  4649  0389  2BB7               	goto	l3082
  4650  038A  30FF               	movlw	255
  4651  038B  00CB               	movwf	??___fladd
  4652  038C  00CC               	movwf	??___fladd+1
  4653  038D  00CD               	movwf	??___fladd+2
  4654  038E  00CE               	movwf	??___fladd+3
  4655  038F  0843               	movf	___fladd@b,w
  4656  0390  0247               	subwf	___fladd@a,w
  4657  0391  00CF               	movwf	??___fladd+4
  4658  0392  0844               	movf	___fladd@b+1,w
  4659  0393  3B48               	subwfb	___fladd@a+1,w
  4660  0394  00D0               	movwf	??___fladd+5
  4661  0395  0845               	movf	___fladd@b+2,w
  4662  0396  3B49               	subwfb	___fladd@a+2,w
  4663  0397  00D1               	movwf	??___fladd+6
  4664  0398  0846               	movf	___fladd@b+3,w
  4665  0399  3B4A               	subwfb	___fladd@a+3,w
  4666  039A  00D2               	movwf	??___fladd+7
  4667  039B  084F               	movf	??___fladd+4,w
  4668  039C  07CB               	addwf	??___fladd,f
  4669  039D  0850               	movf	??___fladd+5,w
  4670  039E  3DCC               	addwfc	??___fladd+1,f
  4671  039F  0851               	movf	??___fladd+6,w
  4672  03A0  3DCD               	addwfc	??___fladd+2,f
  4673  03A1  0852               	movf	??___fladd+7,w
  4674  03A2  3DCE               	addwfc	??___fladd+3,f
  4675  03A3  084E               	movf	??___fladd+3,w
  4676  03A4  00C6               	movwf	___fladd@b+3
  4677  03A5  084D               	movf	??___fladd+2,w
  4678  03A6  00C5               	movwf	___fladd@b+2
  4679  03A7  084C               	movf	??___fladd+1,w
  4680  03A8  00C4               	movwf	___fladd@b+1
  4681  03A9  084B               	movf	??___fladd,w
  4682  03AA  00C3               	movwf	___fladd@b
  4683  03AB  3080               	movlw	128
  4684  03AC  06D3               	xorwf	___fladd@signs,f
  4685  03AD  09D6               	comf	___fladd@grs,f
  4686  03AE  0FD6               	incfsz	___fladd@grs,f
  4687  03AF  2BBF               	goto	l636
  4688  03B0  3001               	movlw	1
  4689  03B1  07C3               	addwf	___fladd@b,f
  4690  03B2  3000               	movlw	0
  4691  03B3  3DC4               	addwfc	___fladd@b+1,f
  4692  03B4  3DC5               	addwfc	___fladd@b+2,f
  4693  03B5  3DC6               	addwfc	___fladd@b+3,f
  4694  03B6  2BBF               	goto	l636
  4695  03B7                     l3082:	
  4696  03B7  0847               	movf	___fladd@a,w
  4697  03B8  02C3               	subwf	___fladd@b,f
  4698  03B9  0848               	movf	___fladd@a+1,w
  4699  03BA  3BC4               	subwfb	___fladd@b+1,f
  4700  03BB  0849               	movf	___fladd@a+2,w
  4701  03BC  3BC5               	subwfb	___fladd@b+2,f
  4702  03BD  084A               	movf	___fladd@a+3,w
  4703  03BE  3BC6               	subwfb	___fladd@b+3,f
  4704  03BF                     l636:	
  4705  03BF  0846               	movf	___fladd@b+3,w
  4706  03C0  0445               	iorwf	___fladd@b+2,w
  4707  03C1  0444               	iorwf	___fladd@b+1,w
  4708  03C2  0443               	iorwf	___fladd@b,w
  4709  03C3  1D03               	skipz
  4710  03C4  2BDC               	goto	l3100
  4711  03C5  0856               	movf	___fladd@grs,w
  4712  03C6  1D03               	btfss	3,2
  4713  03C7  2BDC               	goto	l3100
  4714  03C8  01C3               	clrf	?___fladd
  4715  03C9  01C4               	clrf	?___fladd+1
  4716  03CA  01C5               	clrf	?___fladd+2
  4717  03CB  01C6               	clrf	?___fladd+3
  4718  03CC  0008               	return
  4719  03CD                     l3088:	
  4720  03CD  35C3               	lslf	___fladd@b,f
  4721  03CE  0DC4               	rlf	___fladd@b+1,f
  4722  03CF  0DC5               	rlf	___fladd@b+2,f
  4723  03D0  0DC6               	rlf	___fladd@b+3,f
  4724  03D1  1BD6               	btfsc	___fladd@grs,7
  4725  03D2  1443               	bsf	___fladd@b,0
  4726  03D3  1C56               	btfss	___fladd@grs,0
  4727  03D4  2BD8               	goto	l641
  4728  03D5  1403               	setc
  4729  03D6  0DD6               	rlf	___fladd@grs,f
  4730  03D7  2BD9               	goto	l3096
  4731  03D8                     l641:	
  4732  03D8  35D6               	lslf	___fladd@grs,f
  4733  03D9                     l3096:	
  4734  03D9  0855               	movf	___fladd@bexp,w
  4735  03DA  1D03               	btfss	3,2
  4736  03DB  03D5               	decf	___fladd@bexp,f
  4737  03DC                     l3100:	
  4738  03DC  1FC5               	btfss	___fladd@b+2,7
  4739  03DD  2BCD               	goto	l3088
  4740  03DE                     l3102:	
  4741  03DE  01D4               	clrf	___fladd@aexp
  4742  03DF  1FD6               	btfss	___fladd@grs,7
  4743  03E0  2BE9               	goto	l3112
  4744  03E1  0856               	movf	___fladd@grs,w
  4745  03E2  397F               	andlw	127
  4746  03E3  1903               	btfsc	3,2
  4747  03E4  1843               	btfsc	___fladd@b,0
  4748  03E5  2BE7               	goto	l3108
  4749  03E6  2BE9               	goto	l3112
  4750  03E7                     l3108:	
  4751  03E7  01D4               	clrf	___fladd@aexp
  4752  03E8  0AD4               	incf	___fladd@aexp,f
  4753  03E9                     l3112:	
  4754  03E9  0854               	movf	___fladd@aexp,w
  4755  03EA  1903               	btfsc	3,2
  4756  03EB  2BFA               	goto	l3124
  4757  03EC  3001               	movlw	1
  4758  03ED  07C3               	addwf	___fladd@b,f
  4759  03EE  3000               	movlw	0
  4760  03EF  3DC4               	addwfc	___fladd@b+1,f
  4761  03F0  3DC5               	addwfc	___fladd@b+2,f
  4762  03F1  3DC6               	addwfc	___fladd@b+3,f
  4763  03F2  1C46               	btfss	___fladd@b+3,0
  4764  03F3  2BFA               	goto	l3124
  4765  03F4  37C6               	asrf	___fladd@b+3,f
  4766  03F5  0CC5               	rrf	___fladd@b+2,f
  4767  03F6  0CC4               	rrf	___fladd@b+1,f
  4768  03F7  0CC3               	rrf	___fladd@b,f
  4769  03F8  0F55               	incfsz	___fladd@bexp,w
  4770  03F9  0AD5               	incf	___fladd@bexp,f
  4771  03FA                     l3124:	
  4772  03FA  0A55               	incf	___fladd@bexp,w
  4773  03FB  1D03               	btfss	3,2
  4774  03FC  0855               	movf	___fladd@bexp,w
  4775  03FD  1D03               	btfss	3,2
  4776  03FE  2C06               	goto	l3132
  4777  03FF  01C3               	clrf	___fladd@b
  4778  0400  01C4               	clrf	___fladd@b+1
  4779  0401  01C5               	clrf	___fladd@b+2
  4780  0402  01C6               	clrf	___fladd@b+3
  4781  0403  0855               	movf	___fladd@bexp,w
  4782  0404  1903               	btfsc	3,2
  4783  0405  01D3               	clrf	___fladd@signs
  4784  0406                     l3132:	
  4785  0406  1C55               	btfss	___fladd@bexp,0
  4786  0407  2C0A               	goto	l656
  4787  0408  17C5               	bsf	___fladd@b+2,7
  4788  0409  2C0B               	goto	l3136
  4789  040A                     l656:	
  4790  040A  13C5               	bcf	___fladd@b+2,7
  4791  040B                     l3136:	
  4792  040B  3655               	lsrf	___fladd@bexp,w
  4793  040C  00C6               	movwf	___fladd@b+3
  4794  040D  1BD3               	btfsc	___fladd@signs,7
  4795  040E  17C6               	bsf	___fladd@b+3,7
  4796  040F  0008               	return
  4797  0410                     __end_of___fladd:	
  4798                           
  4799                           	psect	text15
  4800  00D9                     __ptext15:	
  4801 ;; *************** function ___flmul *****************
  4802 ;; Defined at:
  4803 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcmul.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  b               4   10[BANK0 ] unsigned char 
  4806 ;;  a               4   14[BANK0 ] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  prod            4   29[BANK0 ] struct .
  4809 ;;  grs             4   25[BANK0 ] unsigned long 
  4810 ;;  temp            2   33[BANK0 ] struct .
  4811 ;;  bexp            1   24[BANK0 ] unsigned char 
  4812 ;;  aexp            1   23[BANK0 ] unsigned char 
  4813 ;;  sign            1   22[BANK0 ] unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  4   10[BANK0 ] unsigned char 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0, pclath, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 1F/0
  4820 ;;		On exit  : 1F/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4823 ;;      Params:         0       8       0       0
  4824 ;;      Locals:         0      13       0       0
  4825 ;;      Temps:          0       4       0       0
  4826 ;;      Totals:         0      25       0       0
  4827 ;;Total ram usage:       25 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    3
  4830 ;; This function calls:
  4831 ;;		__Umul8_16
  4832 ;; This function is called by:
  4833 ;;		_calculate_pidA
  4834 ;;		_calculate_pidM
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function ___flmul
  4840  00D9                     ___flmul:	
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  4844  00D9  082D               	movf	___flmul@b+3,w
  4845  00DA  00B6               	movwf	___flmul@sign
  4846  00DB  3080               	movlw	128
  4847  00DC  05B6               	andwf	___flmul@sign,f
  4848  00DD  352D               	lslf	___flmul@b+3,w
  4849  00DE  00B8               	movwf	___flmul@bexp
  4850  00DF  1BAC               	btfsc	___flmul@b+2,7
  4851  00E0  1438               	bsf	___flmul@bexp,0
  4852  00E1  0838               	movf	___flmul@bexp,w
  4853  00E2  1903               	btfsc	3,2
  4854  00E3  28EC               	goto	l701
  4855  00E4  0F38               	incfsz	___flmul@bexp,w
  4856  00E5  28EA               	goto	l702
  4857  00E6  01AA               	clrf	___flmul@b
  4858  00E7  01AB               	clrf	___flmul@b+1
  4859  00E8  01AC               	clrf	___flmul@b+2
  4860  00E9  01AD               	clrf	___flmul@b+3
  4861  00EA                     l702:	
  4862  00EA  17AC               	bsf	___flmul@b+2,7
  4863  00EB  28F0               	goto	l3286
  4864  00EC                     l701:	
  4865  00EC  01AA               	clrf	___flmul@b
  4866  00ED  01AB               	clrf	___flmul@b+1
  4867  00EE  01AC               	clrf	___flmul@b+2
  4868  00EF  01AD               	clrf	___flmul@b+3
  4869  00F0                     l3286:	
  4870  00F0  0831               	movf	___flmul@a+3,w
  4871  00F1  3980               	andlw	128
  4872  00F2  06B6               	xorwf	___flmul@sign,f
  4873  00F3  3531               	lslf	___flmul@a+3,w
  4874  00F4  00B7               	movwf	___flmul@aexp
  4875  00F5  1BB0               	btfsc	___flmul@a+2,7
  4876  00F6  1437               	bsf	___flmul@aexp,0
  4877  00F7  0837               	movf	___flmul@aexp,w
  4878  00F8  1903               	btfsc	3,2
  4879  00F9  2902               	goto	l705
  4880  00FA  0F37               	incfsz	___flmul@aexp,w
  4881  00FB  2900               	goto	l706
  4882  00FC  01AE               	clrf	___flmul@a
  4883  00FD  01AF               	clrf	___flmul@a+1
  4884  00FE  01B0               	clrf	___flmul@a+2
  4885  00FF  01B1               	clrf	___flmul@a+3
  4886  0100                     l706:	
  4887  0100  17B0               	bsf	___flmul@a+2,7
  4888  0101  2906               	goto	l3298
  4889  0102                     l705:	
  4890  0102  01AE               	clrf	___flmul@a
  4891  0103  01AF               	clrf	___flmul@a+1
  4892  0104  01B0               	clrf	___flmul@a+2
  4893  0105  01B1               	clrf	___flmul@a+3
  4894  0106                     l3298:	
  4895  0106  0837               	movf	___flmul@aexp,w
  4896  0107  1D03               	btfss	3,2
  4897  0108  0838               	movf	___flmul@bexp,w
  4898  0109  1D03               	btfss	3,2
  4899  010A  2910               	goto	l3302
  4900  010B  01AA               	clrf	?___flmul
  4901  010C  01AB               	clrf	?___flmul+1
  4902  010D  01AC               	clrf	?___flmul+2
  4903  010E  01AD               	clrf	?___flmul+3
  4904  010F  0008               	return
  4905  0110                     l3302:	
  4906  0110  082A               	movf	___flmul@b,w
  4907  0111  00A2               	movwf	__Umul8_16@multiplicand
  4908  0112  0830               	movf	___flmul@a+2,w
  4909  0113  225B  3180         	fcall	__Umul8_16
  4910  0115  0823               	movf	?__Umul8_16+1,w
  4911  0116  00C2               	movwf	___flmul@temp+1
  4912  0117  0822               	movf	?__Umul8_16,w
  4913  0118  00C1               	movwf	___flmul@temp
  4914  0119  00B9               	movwf	___flmul@grs
  4915  011A  01BA               	clrf	___flmul@grs+1
  4916  011B  01BB               	clrf	___flmul@grs+2
  4917  011C  01BC               	clrf	___flmul@grs+3
  4918  011D  0842               	movf	___flmul@temp+1,w
  4919  011E  00BD               	movwf	___flmul@prod
  4920  011F  01BE               	clrf	___flmul@prod+1
  4921  0120  01BF               	clrf	___flmul@prod+2
  4922  0121  01C0               	clrf	___flmul@prod+3
  4923  0122  082B               	movf	___flmul@b+1,w
  4924  0123  00A2               	movwf	__Umul8_16@multiplicand
  4925  0124  082F               	movf	___flmul@a+1,w
  4926  0125  225B  3180         	fcall	__Umul8_16
  4927  0127  0823               	movf	?__Umul8_16+1,w
  4928  0128  00C2               	movwf	___flmul@temp+1
  4929  0129  0822               	movf	?__Umul8_16,w
  4930  012A  00C1               	movwf	___flmul@temp
  4931  012B  07B9               	addwf	___flmul@grs,f
  4932  012C  3001               	movlw	1
  4933  012D  1803               	skipnc
  4934  012E  07BA               	addwf	___flmul@grs+1,f
  4935  012F  1803               	skipnc
  4936  0130  07BB               	addwf	___flmul@grs+2,f
  4937  0131  1803               	skipnc
  4938  0132  07BC               	addwf	___flmul@grs+3,f
  4939  0133  0842               	movf	___flmul@temp+1,w
  4940  0134  07BD               	addwf	___flmul@prod,f
  4941  0135  3001               	movlw	1
  4942  0136  1803               	skipnc
  4943  0137  07BE               	addwf	___flmul@prod+1,f
  4944  0138  1803               	skipnc
  4945  0139  07BF               	addwf	___flmul@prod+2,f
  4946  013A  1803               	skipnc
  4947  013B  07C0               	addwf	___flmul@prod+3,f
  4948  013C  082C               	movf	___flmul@b+2,w
  4949  013D  00A2               	movwf	__Umul8_16@multiplicand
  4950  013E  082E               	movf	___flmul@a,w
  4951  013F  225B  3180         	fcall	__Umul8_16
  4952  0141  0823               	movf	?__Umul8_16+1,w
  4953  0142  00C2               	movwf	___flmul@temp+1
  4954  0143  0822               	movf	?__Umul8_16,w
  4955  0144  00C1               	movwf	___flmul@temp
  4956  0145  07B9               	addwf	___flmul@grs,f
  4957  0146  3001               	movlw	1
  4958  0147  1803               	skipnc
  4959  0148  07BA               	addwf	___flmul@grs+1,f
  4960  0149  1803               	skipnc
  4961  014A  07BB               	addwf	___flmul@grs+2,f
  4962  014B  1803               	skipnc
  4963  014C  07BC               	addwf	___flmul@grs+3,f
  4964  014D  0842               	movf	___flmul@temp+1,w
  4965  014E  07BD               	addwf	___flmul@prod,f
  4966  014F  3001               	movlw	1
  4967  0150  1803               	skipnc
  4968  0151  07BE               	addwf	___flmul@prod+1,f
  4969  0152  1803               	skipnc
  4970  0153  07BF               	addwf	___flmul@prod+2,f
  4971  0154  1803               	skipnc
  4972  0155  07C0               	addwf	___flmul@prod+3,f
  4973  0156  083B               	movf	___flmul@grs+2,w
  4974  0157  00BC               	movwf	___flmul@grs+3
  4975  0158  083A               	movf	___flmul@grs+1,w
  4976  0159  00BB               	movwf	___flmul@grs+2
  4977  015A  0839               	movf	___flmul@grs,w
  4978  015B  00BA               	movwf	___flmul@grs+1
  4979  015C  01B9               	clrf	___flmul@grs
  4980  015D  082B               	movf	___flmul@b+1,w
  4981  015E  00A2               	movwf	__Umul8_16@multiplicand
  4982  015F  082E               	movf	___flmul@a,w
  4983  0160  225B  3180         	fcall	__Umul8_16
  4984  0162  0823               	movf	?__Umul8_16+1,w
  4985  0163  00C2               	movwf	___flmul@temp+1
  4986  0164  0822               	movf	?__Umul8_16,w
  4987  0165  00C1               	movwf	___flmul@temp
  4988  0166  07B9               	addwf	___flmul@grs,f
  4989  0167  0842               	movf	___flmul@temp+1,w
  4990  0168  3DBA               	addwfc	___flmul@grs+1,f
  4991  0169  3000               	movlw	0
  4992  016A  3DBB               	addwfc	___flmul@grs+2,f
  4993  016B  3DBC               	addwfc	___flmul@grs+3,f
  4994  016C  082A               	movf	___flmul@b,w
  4995  016D  00A2               	movwf	__Umul8_16@multiplicand
  4996  016E  082F               	movf	___flmul@a+1,w
  4997  016F  225B  3180         	fcall	__Umul8_16
  4998  0171  0823               	movf	?__Umul8_16+1,w
  4999  0172  00C2               	movwf	___flmul@temp+1
  5000  0173  0822               	movf	?__Umul8_16,w
  5001  0174  00C1               	movwf	___flmul@temp
  5002  0175  07B9               	addwf	___flmul@grs,f
  5003  0176  0842               	movf	___flmul@temp+1,w
  5004  0177  3DBA               	addwfc	___flmul@grs+1,f
  5005  0178  3000               	movlw	0
  5006  0179  3DBB               	addwfc	___flmul@grs+2,f
  5007  017A  3DBC               	addwfc	___flmul@grs+3,f
  5008  017B  083B               	movf	___flmul@grs+2,w
  5009  017C  00BC               	movwf	___flmul@grs+3
  5010  017D  083A               	movf	___flmul@grs+1,w
  5011  017E  00BB               	movwf	___flmul@grs+2
  5012  017F  0839               	movf	___flmul@grs,w
  5013  0180  00BA               	movwf	___flmul@grs+1
  5014  0181  01B9               	clrf	___flmul@grs
  5015  0182  082A               	movf	___flmul@b,w
  5016  0183  00A2               	movwf	__Umul8_16@multiplicand
  5017  0184  082E               	movf	___flmul@a,w
  5018  0185  225B  3180         	fcall	__Umul8_16
  5019  0187  0823               	movf	?__Umul8_16+1,w
  5020  0188  00C2               	movwf	___flmul@temp+1
  5021  0189  0822               	movf	?__Umul8_16,w
  5022  018A  00C1               	movwf	___flmul@temp
  5023  018B  07B9               	addwf	___flmul@grs,f
  5024  018C  0842               	movf	___flmul@temp+1,w
  5025  018D  3DBA               	addwfc	___flmul@grs+1,f
  5026  018E  3000               	movlw	0
  5027  018F  3DBB               	addwfc	___flmul@grs+2,f
  5028  0190  3DBC               	addwfc	___flmul@grs+3,f
  5029  0191  082B               	movf	___flmul@b+1,w
  5030  0192  00A2               	movwf	__Umul8_16@multiplicand
  5031  0193  0830               	movf	___flmul@a+2,w
  5032  0194  225B  3180         	fcall	__Umul8_16
  5033  0196  0823               	movf	?__Umul8_16+1,w
  5034  0197  00C2               	movwf	___flmul@temp+1
  5035  0198  0822               	movf	?__Umul8_16,w
  5036  0199  00C1               	movwf	___flmul@temp
  5037  019A  07BD               	addwf	___flmul@prod,f
  5038  019B  0842               	movf	___flmul@temp+1,w
  5039  019C  3DBE               	addwfc	___flmul@prod+1,f
  5040  019D  3000               	movlw	0
  5041  019E  3DBF               	addwfc	___flmul@prod+2,f
  5042  019F  3DC0               	addwfc	___flmul@prod+3,f
  5043  01A0  082C               	movf	___flmul@b+2,w
  5044  01A1  00A2               	movwf	__Umul8_16@multiplicand
  5045  01A2  082F               	movf	___flmul@a+1,w
  5046  01A3  225B  3180         	fcall	__Umul8_16
  5047  01A5  0823               	movf	?__Umul8_16+1,w
  5048  01A6  00C2               	movwf	___flmul@temp+1
  5049  01A7  0822               	movf	?__Umul8_16,w
  5050  01A8  00C1               	movwf	___flmul@temp
  5051  01A9  07BD               	addwf	___flmul@prod,f
  5052  01AA  0842               	movf	___flmul@temp+1,w
  5053  01AB  3DBE               	addwfc	___flmul@prod+1,f
  5054  01AC  3000               	movlw	0
  5055  01AD  3DBF               	addwfc	___flmul@prod+2,f
  5056  01AE  3DC0               	addwfc	___flmul@prod+3,f
  5057  01AF  082C               	movf	___flmul@b+2,w
  5058  01B0  00A2               	movwf	__Umul8_16@multiplicand
  5059  01B1  0830               	movf	___flmul@a+2,w
  5060  01B2  225B  3180         	fcall	__Umul8_16
  5061  01B4  0823               	movf	?__Umul8_16+1,w
  5062  01B5  00C2               	movwf	___flmul@temp+1
  5063  01B6  0822               	movf	?__Umul8_16,w
  5064  01B7  00C1               	movwf	___flmul@temp
  5065  01B8  00B2               	movwf	??___flmul
  5066  01B9  0842               	movf	___flmul@temp+1,w
  5067  01BA  00B3               	movwf	??___flmul+1
  5068  01BB  01B4               	clrf	??___flmul+2
  5069  01BC  01B5               	clrf	??___flmul+3
  5070  01BD  0834               	movf	??___flmul+2,w
  5071  01BE  00B5               	movwf	??___flmul+3
  5072  01BF  0833               	movf	??___flmul+1,w
  5073  01C0  00B4               	movwf	??___flmul+2
  5074  01C1  0832               	movf	??___flmul,w
  5075  01C2  00B3               	movwf	??___flmul+1
  5076  01C3  01B2               	clrf	??___flmul
  5077  01C4  0832               	movf	??___flmul,w
  5078  01C5  07BD               	addwf	___flmul@prod,f
  5079  01C6  0833               	movf	??___flmul+1,w
  5080  01C7  3DBE               	addwfc	___flmul@prod+1,f
  5081  01C8  0834               	movf	??___flmul+2,w
  5082  01C9  3DBF               	addwfc	___flmul@prod+2,f
  5083  01CA  0835               	movf	??___flmul+3,w
  5084  01CB  3DC0               	addwfc	___flmul@prod+3,f
  5085  01CC  083C               	movf	___flmul@grs+3,w
  5086  01CD  07BD               	addwf	___flmul@prod,f
  5087  01CE  3001               	movlw	1
  5088  01CF  1803               	skipnc
  5089  01D0  07BE               	addwf	___flmul@prod+1,f
  5090  01D1  1803               	skipnc
  5091  01D2  07BF               	addwf	___flmul@prod+2,f
  5092  01D3  1803               	skipnc
  5093  01D4  07C0               	addwf	___flmul@prod+3,f
  5094  01D5  083B               	movf	___flmul@grs+2,w
  5095  01D6  00BC               	movwf	___flmul@grs+3
  5096  01D7  083A               	movf	___flmul@grs+1,w
  5097  01D8  00BB               	movwf	___flmul@grs+2
  5098  01D9  0839               	movf	___flmul@grs,w
  5099  01DA  00BA               	movwf	___flmul@grs+1
  5100  01DB  01B9               	clrf	___flmul@grs
  5101  01DC  0838               	movf	___flmul@bexp,w
  5102  01DD  00C1               	movwf	___flmul@temp
  5103  01DE  01C2               	clrf	___flmul@temp+1
  5104  01DF  0837               	movf	___flmul@aexp,w
  5105  01E0  07C1               	addwf	___flmul@temp,f
  5106  01E1  1803               	skipnc
  5107  01E2  0AC2               	incf	___flmul@temp+1,f
  5108  01E3  3082               	movlw	-126
  5109  01E4                     L5:	
  5110  01E4  07C1               	addwf	___flmul@temp,f
  5111  01E5  1C03               	skipc
  5112  01E6  03C2               	decf	___flmul@temp+1,f
  5113  01E7  1BBF               	btfsc	___flmul@prod+2,7
  5114  01E8  29F5               	goto	l3350
  5115  01E9  35BD               	lslf	___flmul@prod,f
  5116  01EA  0DBE               	rlf	___flmul@prod+1,f
  5117  01EB  0DBF               	rlf	___flmul@prod+2,f
  5118  01EC  0DC0               	rlf	___flmul@prod+3,f
  5119  01ED  1BBC               	btfsc	___flmul@grs+3,7
  5120  01EE  143D               	bsf	___flmul@prod,0
  5121  01EF  30FF               	movlw	-1
  5122  01F0  35B9               	lslf	___flmul@grs,f
  5123  01F1  0DBA               	rlf	___flmul@grs+1,f
  5124  01F2  0DBB               	rlf	___flmul@grs+2,f
  5125  01F3  0DBC               	rlf	___flmul@grs+3,f
  5126  01F4  29E4               	goto	L5
  5127  01F5                     l3350:	
  5128  01F5  01B7               	clrf	___flmul@aexp
  5129  01F6  1FBC               	btfss	___flmul@grs+3,7
  5130  01F7  2A0A               	goto	l3360
  5131  01F8  0839               	movf	___flmul@grs,w
  5132  01F9  00B2               	movwf	??___flmul
  5133  01FA  083A               	movf	___flmul@grs+1,w
  5134  01FB  00B3               	movwf	??___flmul+1
  5135  01FC  083B               	movf	___flmul@grs+2,w
  5136  01FD  00B4               	movwf	??___flmul+2
  5137  01FE  307F               	movlw	127
  5138  01FF  053C               	andwf	___flmul@grs+3,w
  5139  0200  00B5               	movwf	??___flmul+3
  5140  0201  0434               	iorwf	??___flmul+2,w
  5141  0202  0433               	iorwf	??___flmul+1,w
  5142  0203  0432               	iorwf	??___flmul,w
  5143  0204  1903               	skipnz
  5144  0205  183D               	btfsc	___flmul@prod,0
  5145  0206  2A08               	goto	l3356
  5146  0207  2A0A               	goto	l3360
  5147  0208                     l3356:	
  5148  0208  01B7               	clrf	___flmul@aexp
  5149  0209  0AB7               	incf	___flmul@aexp,f
  5150  020A                     l3360:	
  5151  020A  0837               	movf	___flmul@aexp,w
  5152  020B  1903               	btfsc	3,2
  5153  020C  2A1C               	goto	l3370
  5154  020D  3001               	movlw	1
  5155  020E  07BD               	addwf	___flmul@prod,f
  5156  020F  3000               	movlw	0
  5157  0210  3DBE               	addwfc	___flmul@prod+1,f
  5158  0211  3DBF               	addwfc	___flmul@prod+2,f
  5159  0212  3DC0               	addwfc	___flmul@prod+3,f
  5160  0213  1C40               	btfss	___flmul@prod+3,0
  5161  0214  2A1C               	goto	l3370
  5162  0215  37C0               	asrf	___flmul@prod+3,f
  5163  0216  0CBF               	rrf	___flmul@prod+2,f
  5164  0217  0CBE               	rrf	___flmul@prod+1,f
  5165  0218  0CBD               	rrf	___flmul@prod,f
  5166  0219  0AC1               	incf	___flmul@temp,f
  5167  021A  1903               	skipnz
  5168  021B  0AC2               	incf	___flmul@temp+1,f
  5169  021C                     l3370:	
  5170  021C  0842               	movf	___flmul@temp+1,w
  5171  021D  3A80               	xorlw	128
  5172  021E  00B2               	movwf	??___flmul
  5173  021F  3080               	movlw	128
  5174  0220  0232               	subwf	??___flmul,w
  5175  0221  1D03               	skipz
  5176  0222  2A25               	goto	u3945
  5177  0223  30FF               	movlw	255
  5178  0224  0241               	subwf	___flmul@temp,w
  5179  0225                     u3945:	
  5180  0225  1C03               	skipc
  5181  0226  2A2F               	goto	l3374
  5182  0227  307F               	movlw	127
  5183  0228  0020               	movlb	0	; select bank0
  5184  0229  00C0               	movwf	___flmul@prod+3
  5185  022A  3080               	movlw	128
  5186  022B  00BF               	movwf	___flmul@prod+2
  5187  022C  01BE               	clrf	___flmul@prod+1
  5188  022D  01BD               	clrf	___flmul@prod
  5189  022E  2A50               	goto	l723
  5190  022F                     l3374:	
  5191  022F  0020               	movlb	0	; select bank0
  5192  0230  0842               	movf	___flmul@temp+1,w
  5193  0231  3A80               	xorlw	128
  5194  0232  00B2               	movwf	??___flmul
  5195  0233  3080               	movlw	128
  5196  0234  0232               	subwf	??___flmul,w
  5197  0235  1D03               	skipz
  5198  0236  2A39               	goto	u3955
  5199  0237  3001               	movlw	1
  5200  0238  0241               	subwf	___flmul@temp,w
  5201  0239                     u3955:	
  5202  0239  1803               	skipnc
  5203  023A  2A42               	goto	l3380
  5204  023B  0020               	movlb	0	; select bank0
  5205  023C  01BD               	clrf	___flmul@prod
  5206  023D  01BE               	clrf	___flmul@prod+1
  5207  023E  01BF               	clrf	___flmul@prod+2
  5208  023F  01C0               	clrf	___flmul@prod+3
  5209  0240  01B6               	clrf	___flmul@sign
  5210  0241  2A50               	goto	l723
  5211  0242                     l3380:	
  5212  0242  0020               	movlb	0	; select bank0
  5213  0243  0841               	movf	___flmul@temp,w
  5214  0244  00B8               	movwf	___flmul@bexp
  5215  0245  30FF               	movlw	255
  5216  0246  05BD               	andwf	___flmul@prod,f
  5217  0247  05BE               	andwf	___flmul@prod+1,f
  5218  0248  307F               	movlw	127
  5219  0249  05BF               	andwf	___flmul@prod+2,f
  5220  024A  3000               	movlw	0
  5221  024B  01C0               	clrf	___flmul@prod+3
  5222  024C  1838               	btfsc	___flmul@bexp,0
  5223  024D  17BF               	bsf	___flmul@prod+2,7
  5224  024E  3638               	lsrf	___flmul@bexp,w
  5225  024F  00C0               	movwf	___flmul@prod+3
  5226  0250                     l723:	
  5227  0250  0836               	movf	___flmul@sign,w
  5228  0251  04C0               	iorwf	___flmul@prod+3,f
  5229  0252  0840               	movf	___flmul@prod+3,w
  5230  0253  00AD               	movwf	?___flmul+3
  5231  0254  083F               	movf	___flmul@prod+2,w
  5232  0255  00AC               	movwf	?___flmul+2
  5233  0256  083E               	movf	___flmul@prod+1,w
  5234  0257  00AB               	movwf	?___flmul+1
  5235  0258  083D               	movf	___flmul@prod,w
  5236  0259  00AA               	movwf	?___flmul
  5237  025A  0008               	return
  5238  025B                     __end_of___flmul:	
  5239  025B                     __ptext16:	
  5240 ;; *************** function __Umul8_16 *****************
  5241 ;; Defined at:
  5242 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8_16.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  multiplier      1    wreg     unsigned char 
  5245 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5248 ;;  word_mpld       2    8[BANK0 ] unsigned int 
  5249 ;;  product         2    5[BANK0 ] unsigned int 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  2    2[BANK0 ] unsigned int 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0
  5254 ;; Tracked objects:
  5255 ;;		On entry : 1F/0
  5256 ;;		On exit  : 1F/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5259 ;;      Params:         0       3       0       0
  5260 ;;      Locals:         0       5       0       0
  5261 ;;      Temps:          0       0       0       0
  5262 ;;      Totals:         0       8       0       0
  5263 ;;Total ram usage:        8 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    2
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		___flmul
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function __Umul8_16
  5275  025B                     __Umul8_16:	
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5279                           ;__Umul8_16@multiplier stored from wreg
  5280  025B  00A7               	movwf	__Umul8_16@multiplier
  5281  025C  01A5               	clrf	__Umul8_16@product
  5282  025D  01A6               	clrf	__Umul8_16@product+1
  5283  025E  0822               	movf	__Umul8_16@multiplicand,w
  5284  025F  00A8               	movwf	__Umul8_16@word_mpld
  5285  0260  01A9               	clrf	__Umul8_16@word_mpld+1
  5286  0261  1C27               	btfss	__Umul8_16@multiplier,0
  5287  0262  2A67               	goto	l3150
  5288  0263  0828               	movf	__Umul8_16@word_mpld,w
  5289  0264  07A5               	addwf	__Umul8_16@product,f
  5290  0265  0829               	movf	__Umul8_16@word_mpld+1,w
  5291  0266  3DA6               	addwfc	__Umul8_16@product+1,f
  5292  0267                     l3150:	
  5293  0267  35A8               	lslf	__Umul8_16@word_mpld,f
  5294  0268  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5295  0269  1CA7               	btfss	__Umul8_16@multiplier,1
  5296  026A  2A6F               	goto	l3156
  5297  026B  0828               	movf	__Umul8_16@word_mpld,w
  5298  026C  07A5               	addwf	__Umul8_16@product,f
  5299  026D  0829               	movf	__Umul8_16@word_mpld+1,w
  5300  026E  3DA6               	addwfc	__Umul8_16@product+1,f
  5301  026F                     l3156:	
  5302  026F  35A8               	lslf	__Umul8_16@word_mpld,f
  5303  0270  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5304  0271  1D27               	btfss	__Umul8_16@multiplier,2
  5305  0272  2A77               	goto	l3162
  5306  0273  0828               	movf	__Umul8_16@word_mpld,w
  5307  0274  07A5               	addwf	__Umul8_16@product,f
  5308  0275  0829               	movf	__Umul8_16@word_mpld+1,w
  5309  0276  3DA6               	addwfc	__Umul8_16@product+1,f
  5310  0277                     l3162:	
  5311  0277  35A8               	lslf	__Umul8_16@word_mpld,f
  5312  0278  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5313  0279  1DA7               	btfss	__Umul8_16@multiplier,3
  5314  027A  2A7F               	goto	l3168
  5315  027B  0828               	movf	__Umul8_16@word_mpld,w
  5316  027C  07A5               	addwf	__Umul8_16@product,f
  5317  027D  0829               	movf	__Umul8_16@word_mpld+1,w
  5318  027E  3DA6               	addwfc	__Umul8_16@product+1,f
  5319  027F                     l3168:	
  5320  027F  35A8               	lslf	__Umul8_16@word_mpld,f
  5321  0280  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5322  0281  1E27               	btfss	__Umul8_16@multiplier,4
  5323  0282  2A87               	goto	l3174
  5324  0283  0828               	movf	__Umul8_16@word_mpld,w
  5325  0284  07A5               	addwf	__Umul8_16@product,f
  5326  0285  0829               	movf	__Umul8_16@word_mpld+1,w
  5327  0286  3DA6               	addwfc	__Umul8_16@product+1,f
  5328  0287                     l3174:	
  5329  0287  35A8               	lslf	__Umul8_16@word_mpld,f
  5330  0288  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5331  0289  1EA7               	btfss	__Umul8_16@multiplier,5
  5332  028A  2A8F               	goto	l3180
  5333  028B  0828               	movf	__Umul8_16@word_mpld,w
  5334  028C  07A5               	addwf	__Umul8_16@product,f
  5335  028D  0829               	movf	__Umul8_16@word_mpld+1,w
  5336  028E  3DA6               	addwfc	__Umul8_16@product+1,f
  5337  028F                     l3180:	
  5338  028F  35A8               	lslf	__Umul8_16@word_mpld,f
  5339  0290  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5340  0291  1F27               	btfss	__Umul8_16@multiplier,6
  5341  0292  2A97               	goto	l3186
  5342  0293  0828               	movf	__Umul8_16@word_mpld,w
  5343  0294  07A5               	addwf	__Umul8_16@product,f
  5344  0295  0829               	movf	__Umul8_16@word_mpld+1,w
  5345  0296  3DA6               	addwfc	__Umul8_16@product+1,f
  5346  0297                     l3186:	
  5347  0297  35A8               	lslf	__Umul8_16@word_mpld,f
  5348  0298  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5349  0299  1FA7               	btfss	__Umul8_16@multiplier,7
  5350  029A  2A9F               	goto	l759
  5351  029B  0828               	movf	__Umul8_16@word_mpld,w
  5352  029C  07A5               	addwf	__Umul8_16@product,f
  5353  029D  0829               	movf	__Umul8_16@word_mpld+1,w
  5354  029E  3DA6               	addwfc	__Umul8_16@product+1,f
  5355  029F                     l759:	
  5356  029F  0826               	movf	__Umul8_16@product+1,w
  5357  02A0  00A3               	movwf	?__Umul8_16+1
  5358  02A1  0825               	movf	__Umul8_16@product,w
  5359  02A2  00A2               	movwf	?__Umul8_16
  5360  02A3  0008               	return
  5361  02A4                     __end_of__Umul8_16:	
  5362                           
  5363                           	psect	text17
  5364  04C6                     __ptext17:	
  5365 ;; *************** function ___flge *****************
  5366 ;; Defined at:
  5367 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\flge.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;  ff1             4   20[BANK0 ] unsigned int 
  5370 ;;  ff2             4   24[BANK0 ] unsigned int 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;		None               void
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0
  5377 ;; Tracked objects:
  5378 ;;		On entry : 1F/0
  5379 ;;		On exit  : 1F/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5382 ;;      Params:         0       8       0       0
  5383 ;;      Locals:         0       0       0       0
  5384 ;;      Temps:          0       4       0       0
  5385 ;;      Totals:         0      12       0       0
  5386 ;;Total ram usage:       12 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    2
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_calculate_pidA
  5393 ;;		_calculate_pidM
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function ___flge
  5399  04C6                     ___flge:	
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5403  04C6  3080               	movlw	128
  5404  04C7  01BC               	clrf	??___flge
  5405  04C8  01BD               	clrf	??___flge+1
  5406  04C9  0536               	andwf	___flge@ff1+2,w
  5407  04CA  00BE               	movwf	??___flge+2
  5408  04CB  307F               	movlw	127
  5409  04CC  0537               	andwf	___flge@ff1+3,w
  5410  04CD  00BF               	movwf	??___flge+3
  5411  04CE  043E               	iorwf	??___flge+2,w
  5412  04CF  043D               	iorwf	??___flge+1,w
  5413  04D0  043C               	iorwf	??___flge,w
  5414  04D1  1D03               	skipz
  5415  04D2  2CD7               	goto	l3214
  5416  04D3  01B4               	clrf	___flge@ff1
  5417  04D4  01B5               	clrf	___flge@ff1+1
  5418  04D5  01B6               	clrf	___flge@ff1+2
  5419  04D6  01B7               	clrf	___flge@ff1+3
  5420  04D7                     l3214:	
  5421  04D7  3080               	movlw	128
  5422  04D8  01BC               	clrf	??___flge
  5423  04D9  01BD               	clrf	??___flge+1
  5424  04DA  053A               	andwf	___flge@ff2+2,w
  5425  04DB  00BE               	movwf	??___flge+2
  5426  04DC  307F               	movlw	127
  5427  04DD  053B               	andwf	___flge@ff2+3,w
  5428  04DE  00BF               	movwf	??___flge+3
  5429  04DF  043E               	iorwf	??___flge+2,w
  5430  04E0  043D               	iorwf	??___flge+1,w
  5431  04E1  043C               	iorwf	??___flge,w
  5432  04E2  1D03               	skipz
  5433  04E3  2CE8               	goto	l497
  5434  04E4  01B8               	clrf	___flge@ff2
  5435  04E5  01B9               	clrf	___flge@ff2+1
  5436  04E6  01BA               	clrf	___flge@ff2+2
  5437  04E7  01BB               	clrf	___flge@ff2+3
  5438  04E8                     l497:	
  5439  04E8  1FB7               	btfss	___flge@ff1+3,7
  5440  04E9  2CFF               	goto	l3220
  5441  04EA  3080               	movlw	128
  5442  04EB  01BC               	clrf	??___flge
  5443  04EC  01BD               	clrf	??___flge+1
  5444  04ED  01BE               	clrf	??___flge+2
  5445  04EE  00BF               	movwf	??___flge+3
  5446  04EF  0834               	movf	___flge@ff1,w
  5447  04F0  02BC               	subwf	??___flge,f
  5448  04F1  0835               	movf	___flge@ff1+1,w
  5449  04F2  3BBD               	subwfb	??___flge+1,f
  5450  04F3  0836               	movf	___flge@ff1+2,w
  5451  04F4  3BBE               	subwfb	??___flge+2,f
  5452  04F5  0837               	movf	___flge@ff1+3,w
  5453  04F6  3BBF               	subwfb	??___flge+3,f
  5454  04F7  083F               	movf	??___flge+3,w
  5455  04F8  00B7               	movwf	___flge@ff1+3
  5456  04F9  083E               	movf	??___flge+2,w
  5457  04FA  00B6               	movwf	___flge@ff1+2
  5458  04FB  083D               	movf	??___flge+1,w
  5459  04FC  00B5               	movwf	___flge@ff1+1
  5460  04FD  083C               	movf	??___flge,w
  5461  04FE  00B4               	movwf	___flge@ff1
  5462  04FF                     l3220:	
  5463  04FF  1FBB               	btfss	___flge@ff2+3,7
  5464  0500  2D16               	goto	l499
  5465  0501  3080               	movlw	128
  5466  0502  01BC               	clrf	??___flge
  5467  0503  01BD               	clrf	??___flge+1
  5468  0504  01BE               	clrf	??___flge+2
  5469  0505  00BF               	movwf	??___flge+3
  5470  0506  0838               	movf	___flge@ff2,w
  5471  0507  02BC               	subwf	??___flge,f
  5472  0508  0839               	movf	___flge@ff2+1,w
  5473  0509  3BBD               	subwfb	??___flge+1,f
  5474  050A  083A               	movf	___flge@ff2+2,w
  5475  050B  3BBE               	subwfb	??___flge+2,f
  5476  050C  083B               	movf	___flge@ff2+3,w
  5477  050D  3BBF               	subwfb	??___flge+3,f
  5478  050E  083F               	movf	??___flge+3,w
  5479  050F  00BB               	movwf	___flge@ff2+3
  5480  0510  083E               	movf	??___flge+2,w
  5481  0511  00BA               	movwf	___flge@ff2+2
  5482  0512  083D               	movf	??___flge+1,w
  5483  0513  00B9               	movwf	___flge@ff2+1
  5484  0514  083C               	movf	??___flge,w
  5485  0515  00B8               	movwf	___flge@ff2
  5486  0516                     l499:	
  5487  0516  3080               	movlw	128
  5488  0517  06B7               	xorwf	___flge@ff1+3,f
  5489  0518  06BB               	xorwf	___flge@ff2+3,f
  5490  0519  083B               	movf	___flge@ff2+3,w
  5491  051A  0237               	subwf	___flge@ff1+3,w
  5492  051B  1D03               	skipz
  5493  051C  0008               	return
  5494  051D  083A               	movf	___flge@ff2+2,w
  5495  051E  0236               	subwf	___flge@ff1+2,w
  5496  051F  1D03               	skipz
  5497  0520  0008               	return
  5498  0521  0839               	movf	___flge@ff2+1,w
  5499  0522  0235               	subwf	___flge@ff1+1,w
  5500  0523  1D03               	skipz
  5501  0524  0008               	return
  5502  0525  0838               	movf	___flge@ff2,w
  5503  0526  0234               	subwf	___flge@ff1,w
  5504  0527  0008               	return
  5505  0528                     __end_of___flge:	
  5506                           
  5507                           	psect	text18
  5508  05E8                     __ptext18:	
  5509 ;; *************** function _PWM_Init *****************
  5510 ;; Defined at:
  5511 ;;		line 185 in file "main.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;		None
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;		None
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  2  121[None  ] int 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2
  5520 ;; Tracked objects:
  5521 ;;		On entry : 1F/1
  5522 ;;		On exit  : 1F/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5525 ;;      Params:         0       0       0       0
  5526 ;;      Locals:         0       0       0       0
  5527 ;;      Temps:          0       0       0       0
  5528 ;;      Totals:         0       0       0       0
  5529 ;;Total ram usage:        0 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    2
  5532 ;; This function calls:
  5533 ;;		Nothing
  5534 ;; This function is called by:
  5535 ;;		_main
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           
  5540                           ;psect for function _PWM_Init
  5541  05E8                     _PWM_Init:	
  5542                           
  5543                           ;main.c: 206: PR2 = 0xFF;
  5544                           
  5545                           ;incstack = 0
  5546                           ; Regs used in _PWM_Init: [wreg+status,2]
  5547  05E8  30FF               	movlw	255
  5548  05E9  0020               	movlb	0	; select bank0
  5549  05EA  009B               	movwf	27	;volatile
  5550                           
  5551                           ;main.c: 207: CCP1CON = 0b00001100;
  5552  05EB  300C               	movlw	12
  5553  05EC  0025               	movlb	5	; select bank5
  5554  05ED  0093               	movwf	19	;volatile
  5555                           
  5556                           ;main.c: 208: CCPR1L = 0b00000000;
  5557  05EE  0191               	clrf	17	;volatile
  5558                           
  5559                           ;main.c: 209: PIR1bits.TMR2IF = 0;
  5560  05EF  0020               	movlb	0	; select bank0
  5561  05F0  1091               	bcf	17,1	;volatile
  5562                           
  5563                           ;main.c: 210: T2CON = 0b00000100;
  5564  05F1  3004               	movlw	4
  5565  05F2  009C               	movwf	28	;volatile
  5566  05F3  0008               	return
  5567  05F4                     __end_of_PWM_Init:	
  5568                           
  5569                           	psect	intentry
  5570  0004                     __pintentry:	
  5571 ;; *************** function _isr *****************
  5572 ;; Defined at:
  5573 ;;		line 90 in file "main.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 1F/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5587 ;;      Params:         0       0       0       0
  5588 ;;      Locals:         0       0       0       0
  5589 ;;      Temps:          0       2       0       0
  5590 ;;      Totals:         0       2       0       0
  5591 ;;Total ram usage:        2 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    1
  5594 ;; This function calls:
  5595 ;;		___lwdiv
  5596 ;;		i1___wmul
  5597 ;; This function is called by:
  5598 ;;		Interrupt level 1
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602  0004                     _isr:	
  5603                           
  5604                           ;incstack = 0
  5605  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5606                           
  5607                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5608  0005  3180               	pagesel	$
  5609                           
  5610                           ;main.c: 92: if (INTCONbits.IOCIF == 1 && IOCAFbits.IOCAF4 == 1)
  5611  0006  1C0B               	btfss	11,0	;volatile
  5612  0007  2821               	goto	i1l2614
  5613  0008  0027               	movlb	7	; select bank7
  5614  0009  1E13               	btfss	19,4	;volatile
  5615  000A  2821               	goto	i1l2614
  5616                           
  5617                           ;main.c: 93: {;main.c: 94: INTCONbits.IOCIE = 0;
  5618  000B  118B               	bcf	11,3	;volatile
  5619                           
  5620                           ;main.c: 95: counter++;
  5621  000C  0021               	movlb	1	; select bank1
  5622  000D  0AD1               	incf	_counter^(0+128),f
  5623  000E  1903               	skipnz
  5624  000F  0AD2               	incf	(_counter+1)^(0+128),f
  5625                           
  5626                           ;main.c: 96: if (LATAbits.LATA0 == 0) {
  5627  0010  0022               	movlb	2	; select bank2
  5628  0011  180C               	btfsc	12,0	;volatile
  5629  0012  2817               	goto	i1l2608
  5630                           
  5631                           ;main.c: 97: I2C_buffer.data.DISTANCE--;
  5632  0013  30FF               	movlw	255
  5633  0014  0021               	movlb	1	; select bank1
  5634  0015  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5635  0016  281B               	goto	L7
  5636  0017                     i1l2608:	
  5637                           ;main.c: 98: } else {
  5638                           
  5639                           
  5640                           ;main.c: 99: I2C_buffer.data.DISTANCE++;
  5641  0017  3001               	movlw	1
  5642  0018  0021               	movlb	1	; select bank1
  5643  0019  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5644  001A  3000               	movlw	0
  5645  001B                     L7:	
  5646  001B  3DB0               	addwfc	((_I2C_buffer+1)^(0+128)+15),f	;volatile
  5647  001C  3DB1               	addwfc	((_I2C_buffer+2)^(0+128)+15),f	;volatile
  5648  001D  3DB2               	addwfc	((_I2C_buffer+3)^(0+128)+15),f	;volatile
  5649                           
  5650                           ;main.c: 100: };main.c: 101: IOCAFbits.IOCAF4 = 0;
  5651  001E  0027               	movlb	7	; select bank7
  5652  001F  1213               	bcf	19,4	;volatile
  5653                           
  5654                           ;main.c: 102: INTCONbits.IOCIE = 1;
  5655  0020  158B               	bsf	11,3	;volatile
  5656  0021                     i1l2614:	
  5657                           
  5658                           ;main.c: 103: };main.c: 105: if (PIR1bits.TMR1IF == 1)
  5659  0021  0020               	movlb	0	; select bank0
  5660  0022  1C11               	btfss	17,0	;volatile
  5661  0023  285C               	goto	i1l2632
  5662                           
  5663                           ;main.c: 106: {;main.c: 107: INTCONbits.IOCIE = 0;
  5664  0024  118B               	bcf	11,3	;volatile
  5665                           
  5666                           ;main.c: 108: T1CONbits.TMR1ON = 0;
  5667  0025  1018               	bcf	24,0	;volatile
  5668                           
  5669                           ;main.c: 109: I2C_buffer.data.RPM = (counter * 300) / I2C_buffer.data.GEAR_RATIO;
  5670  0026  0021               	movlb	1	; select bank1
  5671  0027  0828               	movf	((_I2C_buffer+1)^(0+128)+7),w	;volatile
  5672  0028  00F7               	movwf	___lwdiv@divisor+1
  5673  0029  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  5674  002A  00F6               	movwf	___lwdiv@divisor
  5675  002B  0852               	movf	(_counter+1)^(0+128),w
  5676  002C  00F1               	movwf	i1___wmul@multiplier+1
  5677  002D  0851               	movf	_counter^(0+128),w
  5678  002E  00F0               	movwf	i1___wmul@multiplier
  5679  002F  302C               	movlw	44
  5680  0030  00F2               	movwf	i1___wmul@multiplicand
  5681  0031  3001               	movlw	1
  5682  0032  00F3               	movwf	i1___wmul@multiplicand+1
  5683  0033  3185  25B5  3180   	fcall	i1___wmul
  5684  0036  0871               	movf	?i1___wmul+1,w
  5685  0037  00F9               	movwf	___lwdiv@dividend+1
  5686  0038  0870               	movf	?i1___wmul,w
  5687  0039  00F8               	movwf	___lwdiv@dividend
  5688  003A  3185  257B  3180   	fcall	___lwdiv
  5689  003D  0877               	movf	?___lwdiv+1,w
  5690  003E  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5691  003F  0876               	movf	?___lwdiv,w
  5692  0040  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5693                           
  5694                           ;main.c: 110: counter = 0;
  5695  0041  01D1               	clrf	_counter^(0+128)
  5696  0042  01D2               	clrf	(_counter+1)^(0+128)
  5697                           
  5698                           ;main.c: 111: if (LATAbits.LATA0 == 0) {
  5699  0043  0022               	movlb	2	; select bank2
  5700  0044  180C               	btfsc	12,0	;volatile
  5701  0045  2858               	goto	i1l2626
  5702                           
  5703                           ;main.c: 112: I2C_buffer.data.RPM = I2C_buffer.data.RPM *-1;
  5704  0046  0021               	movlb	1	; select bank1
  5705  0047  092B               	comf	(_I2C_buffer^(0+128)+11),w	;volatile
  5706  0048  0020               	movlb	0	; select bank0
  5707  0049  00A0               	movwf	??_isr
  5708  004A  0021               	movlb	1	; select bank1
  5709  004B  092C               	comf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  5710  004C  0020               	movlb	0	; select bank0
  5711  004D  00A1               	movwf	??_isr+1
  5712  004E  0AA0               	incf	??_isr,f
  5713  004F  1903               	skipnz
  5714  0050  0AA1               	incf	??_isr+1,f
  5715  0051  0820               	movf	??_isr,w
  5716  0052  0021               	movlb	1	; select bank1
  5717  0053  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5718  0054  0020               	movlb	0	; select bank0
  5719  0055  0821               	movf	??_isr+1,w
  5720  0056  0021               	movlb	1	; select bank1
  5721  0057  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5722  0058                     i1l2626:	
  5723                           
  5724                           ;main.c: 113: };main.c: 114: INTCONbits.IOCIE = 1;
  5725  0058  158B               	bsf	11,3	;volatile
  5726                           
  5727                           ;main.c: 115: PIR1bits.TMR1IF = 0;
  5728  0059  0020               	movlb	0	; select bank0
  5729  005A  1011               	bcf	17,0	;volatile
  5730                           
  5731                           ;main.c: 116: T1CONbits.TMR1ON = 1;
  5732  005B  1418               	bsf	24,0	;volatile
  5733  005C                     i1l2632:	
  5734                           
  5735                           ;main.c: 117: };main.c: 119: static unsigned char junk = 0;;main.c: 121: if (PIR1bits.SS
      +                          P1IF)
  5736  005C  1D91               	btfss	17,3	;volatile
  5737  005D  28B1               	goto	i1l2692
  5738                           
  5739                           ;main.c: 122: {;main.c: 123: INTCONbits.IOCIE = 0;
  5740  005E  118B               	bcf	11,3	;volatile
  5741                           
  5742                           ;main.c: 124: PIE1bits.TMR1IE = 0;
  5743  005F  0021               	movlb	1	; select bank1
  5744  0060  1011               	bcf	17,0	;volatile
  5745                           
  5746                           ;main.c: 125: if (SSP1STATbits.R_nW)
  5747  0061  0024               	movlb	4	; select bank4
  5748  0062  1D14               	btfss	20,2	;volatile
  5749  0063  2880               	goto	i1l2652
  5750                           
  5751                           ;main.c: 126: {;main.c: 127: if (!SSP1STATbits.D_nA)
  5752  0064  1A94               	btfsc	20,5	;volatile
  5753  0065  2872               	goto	i1l2644
  5754                           
  5755                           ;main.c: 128: {;main.c: 129: SSP1BUF = I2C_buffer.byte[index_i2c++];
  5756  0066  0021               	movlb	1	; select bank1
  5757  0067  0853               	movf	_index_i2c^(0+128),w
  5758  0068  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5759  0069  0086               	movwf	6
  5760  006A  0187               	clrf	7
  5761  006B  0801               	movf	1,w
  5762  006C  0024               	movlb	4	; select bank4
  5763  006D  0091               	movwf	17	;volatile
  5764  006E  0021               	movlb	1	; select bank1
  5765  006F  0AD3               	incf	_index_i2c^(0+128),f
  5766                           
  5767                           ;main.c: 130: SSP1CON1bits.CKP = 1;
  5768  0070  0024               	movlb	4	; select bank4
  5769  0071  1615               	bsf	21,4	;volatile
  5770  0072                     i1l2644:	
  5771                           
  5772                           ;main.c: 131: };main.c: 132: if (SSP1STATbits.D_nA)
  5773  0072  1E94               	btfss	20,5	;volatile
  5774  0073  2880               	goto	i1l2652
  5775                           
  5776                           ;main.c: 133: {;main.c: 134: SSP1BUF = I2C_buffer.byte[index_i2c++];
  5777  0074  0021               	movlb	1	; select bank1
  5778  0075  0853               	movf	_index_i2c^(0+128),w
  5779  0076  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5780  0077  0086               	movwf	6
  5781  0078  0187               	clrf	7
  5782  0079  0801               	movf	1,w
  5783  007A  0024               	movlb	4	; select bank4
  5784  007B  0091               	movwf	17	;volatile
  5785  007C  0021               	movlb	1	; select bank1
  5786  007D  0AD3               	incf	_index_i2c^(0+128),f
  5787                           
  5788                           ;main.c: 135: SSP1CON1bits.CKP = 1;
  5789  007E  0024               	movlb	4	; select bank4
  5790  007F  1615               	bsf	21,4	;volatile
  5791  0080                     i1l2652:	
  5792                           
  5793                           ;main.c: 136: };main.c: 137: };main.c: 138: if (!SSP1STATbits.R_nW)
  5794  0080  1914               	btfsc	20,2	;volatile
  5795  0081  28AC               	goto	i1l2686
  5796                           
  5797                           ;main.c: 139: {;main.c: 140: if (!SSP1STATbits.D_nA)
  5798  0082  1A94               	btfsc	20,5	;volatile
  5799  0083  288A               	goto	i1l2662
  5800                           
  5801                           ;main.c: 141: {;main.c: 142: first_i2c = 1;
  5802  0084  0021               	movlb	1	; select bank1
  5803  0085  01EC               	clrf	_first_i2c^(0+128)
  5804  0086  0AEC               	incf	_first_i2c^(0+128),f
  5805                           
  5806                           ;main.c: 143: junk = SSP1BUF;
  5807  0087  0024               	movlb	4	; select bank4
  5808  0088  0811               	movf	17,w	;volatile
  5809                           
  5810                           ;main.c: 144: SSP1CON1bits.CKP = 1;
  5811  0089  1615               	bsf	21,4	;volatile
  5812  008A                     i1l2662:	
  5813                           
  5814                           ;main.c: 145: };main.c: 146: if (SSP1STATbits.D_nA)
  5815  008A  1E94               	btfss	20,5	;volatile
  5816  008B  28AC               	goto	i1l2686
  5817                           
  5818                           ;main.c: 147: {;main.c: 148: if (first_i2c) {
  5819  008C  0021               	movlb	1	; select bank1
  5820  008D  086C               	movf	_first_i2c^(0+128),w
  5821  008E  1903               	btfsc	3,2
  5822  008F  2896               	goto	i1l2670
  5823                           
  5824                           ;main.c: 149: index_i2c = SSP1BUF;
  5825  0090  0024               	movlb	4	; select bank4
  5826  0091  0811               	movf	17,w	;volatile
  5827  0092  0021               	movlb	1	; select bank1
  5828  0093  00D3               	movwf	_index_i2c^(0+128)
  5829                           
  5830                           ;main.c: 150: first_i2c = 0;
  5831  0094  01EC               	clrf	_first_i2c^(0+128)
  5832                           
  5833                           ;main.c: 151: }
  5834  0095  28A6               	goto	i1l2678
  5835  0096                     i1l2670:	
  5836                           
  5837                           ;main.c: 153: else {;main.c: 154: if (index_i2c < RX_ELMNTS)
  5838  0096  302B               	movlw	43
  5839  0097  0253               	subwf	_index_i2c^(0+128),w
  5840  0098  1803               	skipnc
  5841  0099  28A4               	goto	i1l2676
  5842                           
  5843                           ;main.c: 155: {;main.c: 156: I2C_buffer.byte[index_i2c++] = SSP1BUF;
  5844  009A  0853               	movf	_index_i2c^(0+128),w
  5845  009B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5846  009C  0086               	movwf	6
  5847  009D  0187               	clrf	7
  5848  009E  0024               	movlb	4	; select bank4
  5849  009F  0811               	movf	17,w	;volatile
  5850  00A0  0081               	movwf	1
  5851  00A1  0021               	movlb	1	; select bank1
  5852  00A2  0AD3               	incf	_index_i2c^(0+128),f
  5853                           
  5854                           ;main.c: 157: } else {
  5855  00A3  28A6               	goto	i1l2678
  5856  00A4                     i1l2676:	
  5857                           
  5858                           ;main.c: 158: junk = SSP1BUF;
  5859  00A4  0024               	movlb	4	; select bank4
  5860  00A5  0811               	movf	17,w	;volatile
  5861  00A6                     i1l2678:	
  5862                           
  5863                           ;main.c: 159: };main.c: 160: };main.c: 161: if (SSP1CON1bits.WCOL)
  5864  00A6  0024               	movlb	4	; select bank4
  5865  00A7  1F95               	btfss	21,7	;volatile
  5866  00A8  28AB               	goto	i1l2684
  5867                           
  5868                           ;main.c: 162: {;main.c: 163: SSP1CON1bits.WCOL = 0;
  5869  00A9  1395               	bcf	21,7	;volatile
  5870                           
  5871                           ;main.c: 164: junk = SSP1BUF;
  5872  00AA  0811               	movf	17,w	;volatile
  5873  00AB                     i1l2684:	
  5874                           
  5875                           ;main.c: 165: };main.c: 166: SSP1CON1bits.CKP = 1;
  5876  00AB  1615               	bsf	21,4	;volatile
  5877  00AC                     i1l2686:	
  5878                           
  5879                           ;main.c: 167: };main.c: 168: };main.c: 169: PIR1bits.SSP1IF = 0;
  5880  00AC  0020               	movlb	0	; select bank0
  5881  00AD  1191               	bcf	17,3	;volatile
  5882                           
  5883                           ;main.c: 170: INTCONbits.IOCIE = 1;
  5884  00AE  158B               	bsf	11,3	;volatile
  5885                           
  5886                           ;main.c: 171: PIE1bits.TMR1IE = 1;
  5887  00AF  0021               	movlb	1	; select bank1
  5888  00B0  1411               	bsf	17,0	;volatile
  5889  00B1                     i1l2692:	
  5890                           
  5891                           ;main.c: 172: };main.c: 174: if (PIR2bits.BCL1IF)
  5892  00B1  0020               	movlb	0	; select bank0
  5893  00B2  1D92               	btfss	18,3	;volatile
  5894  00B3  28BC               	goto	i1l119
  5895                           
  5896                           ;main.c: 175: {;main.c: 176: junk = SSP1BUF;
  5897  00B4  0024               	movlb	4	; select bank4
  5898  00B5  0811               	movf	17,w	;volatile
  5899                           
  5900                           ;main.c: 177: PIR2bits.BCL1IF = 0;
  5901  00B6  0020               	movlb	0	; select bank0
  5902  00B7  1192               	bcf	18,3	;volatile
  5903                           
  5904                           ;main.c: 178: SSP1CON1bits.CKP = 1;
  5905  00B8  0024               	movlb	4	; select bank4
  5906  00B9  1615               	bsf	21,4	;volatile
  5907                           
  5908                           ;main.c: 179: PIR1bits.SSP1IF = 0;
  5909  00BA  0020               	movlb	0	; select bank0
  5910  00BB  1191               	bcf	17,3	;volatile
  5911  00BC                     i1l119:	
  5912  00BC  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5913  00BD  0009               	retfie
  5914  00BE                     __end_of_isr:	
  5915                           
  5916                           	psect	text20
  5917  05B5                     __ptext20:	
  5918 ;; *************** function i1___wmul *****************
  5919 ;; Defined at:
  5920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  multiplier      2    0[COMMON] unsigned int 
  5923 ;;  multiplicand    2    2[COMMON] unsigned int 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  __wmul          2    4[COMMON] unsigned int 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  2    0[COMMON] unsigned int 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 1F/1
  5932 ;;		On exit  : 1F/1
  5933 ;;		Unchanged: 1F/0
  5934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5935 ;;      Params:         4       0       0       0
  5936 ;;      Locals:         2       0       0       0
  5937 ;;      Temps:          0       0       0       0
  5938 ;;      Totals:         6       0       0       0
  5939 ;;Total ram usage:        6 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_isr
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function i1___wmul
  5950  05B5                     i1___wmul:	
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5954  05B5  01F4               	clrf	i1___wmul@product
  5955  05B6  01F5               	clrf	i1___wmul@product+1
  5956  05B7                     i1l2582:	
  5957  05B7  1C70               	btfss	i1___wmul@multiplier,0
  5958  05B8  2DBD               	goto	i1l2586
  5959  05B9  0872               	movf	i1___wmul@multiplicand,w
  5960  05BA  07F4               	addwf	i1___wmul@product,f
  5961  05BB  0873               	movf	i1___wmul@multiplicand+1,w
  5962  05BC  3DF5               	addwfc	i1___wmul@product+1,f
  5963  05BD                     i1l2586:	
  5964  05BD  35F2               	lslf	i1___wmul@multiplicand,f
  5965  05BE  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5966  05BF  36F1               	lsrf	i1___wmul@multiplier+1,f
  5967  05C0  0CF0               	rrf	i1___wmul@multiplier,f
  5968  05C1  0870               	movf	i1___wmul@multiplier,w
  5969  05C2  0471               	iorwf	i1___wmul@multiplier+1,w
  5970  05C3  1D03               	btfss	3,2
  5971  05C4  2DB7               	goto	i1l2582
  5972  05C5  0875               	movf	i1___wmul@product+1,w
  5973  05C6  00F1               	movwf	?i1___wmul+1
  5974  05C7  0874               	movf	i1___wmul@product,w
  5975  05C8  00F0               	movwf	?i1___wmul
  5976  05C9  0008               	return
  5977  05CA                     __end_ofi1___wmul:	
  5978                           
  5979                           	psect	text21
  5980  057B                     __ptext21:	
  5981 ;; *************** function ___lwdiv *****************
  5982 ;; Defined at:
  5983 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  divisor         2    6[COMMON] unsigned int 
  5986 ;;  dividend        2    8[COMMON] unsigned int 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  quotient        2   10[COMMON] unsigned int 
  5989 ;;  counter         1   12[COMMON] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  2    6[COMMON] unsigned int 
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 1F/1
  5996 ;;		On exit  : 1F/1
  5997 ;;		Unchanged: 1F/0
  5998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5999 ;;      Params:         4       0       0       0
  6000 ;;      Locals:         3       0       0       0
  6001 ;;      Temps:          0       0       0       0
  6002 ;;      Totals:         7       0       0       0
  6003 ;;Total ram usage:        7 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_isr
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function ___lwdiv
  6014  057B                     ___lwdiv:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6018  057B  01FA               	clrf	___lwdiv@quotient
  6019  057C  01FB               	clrf	___lwdiv@quotient+1
  6020  057D  0876               	movf	___lwdiv@divisor,w
  6021  057E  0477               	iorwf	___lwdiv@divisor+1,w
  6022  057F  1903               	btfsc	3,2
  6023  0580  2D9B               	goto	i1l2576
  6024  0581  01FC               	clrf	___lwdiv@counter
  6025  0582                     L8:	
  6026  0582  0AFC               	incf	___lwdiv@counter,f
  6027  0583  1BF7               	btfsc	___lwdiv@divisor+1,7
  6028  0584  2D88               	goto	i1l2564
  6029  0585  35F6               	lslf	___lwdiv@divisor,f
  6030  0586  0DF7               	rlf	___lwdiv@divisor+1,f
  6031  0587  2D82               	goto	L8
  6032  0588                     i1l2564:	
  6033  0588  35FA               	lslf	___lwdiv@quotient,f
  6034  0589  0DFB               	rlf	___lwdiv@quotient+1,f
  6035  058A  0877               	movf	___lwdiv@divisor+1,w
  6036  058B  0279               	subwf	___lwdiv@dividend+1,w
  6037  058C  1D03               	skipz
  6038  058D  2D90               	goto	u269_25
  6039  058E  0876               	movf	___lwdiv@divisor,w
  6040  058F  0278               	subwf	___lwdiv@dividend,w
  6041  0590                     u269_25:	
  6042  0590  1C03               	skipc
  6043  0591  2D97               	goto	i1l2572
  6044  0592  0876               	movf	___lwdiv@divisor,w
  6045  0593  02F8               	subwf	___lwdiv@dividend,f
  6046  0594  0877               	movf	___lwdiv@divisor+1,w
  6047  0595  3BF9               	subwfb	___lwdiv@dividend+1,f
  6048  0596  147A               	bsf	___lwdiv@quotient,0
  6049  0597                     i1l2572:	
  6050  0597  36F7               	lsrf	___lwdiv@divisor+1,f
  6051  0598  0CF6               	rrf	___lwdiv@divisor,f
  6052  0599  0BFC               	decfsz	___lwdiv@counter,f
  6053  059A  2D88               	goto	i1l2564
  6054  059B                     i1l2576:	
  6055  059B  087B               	movf	___lwdiv@quotient+1,w
  6056  059C  00F7               	movwf	?___lwdiv+1
  6057  059D  087A               	movf	___lwdiv@quotient,w
  6058  059E  00F6               	movwf	?___lwdiv
  6059  059F  0008               	return
  6060  05A0                     __end_of___lwdiv:	
  6061  007E                     btemp	set	126	;btemp
  6062  007E                     int$flags	set	126
  6063  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     76      77
    BANK1            80     24      77
    BANK2            80      0      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwdiv
    ___lwdiv->i1___wmul

Critical Paths under _main in BANK0

    _main->_pre_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA
    _M_control->___fltol
    _init_I2C_buffer->_eeprom_read
    _calculate_pidA->___flsub
    ___xxtofl->_abs
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->__Umul8_16
    ___flge->___xxtofl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calculate_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   60910
                                             75 BANK0      1     1      0
                          _M_control
                           _PWM_Init
                       _PWM_set_duty
                     _calculate_pidA
                     _calculate_pidM
                       _eeprom_write
                    _init_I2C_buffer
                           _pre_pidM
 ---------------------------------------------------------------------------------
 (1) _pre_pidM                                             4     2      2   19483
                                             71 BANK0      4     2      2
                     _calculate_pidA (ARG)
                     _calculate_pidM
 ---------------------------------------------------------------------------------
 (2) _calculate_pidM                                      14    12      2   18999
                                             69 BANK0      2     0      2
                                             12 BANK1     12    12      0
                          _M_control
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                     _calculate_pidA (ARG)
 ---------------------------------------------------------------------------------
 (3) _M_control                                            3     1      2    2089
                                             12 BANK0      3     1      2
                       _PWM_set_duty
                            ___fltol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     426
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _PWM_set_duty                                         4     2      2     453
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_I2C_buffer                                      0     0      0      31
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      31
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1    2852
                                              2 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _calculate_pidA                                      18    14      4   17003
                                             63 BANK0      6     2      4
                                              0 BANK1     12    12      0
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     453
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1047
                                              6 BANK0     14    10      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     517
                                              2 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4602
                                             55 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4177
                                             35 BANK0     20    12      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    4673
                                             10 BANK0     25    17      8
                          __Umul8_16
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            8     5      3    1419
                                              2 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     986
                                             20 BANK0     12     4      8
                           ___xxtofl (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0     458
                                              0 BANK0      2     2      0
                            ___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     314
                                              6 COMMON     7     3      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _M_control
     _PWM_set_duty
     ___fltol (ARG)
     ___wmul (ARG)
   _PWM_Init
   _PWM_set_duty
   _calculate_pidA
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _abs
   _calculate_pidM
     _M_control
       _PWM_set_duty
       ___fltol (ARG)
       ___wmul (ARG)
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
   _eeprom_write
   _init_I2C_buffer
     _eeprom_read
   _pre_pidM
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
     _calculate_pidM (ARG)
       _M_control
         _PWM_set_duty
         ___fltol (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _calculate_pidA (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flge
           ___xxtofl (ARG)
             _abs (ARG)
           _abs (ARG)
         ___flmul
           __Umul8_16
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
           ___flmul (ARG)
             __Umul8_16
         ___fltol
         ___xxtofl
           _abs (ARG)
         _abs

 _isr (ROOT)
   ___lwdiv
     i1___wmul (ARG)
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      B8       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4C      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     18      4D       8       96.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      10      10       20.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      B8      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Sep 15 20:13:26 2018

                       pc 0002         calculate_pidA@pid 00DC               __CFG_CP$OFF 0000  
       calculate_pidA@set 005F         calculate_pidM@pid 00E8         calculate_pidM@set 0065  
     ___wmul@multiplicand 0024          i1___wmul@product 0074       __Umul8_16@word_mpld 0028  
                     l135 0D5F                       l136 0DC5                       l145 0B63  
                     l307 0AE0                       l158 0855                       l701 00EC  
                     l621 0340                       l613 02EE                       l702 00EA  
                     l630 036D                       l622 0346                       l614 02EC  
                     l631 036E                       l623 0347                       l287 04B8  
                     l608 02D3                       l705 0102                       l641 03D8  
                     l609 02D1                       l706 0100                       l730 0DF9  
                     l723 0250                       l619 0353                       l636 03BF  
                     l743 0E2B                       l656 040A                       l497 04E8  
                     l499 0516                       l759 029F                       _PR2 001B  
            __CFG_CPD$OFF 0000                       _abs 05DA                       _isr 0004  
            __CFG_BORV$LO 0000                       wreg 0009              ___flmul@aexp 0037  
            ___flmul@bexp 0038              ___flmul@sign 0036              ___flmul@temp 0041  
            ___flmul@prod 003D                      S3850 05CA              __CFG_LVP$OFF 0000  
     calculate_pidA@error 00D8              ___fltol@exp1 002B                      ?_abs 0022  
                    l3010 02FA                      l3100 03DC                      l3102 03DE  
                    l3112 03E9                      l3040 0318                      l3220 04FF  
                    l3132 0406                      l3124 03FA                      l3108 03E7  
                    l3060 035D                      l3204 0B1B                      l3214 04D7  
                    l3150 0267                      l3302 0110                      l3054 034E  
                    l3136 040B                      l3072 0376                      l3232 0537  
                    l3162 0277                      l3082 03B7                      l3234 053C  
                    l3402 0E04                      l3180 028F                      l3156 026F  
                    l3260 056C                      l3252 055F                      l3420 0E20  
                    l3174 0287                      l3350 01F5                      l3414 0E1B  
                    l3406 0E06                      l3168 027F                      l3360 020A  
                    l3096 03D9                      l3088 03CD                      l3248 0558  
                    l3432 0E40                      l3408 0E10                      l3512 0B7A  
                    l3186 0297                      l3370 021C                      l3258 0563  
                    l3418 0E29                      l3194 0AFC                      l3442 0E49  
                    l3506 0B66                      l3380 0242                      l3356 0208  
                    l3460 0FC3                      l3374 022F                      l3286 00F0  
                    l3198 0B06                      l3464 0FE8                      l3800 09EE  
                    l3624 081A                      l3298 0106                      l3706 08C1  
                    l3802 09F8                      l3804 09FD                      l3740 0922  
                    l3398 0DF1                      l2950 05A2                      l3750 0936  
                    l3718 08EC                      l2944 0B88                      l3808 0A01  
                    l3752 0945                      l3728 0900                      l3680 0860  
                    l2954 05A8                      l3762 096F                      l3738 0918  
                    l3682 086A                      l3684 0874                      l3774 099A  
                    l3694 0888                      l3678 085A                      l3792 09E1  
                    l3784 09B3                      l3696 0897                      l3798 09E4  
                    ?_isr 0070              __CFG_WDTE$ON 0000           ?_calculate_pidA 005F  
         ?_calculate_pidM 0065                      u4101 04B7                      u3135 0B91  
                    u4130 0B43                      u3260 0337                      u3270 0338  
                    u4230 0818                      u3255 032C                      u4303 08B7  
                    u4144 0B45                      u3363 0388                      u4155 0B4E  
                    u4323 08E3                      u4413 0991                      u4175 0B5F  
                    u4507 0B70                      u3725 0545                      u3645 0B10  
                    u4445 09D9                      u4393 0965                      u4477 0848  
                    u4487 09F2                      u3945 0225                      u4497 0AD9  
                    u3955 0239                      _WPUA 020C            ??_eeprom_write 0023  
            __CFG_WRT$OFF 0000                      abs@a 0022       calculate_pidM@error 00E4  
                    _main 0806                      _lset 00CF                      fsr0h 0005  
                    fsr1h 0007                      indf0 0000                      fsr0l 0004  
                    indf1 0001                      fsr1l 0006                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 00BE             __CFG_IESO$OFF 0000  
                   ??_abs 0024                     ??_isr 0020             __CFG_PLLEN$ON 0000  
   __size_of_PWM_set_duty 001F             ___fltol@sign1 002A           __end_of___fladd 0410  
                   ?_main 0070                     _EEADR 0191           __end_of___flmul 025B  
         __end_of___flsub 02C0           __end_of___fltol 057B                     _T1CON 0018  
                   _T2CON 001C           __end_of___lwdiv 05A0                     i1l119 00BC  
                   _TRISA 008C             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
          __pbitbssCOMMON 03E8          __end_of_PWM_Init 05F4          __end_ofi1___wmul 05CA  
                   status 0003       i1___wmul@multiplier 0070                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000              _PWM_set_duty 0B88           __initialization 00C0  
            __end_of_main 0ADF                    ??_main 006B        __size_of_M_control 0038  
                  _EEDATA 0193                    _CCPR1L 0291                    _EECON1 0195  
                  _EECON2 0196                    _ANSELA 018C                    i1l2614 0021  
                  i1l2632 005C                    i1l2608 0017                    i1l2626 0058  
                  i1l2572 0597                    i1l2564 0588                    i1l2644 0072  
                  i1l2652 0080                    i1l2582 05B7                    i1l2670 0096  
                  i1l2662 008A                    i1l2576 059B                    i1l2586 05BD  
                  i1l2684 00AB                    i1l2676 00A4                    i1l2692 00B1  
                  i1l2678 00A6                    i1l2686 00AC                    _INTCON 000B  
                  u269_25 0590                    _OSCCON 0099          __end_of___xxtofl 0E49  
            _accumulatorA 0124              _accumulatorM 012C      __size_of_eeprom_read 0012  
                  ___flge 04C6                 ??___fladd 004B                    ___wmul 05A0  
          __CFG_STVREN$ON 0000                 ??___flmul 0032                 ??___flsub 005F  
               ??___fltol 0026                 ??___lwdiv 007A      __end_of_eeprom_write 0AFC  
__size_of_init_I2C_buffer 00A4          __end_of_pre_pidM 0B88        __size_of__Umul8_16 0049  
              ___flge@ff1 0034                ___flge@ff2 0038              ___xxtofl@arg 0030  
            ___xxtofl@exp 002F              ___xxtofl@val 0026   __end_of__initialization 00D5  
         eeprom_read@addr 0022                ___fltol@f1 0022            __pcstackCOMMON 0070  
            __pidataBANK1 0000         __end_of_M_control 0B34                 ?_PWM_Init 0070  
               ?i1___wmul 0070            _OPTION_REGbits 0095          ??_calculate_pidA 0063  
        ??_calculate_pidM 0067         eeprom_write@value 0022                __pbssBANK1 00A0  
              __pbssBANK2 0120         __end_of__Umul8_16 02A4                __pmaintext 0806  
                 ?___flge 0034                   ?___wmul 0022                __pintentry 0004  
                 _CCP1CON 0293                ??_PWM_Init 0022                ??i1___wmul 0074  
     _calculate_pidA$1317 00D4                 ?___xxtofl 0026       _calculate_pidM$1318 00E0  
                 _SSP1ADD 0212                   _SSP1BUF 0211         ??_init_I2C_buffer 0023  
        PWM_set_duty@duty 0022                 ?_pre_pidM 0067     __size_of_eeprom_write 001D  
         __size_of___flge 0062                   ___fladd 02C0                   ___flmul 00D9  
                 ___flsub 02A4                   ___fltol 0528           __size_of___wmul 0015  
                 ___lwdiv 057B                _lasterrorA 0120                _lasterrorM 0128  
                 __ptext1 0B34                   __ptext2 0E49                   __ptext3 0AFC  
                 __ptext4 05A0                   __ptext5 0B88                   __ptext6 0410  
                 __ptext7 04B4                   __ptext8 0ADF                   __ptext9 0BA7  
             pre_pidM@set 0067                 _T1CONbits 0018                   _counter 00D1  
            __size_of_abs 000E              __size_of_isr 00BA                ??___xxtofl 002A  
               _IOCAFbits 0393                 _IOCANbits 0392                   clrloop0 05F5  
    end_of_initialization 00D5              _eeprom_write 0ADF                ??_pre_pidM 0069  
   i1___wmul@multiplicand 0072                 _PORTAbits 000C               ___fladd@grs 0056  
        __CFG_FOSC$INTOSC 0000             ___xxtofl@sign 002E               ___flmul@grs 0039  
           ??_eeprom_read 0022                _zero_cross 0360            __end_of___flge 0528  
          __end_of___wmul 05B5                 _M_control 0AFC             __pbitbssBANK0 0360  
       __size_of_PWM_Init 000C       start_initialization 00C0         __size_ofi1___wmul 0015  
             __end_of_abs 05E8               __end_of_isr 00BE              _loadDistance 03E8  
                ??___flge 003C                  ??___wmul 0026       __end_of_eeprom_read 04C6  
               __Umul8_16 025B               __pdataBANK1 00EC                ?_M_control 002C  
         _init_I2C_buffer 0410                 ___fladd@a 0047                 ___fladd@b 0043  
               ___flmul@a 002E                 ___flmul@b 002A                 ___flsub@a 0057  
               ___flsub@b 005B                 ___latbits 0001             __pcstackBANK0 0020  
           __pcstackBANK1 00D4         __size_of___xxtofl 006D          eeprom_write@addr 0023  
           ?_PWM_set_duty 0022          ___lwdiv@dividend 0078                  ?___fladd 0043  
                ?___flmul 002A                  ?___flsub 0057                  ?___fltol 0022  
       __size_of_pre_pidM 0054                ?__Umul8_16 0022                  ?___lwdiv 0076  
               __pswtext1 05CA                 _first_i2c 00EC                 _index_i2c 00D3  
        ___lwdiv@quotient 007A            ___wmul@product 0026                  _LATAbits 010C  
 __size_of_calculate_pidA 0235   __size_of_calculate_pidM 01B7                 clear_ram0 05F4  
             _eeprom_read 04B4                  _PIE1bits 0091                  _PIE2bits 0092  
          ??_PWM_set_duty 0024               _auxDistance 00CB                  _PIR1bits 0011  
                _PIR2bits 0012   __end_of_init_I2C_buffer 04B4                  _SSP1CON1 0215  
                _SSP1STAT 0214               ??_M_control 002E                  _PWM_Init 05E8  
       ___wmul@multiplier 0022                  i1___wmul 05B5                _I2C_buffer 00A0  
              _EECON1bits 0195                _APFCONbits 011D               ??__Umul8_16 0025  
        __size_of___fladd 0150          __size_of___flmul 0182          __size_of___flsub 001C  
        __size_of___fltol 0053          __size_of___lwdiv 0025                  ___xxtofl 0DDC  
         ___lwdiv@divisor 0076           ___lwdiv@counter 007C                  __ptext10 05DA  
                __ptext11 0DDC                  __ptext20 05B5                  __ptext12 0528  
                __ptext21 057B                  __ptext13 02A4                  __ptext14 02C0  
                __ptext15 00D9                  __ptext16 025B                  __ptext17 04C6  
                __ptext18 05E8              _SSP1CON1bits 0215              _SSP1CON2bits 0216  
            _SSP1CON3bits 0217             __size_of_main 02D9                  _pre_pidM 0B34  
        ?_init_I2C_buffer 0070                  int$flags 007E              _SSP1STATbits 0214  
              _INTCONbits 000B      __end_of_PWM_set_duty 0BA7                  intlevel1 0000  
          _calculate_pidA 0BA7            _calculate_pidM 0E49         __CFG_CLKOUTEN$OFF 0000  
  __Umul8_16@multiplicand 0022             ___fladd@signs 0053    __end_of_calculate_pidA 0DDC  
  __end_of_calculate_pidM 1000             ?_eeprom_write 0022              ___fladd@aexp 0054  
            ___fladd@bexp 0055              M_control@ctr 002C                _STATUSbits 0003  
    __Umul8_16@multiplier 0027              ?_eeprom_read 0070         __Umul8_16@product 0025  
