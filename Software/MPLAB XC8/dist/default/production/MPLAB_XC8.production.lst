

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Sep 21 18:39:17 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text20,local,class=CODE,merge=1,delta=2
    23                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	pa_nodes0,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.00
    28                           ; Generated 27/05/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC12F1840 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  008C                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0095                     	;# 
    91  0096                     	;# 
    92  0097                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  010C                     	;# 
   102  0111                     	;# 
   103  0112                     	;# 
   104  0115                     	;# 
   105  0116                     	;# 
   106  0117                     	;# 
   107  0118                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011B                     	;# 
   111  011D                     	;# 
   112  011D                     	;# 
   113  018C                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0197                     	;# 
   124  0199                     	;# 
   125  019A                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019C                     	;# 
   131  019C                     	;# 
   132  019D                     	;# 
   133  019E                     	;# 
   134  019F                     	;# 
   135  020C                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0291                     	;# 
   152  0291                     	;# 
   153  0292                     	;# 
   154  0293                     	;# 
   155  0294                     	;# 
   156  0295                     	;# 
   157  0295                     	;# 
   158  0296                     	;# 
   159  0391                     	;# 
   160  0392                     	;# 
   161  0393                     	;# 
   162  039A                     	;# 
   163  039C                     	;# 
   164  039D                     	;# 
   165  039E                     	;# 
   166  039F                     	;# 
   167  0FE4                     	;# 
   168  0FE5                     	;# 
   169  0FE6                     	;# 
   170  0FE7                     	;# 
   171  0FE8                     	;# 
   172  0FE9                     	;# 
   173  0FEA                     	;# 
   174  0FEB                     	;# 
   175  0FED                     	;# 
   176  0FEE                     	;# 
   177  0FEF                     	;# 
   178                           
   179                           	psect	eeprom_data
   180  0000  0024 0001 0001 0000 0001 0000 00FF 00FF 	db	36,1,1,0,1,0,255,255	;# 
   181  0008  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   182  0010  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   183  0018  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   184  0000                     	;# 
   185  0001                     	;# 
   186  0002                     	;# 
   187  0003                     	;# 
   188  0004                     	;# 
   189  0005                     	;# 
   190  0006                     	;# 
   191  0007                     	;# 
   192  0008                     	;# 
   193  0009                     	;# 
   194  000A                     	;# 
   195  000B                     	;# 
   196  000C                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  008C                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009A                     	;# 
   219  009B                     	;# 
   220  009B                     	;# 
   221  009C                     	;# 
   222  009D                     	;# 
   223  009E                     	;# 
   224  010C                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0115                     	;# 
   228  0116                     	;# 
   229  0117                     	;# 
   230  0118                     	;# 
   231  0119                     	;# 
   232  011A                     	;# 
   233  011B                     	;# 
   234  011D                     	;# 
   235  011D                     	;# 
   236  018C                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  0199                     	;# 
   248  019A                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019C                     	;# 
   254  019C                     	;# 
   255  019D                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  020C                     	;# 
   259  0211                     	;# 
   260  0211                     	;# 
   261  0212                     	;# 
   262  0212                     	;# 
   263  0213                     	;# 
   264  0213                     	;# 
   265  0214                     	;# 
   266  0214                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0291                     	;# 
   275  0291                     	;# 
   276  0292                     	;# 
   277  0293                     	;# 
   278  0294                     	;# 
   279  0295                     	;# 
   280  0295                     	;# 
   281  0296                     	;# 
   282  0391                     	;# 
   283  0392                     	;# 
   284  0393                     	;# 
   285  039A                     	;# 
   286  039C                     	;# 
   287  039D                     	;# 
   288  039E                     	;# 
   289  039F                     	;# 
   290  0FE4                     	;# 
   291  0FE5                     	;# 
   292  0FE6                     	;# 
   293  0FE7                     	;# 
   294  0FE8                     	;# 
   295  0FE9                     	;# 
   296  0FEA                     	;# 
   297  0FEB                     	;# 
   298  0FED                     	;# 
   299  0FEE                     	;# 
   300  0FEF                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0015                     	;# 
   317  0016                     	;# 
   318  0016                     	;# 
   319  0017                     	;# 
   320  0018                     	;# 
   321  0019                     	;# 
   322  001A                     	;# 
   323  001B                     	;# 
   324  001C                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  008C                     	;# 
   328  0091                     	;# 
   329  0092                     	;# 
   330  0095                     	;# 
   331  0096                     	;# 
   332  0097                     	;# 
   333  0098                     	;# 
   334  0099                     	;# 
   335  009A                     	;# 
   336  009B                     	;# 
   337  009B                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009E                     	;# 
   341  010C                     	;# 
   342  0111                     	;# 
   343  0112                     	;# 
   344  0115                     	;# 
   345  0116                     	;# 
   346  0117                     	;# 
   347  0118                     	;# 
   348  0119                     	;# 
   349  011A                     	;# 
   350  011B                     	;# 
   351  011D                     	;# 
   352  011D                     	;# 
   353  018C                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0194                     	;# 
   361  0195                     	;# 
   362  0196                     	;# 
   363  0197                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019C                     	;# 
   371  019C                     	;# 
   372  019D                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  020C                     	;# 
   376  0211                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0212                     	;# 
   380  0213                     	;# 
   381  0213                     	;# 
   382  0214                     	;# 
   383  0214                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0216                     	;# 
   388  0216                     	;# 
   389  0217                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0294                     	;# 
   396  0295                     	;# 
   397  0295                     	;# 
   398  0296                     	;# 
   399  0391                     	;# 
   400  0392                     	;# 
   401  0393                     	;# 
   402  039A                     	;# 
   403  039C                     	;# 
   404  039D                     	;# 
   405  039E                     	;# 
   406  039F                     	;# 
   407  0FE4                     	;# 
   408  0FE5                     	;# 
   409  0FE6                     	;# 
   410  0FE7                     	;# 
   411  0FE8                     	;# 
   412  0FE9                     	;# 
   413  0FEA                     	;# 
   414  0FEB                     	;# 
   415  0FED                     	;# 
   416  0FEE                     	;# 
   417  0FEF                     	;# 
   418  0000                     	;# 
   419  0001                     	;# 
   420  0002                     	;# 
   421  0003                     	;# 
   422  0004                     	;# 
   423  0005                     	;# 
   424  0006                     	;# 
   425  0007                     	;# 
   426  0008                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0015                     	;# 
   434  0016                     	;# 
   435  0016                     	;# 
   436  0017                     	;# 
   437  0018                     	;# 
   438  0019                     	;# 
   439  001A                     	;# 
   440  001B                     	;# 
   441  001C                     	;# 
   442  001E                     	;# 
   443  001F                     	;# 
   444  008C                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0095                     	;# 
   448  0096                     	;# 
   449  0097                     	;# 
   450  0098                     	;# 
   451  0099                     	;# 
   452  009A                     	;# 
   453  009B                     	;# 
   454  009B                     	;# 
   455  009C                     	;# 
   456  009D                     	;# 
   457  009E                     	;# 
   458  010C                     	;# 
   459  0111                     	;# 
   460  0112                     	;# 
   461  0115                     	;# 
   462  0116                     	;# 
   463  0117                     	;# 
   464  0118                     	;# 
   465  0119                     	;# 
   466  011A                     	;# 
   467  011B                     	;# 
   468  011D                     	;# 
   469  011D                     	;# 
   470  018C                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0197                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019C                     	;# 
   488  019C                     	;# 
   489  019D                     	;# 
   490  019E                     	;# 
   491  019F                     	;# 
   492  020C                     	;# 
   493  0211                     	;# 
   494  0211                     	;# 
   495  0212                     	;# 
   496  0212                     	;# 
   497  0213                     	;# 
   498  0213                     	;# 
   499  0214                     	;# 
   500  0214                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0216                     	;# 
   505  0216                     	;# 
   506  0217                     	;# 
   507  0217                     	;# 
   508  0291                     	;# 
   509  0291                     	;# 
   510  0292                     	;# 
   511  0293                     	;# 
   512  0294                     	;# 
   513  0295                     	;# 
   514  0295                     	;# 
   515  0296                     	;# 
   516  0391                     	;# 
   517  0392                     	;# 
   518  0393                     	;# 
   519  039A                     	;# 
   520  039C                     	;# 
   521  039D                     	;# 
   522  039E                     	;# 
   523  039F                     	;# 
   524  0FE4                     	;# 
   525  0FE5                     	;# 
   526  0FE6                     	;# 
   527  0FE7                     	;# 
   528  0FE8                     	;# 
   529  0FE9                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEF                     	;# 
   535                           
   536                           	psect	idataBANK1
   537  0000                     __pidataBANK1:	
   538  0003                     _STATUSbits	set	3
   539  000C                     _PORTAbits	set	12
   540  0018                     _T1CON	set	24
   541  000B                     _INTCON	set	11
   542  001C                     _T2CON	set	28
   543  001B                     _PR2	set	27
   544  0012                     _PIR2bits	set	18
   545  0018                     _T1CONbits	set	24
   546  0011                     _PIR1bits	set	17
   547  000B                     _INTCONbits	set	11
   548  0092                     _PIE2bits	set	146
   549  0095                     _OPTION_REGbits	set	149
   550  008C                     _TRISA	set	140
   551  0099                     _OSCCON	set	153
   552  0091                     _PIE1bits	set	145
   553  011D                     _APFCONbits	set	285
   554  010C                     _LATAbits	set	268
   555  0191                     _EEADR	set	401
   556  0196                     _EECON2	set	406
   557  0193                     _EEDATA	set	403
   558  0195                     _EECON1	set	405
   559  0195                     _EECON1bits	set	405
   560  018C                     _ANSELA	set	396
   561  0212                     _SSP1ADD	set	530
   562  0217                     _SSP1CON3bits	set	535
   563  0216                     _SSP1CON2bits	set	534
   564  0215                     _SSP1CON1	set	533
   565  0214                     _SSP1STAT	set	532
   566  020C                     _WPUA	set	524
   567  0215                     _SSP1CON1bits	set	533
   568  0211                     _SSP1BUF	set	529
   569  0214                     _SSP1STATbits	set	532
   570  0291                     _CCPR1L	set	657
   571  0293                     _CCP1CON	set	659
   572  0392                     _IOCANbits	set	914
   573  0393                     _IOCAFbits	set	915
   574                           
   575                           ; #config settings
   576  0000                     
   577                           	psect	cinit
   578  081C                     start_initialization:	
   579  081C                     __initialization:	
   580                           
   581                           ; Initialize objects allocated to BANK1
   582  081C  0021               	movlb	1	; select bank1
   583                           
   584                           ;initializer for _first_i2c
   585  081D  3001               	movlw	1
   586  081E  00EF               	movwf	__pdataBANK1& (0+127)
   587                           
   588                           ; Clear objects allocated to BITCOMMON
   589  081F  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   590                           
   591                           ; Clear objects allocated to BITBANK0
   592  0820  0020               	movlb	0	; select bank0
   593  0821  30A0               	movlw	low __pbssBANK1
   594  0822  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   595                           
   596                           ; Clear objects allocated to BANK0
   597  0823  01EB               	clrf	__pbssBANK0& (0+127)
   598  0824  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   599  0825  01ED               	clrf	(__pbssBANK0+2)& (0+127)
   600  0826  01EE               	clrf	(__pbssBANK0+3)& (0+127)
   601                           
   602                           ; Clear objects allocated to BANK1
   603  0827  0084               	movwf	4
   604  0828  3000               	movlw	high __pbssBANK1
   605  0829  0085               	movwf	5
   606  082A  3032               	movlw	50
   607  082B  3186  26E1  3188   	fcall	clear_ram0
   608                           
   609                           ; Clear objects allocated to BANK2
   610  082E  3020               	movlw	low __pbssBANK2
   611  082F  0084               	movwf	4
   612  0830  3001               	movlw	high __pbssBANK2
   613  0831  0085               	movwf	5
   614  0832  3010               	movlw	16
   615  0833  3186  26E1  3188   	fcall	clear_ram0
   616  0836                     end_of_initialization:	
   617                           ;End of C runtime variable initialization code
   618                           
   619  0836                     __end_of__initialization:	
   620  0836  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   621  0837  0020               	movlb	0
   622  0838  2839               	ljmp	_main	;jump to C main() function
   623  0839                     __pmaintext:	
   624 ;;
   625 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   626 ;;
   627 ;; *************** function _main *****************
   628 ;; Defined at:
   629 ;;		line 362 in file "main.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : B1F/0
   640 ;;		On exit  : 1F/1
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   643 ;;      Params:         0       0       0       0
   644 ;;      Locals:         0       0       0       0
   645 ;;      Temps:          0       0       5       0
   646 ;;      Totals:         0       0       5       0
   647 ;;Total ram usage:        5 bytes
   648 ;; Hardware stack levels required when called:    6
   649 ;; This function calls:
   650 ;;		_M_control
   651 ;;		_PWM_Init
   652 ;;		_PWM_set_duty
   653 ;;		_abs
   654 ;;		_calculate_pidA
   655 ;;		_calculate_pidM
   656 ;;		_eeprom_write
   657 ;;		_init_I2C_buffer
   658 ;;		_pre_pidM
   659 ;; This function is called by:
   660 ;;		Startup code after reset
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           
   665                           ;psect for function _main
   666  0839                     _main:	
   667                           
   668                           ;main.c: 363: OSCCON = 0b11110000;
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   672  0839  30F0               	movlw	240
   673  083A  0021               	movlb	1	; select bank1
   674  083B  0099               	movwf	25	;volatile
   675                           
   676                           ;main.c: 364: init_I2C_buffer();
   677  083C  3185  25E1  3188   	fcall	_init_I2C_buffer
   678                           
   679                           ;main.c: 365: TRISA = 0b00011110;
   680  083F  301E               	movlw	30
   681  0840  008C               	movwf	12	;volatile
   682                           
   683                           ;main.c: 366: ANSELA = 0b00000000;
   684  0841  0023               	movlb	3	; select bank3
   685  0842  018C               	clrf	12	;volatile
   686                           
   687                           ;main.c: 367: WPUA = 0b00011110;
   688  0843  0024               	movlb	4	; select bank4
   689  0844  008C               	movwf	12	;volatile
   690                           
   691                           ;main.c: 368: OPTION_REGbits.nWPUEN = (char) !(I2C_buffer.data.IOWPU & 0x01);
   692  0845  0021               	movlb	1	; select bank1
   693  0846  1823               	btfsc	(_I2C_buffer^(0+128)+3),0	;volatile
   694  0847  284B               	goto	u4480
   695  0848  0021               	movlb	1	; select bank1
   696  0849  1795               	bsf	21,7	;volatile
   697  084A  284D               	goto	l3728
   698  084B                     u4480:	
   699  084B  0021               	movlb	1	; select bank1
   700  084C  1395               	bcf	21,7	;volatile
   701  084D                     l3728:	
   702                           
   703                           ;main.c: 369: APFCONbits.CCP1SEL = 1;
   704  084D  0022               	movlb	2	; select bank2
   705  084E  141D               	bsf	29,0	;volatile
   706                           
   707                           ;main.c: 370: LATAbits.LATA0 = 0;
   708  084F  100C               	bcf	12,0	;volatile
   709                           
   710                           ;main.c: 371: SSP1STAT = 0b10000000;
   711  0850  3080               	movlw	128
   712  0851  0024               	movlb	4	; select bank4
   713  0852  0094               	movwf	20	;volatile
   714                           
   715                           ;main.c: 372: SSP1CON1 = 0b00110110;
   716  0853  3036               	movlw	54
   717  0854  0095               	movwf	21	;volatile
   718                           
   719                           ;main.c: 373: SSP1CON2bits.SEN = 1;
   720  0855  1416               	bsf	22,0	;volatile
   721                           
   722                           ;main.c: 374: SSP1CON3bits.BOEN = 1;
   723  0856  1617               	bsf	23,4	;volatile
   724                           
   725                           ;main.c: 375: SSP1CON3bits.SDAHT = 1;
   726  0857  1597               	bsf	23,3	;volatile
   727                           
   728                           ;main.c: 376: SSP1CON3bits.SBCDE = 1;
   729  0858  1517               	bsf	23,2	;volatile
   730                           
   731                           ;main.c: 377: SSP1ADD = (char) (I2C_buffer.data.ADDRESS << 1);
   732  0859  0021               	movlb	1	; select bank1
   733  085A  3521               	lslf	(_I2C_buffer^(0+128)+1),w	;volatile
   734  085B  0024               	movlb	4	; select bank4
   735  085C  0092               	movwf	18	;volatile
   736                           
   737                           ;main.c: 378: PIR1bits.SSP1IF = 0;
   738  085D  0020               	movlb	0	; select bank0
   739  085E  1191               	bcf	17,3	;volatile
   740                           
   741                           ;main.c: 379: PIR2bits.BCL1IF = 0;
   742  085F  1192               	bcf	18,3	;volatile
   743                           
   744                           ;main.c: 380: PIE2bits.BCL1IE = 1;
   745  0860  0021               	movlb	1	; select bank1
   746  0861  1592               	bsf	18,3	;volatile
   747                           
   748                           ;main.c: 381: PIE1bits.SSP1IE = 1;
   749  0862  1591               	bsf	17,3	;volatile
   750                           
   751                           ;main.c: 382: INTCONbits.PEIE = 1;
   752  0863  170B               	bsf	11,6	;volatile
   753                           
   754                           ;main.c: 383: PWM_Init();
   755  0864  27C2  3188         	fcall	_PWM_Init
   756                           
   757                           ;main.c: 384: PWM_set_duty(0);
   758  0866  01A2               	clrf	PWM_set_duty@duty
   759  0867  01A3               	clrf	PWM_set_duty@duty+1
   760  0868  2741  3188         	fcall	_PWM_set_duty
   761                           
   762                           ;main.c: 385: IOCANbits.IOCAN4 = 1;
   763  086A  0027               	movlb	7	; select bank7
   764  086B  1612               	bsf	18,4	;volatile
   765                           
   766                           ;main.c: 386: INTCON = 0b01001000;
   767  086C  3048               	movlw	72
   768  086D  008B               	movwf	11	;volatile
   769                           
   770                           ;main.c: 387: T1CON = 0b00110100;
   771  086E  3034               	movlw	52
   772  086F  0020               	movlb	0	; select bank0
   773  0870  0098               	movwf	24	;volatile
   774                           
   775                           ;main.c: 388: PIE1bits.TMR1IE = 1;
   776  0871  0021               	movlb	1	; select bank1
   777  0872  1411               	bsf	17,0	;volatile
   778                           
   779                           ;main.c: 389: T1CONbits.TMR1ON = 1;
   780  0873  0020               	movlb	0	; select bank0
   781  0874  1418               	bsf	24,0	;volatile
   782                           
   783                           ;main.c: 390: INTCONbits.GIE = 1;
   784  0875  178B               	bsf	11,7	;volatile
   785                           
   786                           ;main.c: 392: _delay((unsigned long)((5)*(32000000/4000.0)));
   787  0876  3034               	movlw	52
   788  0877  0021               	movlb	1	; select bank1
   789  0878  00EA               	movwf	??_main^(0+128)
   790  0879  30F1               	movlw	241
   791  087A                     u4767:	
   792  087A  0B89               	decfsz	9,f
   793  087B  287A               	goto	u4767
   794  087C  0BEA               	decfsz	??_main^(0+128),f
   795  087D  287A               	goto	u4767
   796  087E  3200               	nop2
   797                           
   798                           ;main.c: 394: if (PORTAbits.RA3 == 0) {
   799  087F  0020               	movlb	0	; select bank0
   800  0880  198C               	btfsc	12,3	;volatile
   801  0881  2890               	goto	l160
   802                           
   803                           ;main.c: 395: eeprom_write(0, 0x24);
   804  0882  3024               	movlw	36
   805  0883  00A2               	movwf	eeprom_write@value
   806  0884  3000               	movlw	0
   807  0885  262A  3188         	fcall	_eeprom_write
   808                           
   809                           ;main.c: 396: _delay((unsigned long)((5)*(32000000/4000.0)));
   810  0887  3034               	movlw	52
   811  0888  0021               	movlb	1	; select bank1
   812  0889  00EA               	movwf	??_main^(0+128)
   813  088A  30F1               	movlw	241
   814  088B                     u4777:	
   815  088B  0B89               	decfsz	9,f
   816  088C  288B               	goto	u4777
   817  088D  0BEA               	decfsz	??_main^(0+128),f
   818  088E  288B               	goto	u4777
   819  088F  3200               	nop2
   820  0890                     l160:	
   821                           ;main.c: 397: };main.c: 399: while (1) {
   822                           
   823  0890  0064               	clrwdt	;# 
   824                           
   825                           ;main.c: 401: if (I2C_buffer.data.START_STOP == 1) {
   826  0891  0021               	movlb	1	; select bank1
   827  0892  0B22               	decfsz	(_I2C_buffer^(0+128)+2),w	;volatile
   828  0893  2AF2               	goto	l3928
   829  0894  2ADE               	goto	l3924
   830  0895                     l3784:	
   831                           
   832                           ;main.c: 404: M_control(0);
   833  0895  0020               	movlb	0	; select bank0
   834  0896  01AC               	clrf	M_control@ctr
   835  0897  01AD               	clrf	M_control@ctr+1
   836  0898  2647  3188         	fcall	_M_control
   837                           
   838                           ;main.c: 405: break;
   839  089A  2AE8               	goto	l3926
   840  089B                     l3786:	
   841                           
   842                           ;main.c: 407: M_control(I2C_buffer.data.SPEED);
   843  089B  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
   844  089C  0020               	movlb	0	; select bank0
   845  089D  00AD               	movwf	M_control@ctr+1
   846  089E  0021               	movlb	1	; select bank1
   847  089F  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
   848  08A0  0020               	movlb	0	; select bank0
   849  08A1  00AC               	movwf	M_control@ctr
   850  08A2  2647  3188         	fcall	_M_control
   851                           
   852                           ;main.c: 408: break;
   853  08A4  2AE8               	goto	l3926
   854  08A5                     l3788:	
   855                           
   856                           ;main.c: 410: calculate_pidM(I2C_buffer.data.SPEED);
   857  08A5  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
   858  08A6  0020               	movlb	0	; select bank0
   859  08A7  00E6               	movwf	calculate_pidM@set+1
   860  08A8  0021               	movlb	1	; select bank1
   861  08A9  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
   862  08AA  0020               	movlb	0	; select bank0
   863  08AB  00E5               	movwf	calculate_pidM@set
   864  08AC  3180  20C0  3188   	fcall	_calculate_pidM
   865                           
   866                           ;main.c: 411: break;
   867  08AF  2AE8               	goto	l3926
   868  08B0                     l3790:	
   869                           
   870                           ;main.c: 413: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
   871  08B0  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
   872  08B1  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
   873  08B2  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
   874  08B3  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
   875  08B4  1D03               	btfss	3,2
   876  08B5  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
   877  08B6  28C5               	goto	l3800
   878  08B7  300F               	movlw	15
   879                           
   880                           ;main.c: 414: loadDistance = 1;
   881  08B8  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
   882                           
   883                           ;main.c: 415: auxDistance = I2C_buffer.data.DISTANCE;
   884  08B9  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
   885  08BA  0086               	movwf	6
   886  08BB  0187               	clrf	7
   887  08BC  3F40               	moviw [0]fsr1
   888  08BD  0020               	movlb	0	; select bank0
   889  08BE  00EB               	movwf	_auxDistance
   890  08BF  3F41               	moviw [1]fsr1
   891  08C0  00EC               	movwf	_auxDistance+1
   892  08C1  3F42               	moviw [2]fsr1
   893  08C2  00ED               	movwf	_auxDistance+2
   894  08C3  3F43               	moviw [3]fsr1
   895  08C4  29B9               	goto	L2
   896  08C5                     l3800:	
   897                           ;main.c: 417: } else {
   898                           
   899                           ;main.c: 416: I2C_buffer.data.DISTANCE = 0;
   900                           
   901                           
   902                           ;main.c: 418: if (auxDistance > 0) {
   903  08C5  0020               	movlb	0	; select bank0
   904  08C6  1BEE               	btfsc	_auxDistance+3,7
   905  08C7  290A               	goto	l3812
   906  08C8  086E               	movf	_auxDistance+3,w
   907  08C9  1D03               	btfss	3,2
   908  08CA  28D5               	goto	l3802
   909  08CB  086D               	movf	_auxDistance+2,w
   910  08CC  1D03               	btfss	3,2
   911  08CD  28D5               	goto	l3802
   912  08CE  086C               	movf	_auxDistance+1,w
   913  08CF  1D03               	btfss	3,2
   914  08D0  28D5               	goto	l3802
   915  08D1  3001               	movlw	1
   916  08D2  026B               	subwf	_auxDistance,w
   917  08D3  1C03               	btfss	3,0
   918  08D4  290A               	goto	l3812
   919  08D5                     l3802:	
   920                           
   921                           ;main.c: 419: calculate_pidM(abs(I2C_buffer.data.SPEED));
   922  08D5  0021               	movlb	1	; select bank1
   923  08D6  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
   924  08D7  0020               	movlb	0	; select bank0
   925  08D8  00A3               	movwf	abs@a+1
   926  08D9  0021               	movlb	1	; select bank1
   927  08DA  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
   928  08DB  0020               	movlb	0	; select bank0
   929  08DC  00A2               	movwf	abs@a
   930  08DD  23EC               	fcall	_abs
   931  08DE  0823               	movf	?_abs+1,w
   932  08DF  00E6               	movwf	calculate_pidM@set+1
   933  08E0  0822               	movf	?_abs,w
   934  08E1  00E5               	movwf	calculate_pidM@set
   935  08E2  3180  20C0  3188   	fcall	_calculate_pidM
   936                           
   937                           ;main.c: 420: if (auxDistance <= I2C_buffer.data.DISTANCE) {
   938  08E5  0021               	movlb	1	; select bank1
   939  08E6  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
   940  08E7  3A80               	xorlw	128
   941  08E8  00EA               	movwf	??_main^(0+128)
   942  08E9  0020               	movlb	0	; select bank0
   943  08EA  086E               	movf	_auxDistance+3,w
   944  08EB  3A80               	xorlw	128
   945  08EC  0021               	movlb	1	; select bank1
   946  08ED  026A               	subwf	??_main^(0+128),w
   947  08EE  1D03               	skipz
   948  08EF  2900               	goto	u4553
   949  08F0  0020               	movlb	0	; select bank0
   950  08F1  086D               	movf	_auxDistance+2,w
   951  08F2  0021               	movlb	1	; select bank1
   952  08F3  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
   953  08F4  1D03               	skipz
   954  08F5  2900               	goto	u4553
   955  08F6  0020               	movlb	0	; select bank0
   956  08F7  086C               	movf	_auxDistance+1,w
   957  08F8  0021               	movlb	1	; select bank1
   958  08F9  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
   959  08FA  1D03               	skipz
   960  08FB  2900               	goto	u4553
   961  08FC  0020               	movlb	0	; select bank0
   962  08FD  086B               	movf	_auxDistance,w
   963  08FE  0021               	movlb	1	; select bank1
   964  08FF  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
   965  0900                     u4553:	
   966  0900  1C03               	skipc
   967  0901  290A               	goto	l3812
   968                           
   969                           ;main.c: 421: loadDistance = 0;
   970  0902  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
   971                           
   972                           ;main.c: 422: M_control(0);
   973  0903  0020               	movlb	0	; select bank0
   974  0904  01AC               	clrf	M_control@ctr
   975  0905  01AD               	clrf	M_control@ctr+1
   976  0906  2647  3188         	fcall	_M_control
   977                           
   978                           ;main.c: 423: I2C_buffer.data.START_STOP = 0;
   979  0908  0021               	movlb	1	; select bank1
   980  0909  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
   981  090A                     l3812:	
   982                           
   983                           ;main.c: 424: };main.c: 425: };main.c: 426: if (auxDistance < 0) {
   984  090A  0020               	movlb	0	; select bank0
   985  090B  1FEE               	btfss	_auxDistance+3,7
   986  090C  2AE8               	goto	l3926
   987                           
   988                           ;main.c: 427: calculate_pidM(abs(I2C_buffer.data.SPEED)*-1);
   989  090D  0021               	movlb	1	; select bank1
   990  090E  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
   991  090F  0020               	movlb	0	; select bank0
   992  0910  00A3               	movwf	abs@a+1
   993  0911  0021               	movlb	1	; select bank1
   994  0912  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
   995  0913  0020               	movlb	0	; select bank0
   996  0914  00A2               	movwf	abs@a
   997  0915  23EC               	fcall	_abs
   998  0916  0922               	comf	?_abs,w
   999  0917  0021               	movlb	1	; select bank1
  1000  0918  00EA               	movwf	??_main^(0+128)
  1001  0919  0020               	movlb	0	; select bank0
  1002  091A  0923               	comf	?_abs+1,w
  1003  091B  0021               	movlb	1	; select bank1
  1004  091C  00EB               	movwf	(??_main^(0+128)+1)
  1005  091D  0AEA               	incf	??_main^(0+128),f
  1006  091E  1903               	skipnz
  1007  091F  0AEB               	incf	(??_main^(0+128)+1),f
  1008  0920  086A               	movf	??_main^(0+128),w
  1009  0921  0020               	movlb	0	; select bank0
  1010  0922  00E5               	movwf	calculate_pidM@set
  1011  0923  0021               	movlb	1	; select bank1
  1012  0924  086B               	movf	(??_main+1)^(0+128),w
  1013  0925  0020               	movlb	0	; select bank0
  1014  0926  00E6               	movwf	calculate_pidM@set+1
  1015  0927  3180  20C0  3188   	fcall	_calculate_pidM
  1016  092A  2A25               	goto	L5
  1017  092B                     l3824:	
  1018                           ;main.c: 432: };main.c: 433: };main.c: 434: };main.c: 435: break;
  1019                           
  1020                           ;main.c: 431: I2C_buffer.data.START_STOP = 0;
  1021                           
  1022                           ;main.c: 430: M_control(0);
  1023                           
  1024                           ;main.c: 429: loadDistance = 0;
  1025                           
  1026                           ;main.c: 428: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1027                           
  1028                           
  1029                           ;main.c: 437: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1030  092B  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1031  092C  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1032  092D  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1033  092E  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1034  092F  1D03               	btfss	3,2
  1035  0930  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1036  0931  2949               	goto	l3836
  1037  0932  300F               	movlw	15
  1038                           
  1039                           ;main.c: 438: loadDistance = 1;
  1040  0933  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1041                           
  1042                           ;main.c: 439: auxDistance = I2C_buffer.data.DISTANCE;
  1043  0934  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1044  0935  0086               	movwf	6
  1045  0936  0187               	clrf	7
  1046  0937  3F40               	moviw [0]fsr1
  1047  0938  0020               	movlb	0	; select bank0
  1048  0939  00EB               	movwf	_auxDistance
  1049  093A  3F41               	moviw [1]fsr1
  1050  093B  00EC               	movwf	_auxDistance+1
  1051  093C  3F42               	moviw [2]fsr1
  1052  093D  00ED               	movwf	_auxDistance+2
  1053  093E  3F43               	moviw [3]fsr1
  1054  093F                     L1:	
  1055  093F  00EE               	movwf	_auxDistance+3
  1056                           
  1057                           ;main.c: 440: I2C_buffer.data.DISTANCE = 0;
  1058  0940  0021               	movlb	1	; select bank1
  1059  0941  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  1060  0942  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  1061  0943  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  1062  0944  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  1063  0945                     l3834:	
  1064                           
  1065                           ;main.c: 441: stable = 0;
  1066  0945  0021               	movlb	1	; select bank1
  1067  0946  01CB               	clrf	_stable^(0+128)
  1068  0947  01CC               	clrf	(_stable+1)^(0+128)
  1069                           
  1070                           ;main.c: 442: } else {
  1071  0948  2AE8               	goto	l3926
  1072  0949                     l3836:	
  1073                           
  1074                           ;main.c: 443: calculate_pidM(calculate_pidA(auxDistance));
  1075  0949  0020               	movlb	0	; select bank0
  1076  094A  086E               	movf	_auxDistance+3,w
  1077  094B  00E2               	movwf	calculate_pidA@set+3
  1078  094C  086D               	movf	_auxDistance+2,w
  1079  094D  00E1               	movwf	calculate_pidA@set+2
  1080  094E  086C               	movf	_auxDistance+1,w
  1081  094F  00E0               	movwf	calculate_pidA@set+1
  1082  0950  086B               	movf	_auxDistance,w
  1083  0951  00DF               	movwf	calculate_pidA@set
  1084  0952  23FA               	fcall	_calculate_pidA
  1085  0953  0860               	movf	?_calculate_pidA+1,w
  1086  0954  00E6               	movwf	calculate_pidM@set+1
  1087  0955  085F               	movf	?_calculate_pidA,w
  1088  0956  00E5               	movwf	calculate_pidM@set
  1089  0957  3180  20C0  3188   	fcall	_calculate_pidM
  1090                           
  1091                           ;main.c: 444: if (auxDistance >= I2C_buffer.data.DISTANCE - 10 && auxDistance <= I2C_buf
      +                          fer.data.DISTANCE + 10) {
  1092  095A  30F6               	movlw	246
  1093  095B  0021               	movlb	1	; select bank1
  1094  095C  00EA               	movwf	??_main^(0+128)
  1095  095D  30FF               	movlw	255
  1096  095E  00EB               	movwf	(??_main^(0+128)+1)
  1097  095F  00EC               	movwf	(??_main^(0+128)+2)
  1098  0960  00ED               	movwf	(??_main^(0+128)+3)
  1099  0961  30AF               	movlw	((low (_I2C_buffer| 0))& (0+255)+15)
  1100  0962  0086               	movwf	6
  1101  0963  0187               	clrf	7
  1102  0964  3F40               	moviw [0]fsr1
  1103  0965  07EA               	addwf	??_main^(0+128),f
  1104  0966  3F41               	moviw [1]fsr1
  1105  0967  3DEB               	addwfc	(??_main^(0+128)+1),f
  1106  0968  3F42               	moviw [2]fsr1
  1107  0969  3DEC               	addwfc	(??_main^(0+128)+2),f
  1108  096A  3F43               	moviw [3]fsr1
  1109  096B  3DED               	addwfc	(??_main^(0+128)+3),f
  1110  096C  0020               	movlb	0	; select bank0
  1111  096D  086E               	movf	_auxDistance+3,w
  1112  096E  3A80               	xorlw	128
  1113  096F  0021               	movlb	1	; select bank1
  1114  0970  00EE               	movwf	(??_main+4)^(0+128)
  1115  0971  086D               	movf	(??_main+3)^(0+128),w
  1116  0972  3A80               	xorlw	128
  1117  0973  026E               	subwf	(??_main+4)^(0+128),w
  1118  0974  0020               	movlb	0	; select bank0
  1119  0975  1D03               	skipz
  1120  0976  2987               	goto	u4603
  1121  0977  0021               	movlb	1	; select bank1
  1122  0978  086C               	movf	(??_main+2)^(0+128),w
  1123  0979  0020               	movlb	0	; select bank0
  1124  097A  026D               	subwf	_auxDistance+2,w
  1125  097B  1D03               	skipz
  1126  097C  2987               	goto	u4603
  1127  097D  0021               	movlb	1	; select bank1
  1128  097E  086B               	movf	(??_main+1)^(0+128),w
  1129  097F  0020               	movlb	0	; select bank0
  1130  0980  026C               	subwf	_auxDistance+1,w
  1131  0981  1D03               	skipz
  1132  0982  2987               	goto	u4603
  1133  0983  0021               	movlb	1	; select bank1
  1134  0984  086A               	movf	??_main^(0+128),w
  1135  0985  0020               	movlb	0	; select bank0
  1136  0986  026B               	subwf	_auxDistance,w
  1137  0987                     u4603:	
  1138  0987  1C03               	skipc
  1139  0988  2945               	goto	l3834
  1140  0989  300A               	movlw	10
  1141  098A  0021               	movlb	1	; select bank1
  1142  098B  00EA               	movwf	??_main^(0+128)
  1143  098C  300F               	movlw	15
  1144  098D  01EB               	clrf	(??_main^(0+128)+1)
  1145  098E  01EC               	clrf	(??_main^(0+128)+2)
  1146  098F  01ED               	clrf	(??_main^(0+128)+3)
  1147  0990  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1148  0991  0086               	movwf	6
  1149  0992  0187               	clrf	7
  1150  0993  3F40               	moviw [0]fsr1
  1151  0994  07EA               	addwf	??_main^(0+128),f
  1152  0995  3F41               	moviw [1]fsr1
  1153  0996  3DEB               	addwfc	(??_main^(0+128)+1),f
  1154  0997  3F42               	moviw [2]fsr1
  1155  0998  3DEC               	addwfc	(??_main^(0+128)+2),f
  1156  0999  3F43               	moviw [3]fsr1
  1157  099A  2AAA               	goto	L4
  1158  099B                     l3854:	
  1159                           ;main.c: 450: I2C_buffer.data.START_STOP = 0;
  1160                           
  1161                           ;main.c: 449: M_control(0);
  1162                           
  1163                           ;main.c: 447: {;main.c: 448: loadDistance = 0;
  1164                           
  1165                           ;main.c: 446: if (stable > 50)
  1166                           
  1167                           ;main.c: 445: stable++;
  1168                           
  1169                           
  1170                           ;main.c: 458: pre_pidM(I2C_buffer.data.SPEED);
  1171  099B  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1172  099C  0020               	movlb	0	; select bank0
  1173  099D  00E8               	movwf	pre_pidM@set+1
  1174  099E  0021               	movlb	1	; select bank1
  1175  099F  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1176  09A0  0020               	movlb	0	; select bank0
  1177  09A1  00E7               	movwf	pre_pidM@set
  1178  09A2  26EB  3188         	fcall	_pre_pidM
  1179                           
  1180                           ;main.c: 459: break;
  1181  09A4  2AE8               	goto	l3926
  1182  09A5                     l3856:	
  1183                           
  1184                           ;main.c: 461: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1185  09A5  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1186  09A6  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1187  09A7  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1188  09A8  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1189  09A9  1D03               	btfss	3,2
  1190  09AA  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1191  09AB  29C0               	goto	l3866
  1192  09AC  300F               	movlw	15
  1193                           
  1194                           ;main.c: 462: loadDistance = 1;
  1195  09AD  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1196                           
  1197                           ;main.c: 463: auxDistance = I2C_buffer.data.DISTANCE;
  1198  09AE  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1199  09AF  0086               	movwf	6
  1200  09B0  0187               	clrf	7
  1201  09B1  3F40               	moviw [0]fsr1
  1202  09B2  0020               	movlb	0	; select bank0
  1203  09B3  00EB               	movwf	_auxDistance
  1204  09B4  3F41               	moviw [1]fsr1
  1205  09B5  00EC               	movwf	_auxDistance+1
  1206  09B6  3F42               	moviw [2]fsr1
  1207  09B7  00ED               	movwf	_auxDistance+2
  1208  09B8  3F43               	moviw [3]fsr1
  1209  09B9                     L2:	
  1210  09B9  00EE               	movwf	_auxDistance+3
  1211                           
  1212                           ;main.c: 464: I2C_buffer.data.DISTANCE = 0;
  1213  09BA  0021               	movlb	1	; select bank1
  1214  09BB  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  1215  09BC  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  1216  09BD  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  1217  09BE  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  1218                           
  1219                           ;main.c: 465: } else {
  1220  09BF  2AE8               	goto	l3926
  1221  09C0                     l3866:	
  1222                           
  1223                           ;main.c: 466: if (auxDistance > 0) {
  1224  09C0  0020               	movlb	0	; select bank0
  1225  09C1  1BEE               	btfsc	_auxDistance+3,7
  1226  09C2  2A05               	goto	l3878
  1227  09C3  086E               	movf	_auxDistance+3,w
  1228  09C4  1D03               	btfss	3,2
  1229  09C5  29D0               	goto	l3868
  1230  09C6  086D               	movf	_auxDistance+2,w
  1231  09C7  1D03               	btfss	3,2
  1232  09C8  29D0               	goto	l3868
  1233  09C9  086C               	movf	_auxDistance+1,w
  1234  09CA  1D03               	btfss	3,2
  1235  09CB  29D0               	goto	l3868
  1236  09CC  3001               	movlw	1
  1237  09CD  026B               	subwf	_auxDistance,w
  1238  09CE  1C03               	btfss	3,0
  1239  09CF  2A05               	goto	l3878
  1240  09D0                     l3868:	
  1241                           
  1242                           ;main.c: 467: pre_pidM(abs(I2C_buffer.data.SPEED));
  1243  09D0  0021               	movlb	1	; select bank1
  1244  09D1  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1245  09D2  0020               	movlb	0	; select bank0
  1246  09D3  00A3               	movwf	abs@a+1
  1247  09D4  0021               	movlb	1	; select bank1
  1248  09D5  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1249  09D6  0020               	movlb	0	; select bank0
  1250  09D7  00A2               	movwf	abs@a
  1251  09D8  23EC  3188         	fcall	_abs
  1252  09DA  0823               	movf	?_abs+1,w
  1253  09DB  00E8               	movwf	pre_pidM@set+1
  1254  09DC  0822               	movf	?_abs,w
  1255  09DD  00E7               	movwf	pre_pidM@set
  1256  09DE  26EB  3188         	fcall	_pre_pidM
  1257                           
  1258                           ;main.c: 468: if (auxDistance <= I2C_buffer.data.DISTANCE) {
  1259  09E0  0021               	movlb	1	; select bank1
  1260  09E1  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1261  09E2  3A80               	xorlw	128
  1262  09E3  00EA               	movwf	??_main^(0+128)
  1263  09E4  0020               	movlb	0	; select bank0
  1264  09E5  086E               	movf	_auxDistance+3,w
  1265  09E6  3A80               	xorlw	128
  1266  09E7  0021               	movlb	1	; select bank1
  1267  09E8  026A               	subwf	??_main^(0+128),w
  1268  09E9  1D03               	skipz
  1269  09EA  29FB               	goto	u4663
  1270  09EB  0020               	movlb	0	; select bank0
  1271  09EC  086D               	movf	_auxDistance+2,w
  1272  09ED  0021               	movlb	1	; select bank1
  1273  09EE  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1274  09EF  1D03               	skipz
  1275  09F0  29FB               	goto	u4663
  1276  09F1  0020               	movlb	0	; select bank0
  1277  09F2  086C               	movf	_auxDistance+1,w
  1278  09F3  0021               	movlb	1	; select bank1
  1279  09F4  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1280  09F5  1D03               	skipz
  1281  09F6  29FB               	goto	u4663
  1282  09F7  0020               	movlb	0	; select bank0
  1283  09F8  086B               	movf	_auxDistance,w
  1284  09F9  0021               	movlb	1	; select bank1
  1285  09FA  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1286  09FB                     u4663:	
  1287  09FB  1C03               	skipc
  1288  09FC  2A05               	goto	l3878
  1289                           
  1290                           ;main.c: 469: loadDistance = 0;
  1291  09FD  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1292                           
  1293                           ;main.c: 470: M_control(0);
  1294  09FE  0020               	movlb	0	; select bank0
  1295  09FF  01AC               	clrf	M_control@ctr
  1296  0A00  01AD               	clrf	M_control@ctr+1
  1297  0A01  2647  3188         	fcall	_M_control
  1298                           
  1299                           ;main.c: 471: I2C_buffer.data.START_STOP = 0;
  1300  0A03  0021               	movlb	1	; select bank1
  1301  0A04  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1302  0A05                     l3878:	
  1303                           
  1304                           ;main.c: 472: };main.c: 473: };main.c: 474: if (auxDistance < 0) {
  1305  0A05  0020               	movlb	0	; select bank0
  1306  0A06  1FEE               	btfss	_auxDistance+3,7
  1307  0A07  2AE8               	goto	l3926
  1308                           
  1309                           ;main.c: 475: pre_pidM(abs(I2C_buffer.data.SPEED)*-1);
  1310  0A08  0021               	movlb	1	; select bank1
  1311  0A09  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1312  0A0A  0020               	movlb	0	; select bank0
  1313  0A0B  00A3               	movwf	abs@a+1
  1314  0A0C  0021               	movlb	1	; select bank1
  1315  0A0D  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1316  0A0E  0020               	movlb	0	; select bank0
  1317  0A0F  00A2               	movwf	abs@a
  1318  0A10  23EC  3188         	fcall	_abs
  1319  0A12  0922               	comf	?_abs,w
  1320  0A13  0021               	movlb	1	; select bank1
  1321  0A14  00EA               	movwf	??_main^(0+128)
  1322  0A15  0020               	movlb	0	; select bank0
  1323  0A16  0923               	comf	?_abs+1,w
  1324  0A17  0021               	movlb	1	; select bank1
  1325  0A18  00EB               	movwf	(??_main^(0+128)+1)
  1326  0A19  0AEA               	incf	??_main^(0+128),f
  1327  0A1A  1903               	skipnz
  1328  0A1B  0AEB               	incf	(??_main^(0+128)+1),f
  1329  0A1C  086A               	movf	??_main^(0+128),w
  1330  0A1D  0020               	movlb	0	; select bank0
  1331  0A1E  00E7               	movwf	pre_pidM@set
  1332  0A1F  0021               	movlb	1	; select bank1
  1333  0A20  086B               	movf	(??_main+1)^(0+128),w
  1334  0A21  0020               	movlb	0	; select bank0
  1335  0A22  00E8               	movwf	pre_pidM@set+1
  1336  0A23  26EB  3188         	fcall	_pre_pidM
  1337  0A25                     L5:	
  1338                           
  1339                           ;main.c: 476: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1340  0A25  0020               	movlb	0	; select bank0
  1341  0A26  086E               	movf	_auxDistance+3,w
  1342  0A27  3A80               	xorlw	128
  1343  0A28  0021               	movlb	1	; select bank1
  1344  0A29  00EA               	movwf	??_main^(0+128)
  1345  0A2A  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1346  0A2B  3A80               	xorlw	128
  1347  0A2C  026A               	subwf	??_main^(0+128),w
  1348  0A2D  0020               	movlb	0	; select bank0
  1349  0A2E  1D03               	skipz
  1350  0A2F  2A40               	goto	u4683
  1351  0A30  0021               	movlb	1	; select bank1
  1352  0A31  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1353  0A32  0020               	movlb	0	; select bank0
  1354  0A33  026D               	subwf	_auxDistance+2,w
  1355  0A34  1D03               	skipz
  1356  0A35  2A40               	goto	u4683
  1357  0A36  0021               	movlb	1	; select bank1
  1358  0A37  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1359  0A38  0020               	movlb	0	; select bank0
  1360  0A39  026C               	subwf	_auxDistance+1,w
  1361  0A3A  1D03               	skipz
  1362  0A3B  2A40               	goto	u4683
  1363  0A3C  0021               	movlb	1	; select bank1
  1364  0A3D  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  1365  0A3E  0020               	movlb	0	; select bank0
  1366  0A3F  026B               	subwf	_auxDistance,w
  1367  0A40                     u4683:	
  1368  0A40  1C03               	skipc
  1369  0A41  2AE8               	goto	l3926
  1370                           
  1371                           ;main.c: 477: loadDistance = 0;
  1372  0A42  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1373  0A43  2AD7               	goto	L3
  1374  0A44                     l3890:	
  1375                           ;main.c: 479: I2C_buffer.data.START_STOP = 0;
  1376                           
  1377                           ;main.c: 478: M_control(0);
  1378                           
  1379                           
  1380                           ;main.c: 485: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1381  0A44  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1382  0A45  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1383  0A46  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1384  0A47  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1385  0A48  1D03               	btfss	3,2
  1386  0A49  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1387  0A4A  2A59               	goto	l3902
  1388  0A4B  300F               	movlw	15
  1389                           
  1390                           ;main.c: 486: loadDistance = 1;
  1391  0A4C  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1392                           
  1393                           ;main.c: 487: auxDistance = I2C_buffer.data.DISTANCE;
  1394  0A4D  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1395  0A4E  0086               	movwf	6
  1396  0A4F  0187               	clrf	7
  1397  0A50  3F40               	moviw [0]fsr1
  1398  0A51  0020               	movlb	0	; select bank0
  1399  0A52  00EB               	movwf	_auxDistance
  1400  0A53  3F41               	moviw [1]fsr1
  1401  0A54  00EC               	movwf	_auxDistance+1
  1402  0A55  3F42               	moviw [2]fsr1
  1403  0A56  00ED               	movwf	_auxDistance+2
  1404  0A57  3F43               	moviw [3]fsr1
  1405  0A58  293F               	goto	L1
  1406  0A59                     l3902:	
  1407                           ;main.c: 488: I2C_buffer.data.DISTANCE = 0;
  1408                           
  1409                           
  1410                           ;main.c: 491: pre_pidM(calculate_pidA(auxDistance));
  1411  0A59  0020               	movlb	0	; select bank0
  1412  0A5A  086E               	movf	_auxDistance+3,w
  1413  0A5B  00E2               	movwf	calculate_pidA@set+3
  1414  0A5C  086D               	movf	_auxDistance+2,w
  1415  0A5D  00E1               	movwf	calculate_pidA@set+2
  1416  0A5E  086C               	movf	_auxDistance+1,w
  1417  0A5F  00E0               	movwf	calculate_pidA@set+1
  1418  0A60  086B               	movf	_auxDistance,w
  1419  0A61  00DF               	movwf	calculate_pidA@set
  1420  0A62  23FA  3188         	fcall	_calculate_pidA
  1421  0A64  0860               	movf	?_calculate_pidA+1,w
  1422  0A65  00E8               	movwf	pre_pidM@set+1
  1423  0A66  085F               	movf	?_calculate_pidA,w
  1424  0A67  00E7               	movwf	pre_pidM@set
  1425  0A68  26EB  3188         	fcall	_pre_pidM
  1426                           
  1427                           ;main.c: 492: if (auxDistance >= I2C_buffer.data.DISTANCE - 10 && auxDistance <= I2C_buf
      +                          fer.data.DISTANCE + 10) {
  1428  0A6A  30F6               	movlw	246
  1429  0A6B  0021               	movlb	1	; select bank1
  1430  0A6C  00EA               	movwf	??_main^(0+128)
  1431  0A6D  30FF               	movlw	255
  1432  0A6E  00EB               	movwf	(??_main^(0+128)+1)
  1433  0A6F  00EC               	movwf	(??_main^(0+128)+2)
  1434  0A70  00ED               	movwf	(??_main^(0+128)+3)
  1435  0A71  30AF               	movlw	((low (_I2C_buffer| 0))& (0+255)+15)
  1436  0A72  0086               	movwf	6
  1437  0A73  0187               	clrf	7
  1438  0A74  3F40               	moviw [0]fsr1
  1439  0A75  07EA               	addwf	??_main^(0+128),f
  1440  0A76  3F41               	moviw [1]fsr1
  1441  0A77  3DEB               	addwfc	(??_main^(0+128)+1),f
  1442  0A78  3F42               	moviw [2]fsr1
  1443  0A79  3DEC               	addwfc	(??_main^(0+128)+2),f
  1444  0A7A  3F43               	moviw [3]fsr1
  1445  0A7B  3DED               	addwfc	(??_main^(0+128)+3),f
  1446  0A7C  0020               	movlb	0	; select bank0
  1447  0A7D  086E               	movf	_auxDistance+3,w
  1448  0A7E  3A80               	xorlw	128
  1449  0A7F  0021               	movlb	1	; select bank1
  1450  0A80  00EE               	movwf	(??_main+4)^(0+128)
  1451  0A81  086D               	movf	(??_main+3)^(0+128),w
  1452  0A82  3A80               	xorlw	128
  1453  0A83  026E               	subwf	(??_main+4)^(0+128),w
  1454  0A84  0020               	movlb	0	; select bank0
  1455  0A85  1D03               	skipz
  1456  0A86  2A97               	goto	u4713
  1457  0A87  0021               	movlb	1	; select bank1
  1458  0A88  086C               	movf	(??_main+2)^(0+128),w
  1459  0A89  0020               	movlb	0	; select bank0
  1460  0A8A  026D               	subwf	_auxDistance+2,w
  1461  0A8B  1D03               	skipz
  1462  0A8C  2A97               	goto	u4713
  1463  0A8D  0021               	movlb	1	; select bank1
  1464  0A8E  086B               	movf	(??_main+1)^(0+128),w
  1465  0A8F  0020               	movlb	0	; select bank0
  1466  0A90  026C               	subwf	_auxDistance+1,w
  1467  0A91  1D03               	skipz
  1468  0A92  2A97               	goto	u4713
  1469  0A93  0021               	movlb	1	; select bank1
  1470  0A94  086A               	movf	??_main^(0+128),w
  1471  0A95  0020               	movlb	0	; select bank0
  1472  0A96  026B               	subwf	_auxDistance,w
  1473  0A97                     u4713:	
  1474  0A97  1C03               	skipc
  1475  0A98  2945               	goto	l3834
  1476  0A99  300A               	movlw	10
  1477  0A9A  0021               	movlb	1	; select bank1
  1478  0A9B  00EA               	movwf	??_main^(0+128)
  1479  0A9C  300F               	movlw	15
  1480  0A9D  01EB               	clrf	(??_main^(0+128)+1)
  1481  0A9E  01EC               	clrf	(??_main^(0+128)+2)
  1482  0A9F  01ED               	clrf	(??_main^(0+128)+3)
  1483  0AA0  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1484  0AA1  0086               	movwf	6
  1485  0AA2  0187               	clrf	7
  1486  0AA3  3F40               	moviw [0]fsr1
  1487  0AA4  07EA               	addwf	??_main^(0+128),f
  1488  0AA5  3F41               	moviw [1]fsr1
  1489  0AA6  3DEB               	addwfc	(??_main^(0+128)+1),f
  1490  0AA7  3F42               	moviw [2]fsr1
  1491  0AA8  3DEC               	addwfc	(??_main^(0+128)+2),f
  1492  0AA9  3F43               	moviw [3]fsr1
  1493  0AAA                     L4:	
  1494  0AAA  3DED               	addwfc	(??_main^(0+128)+3),f
  1495  0AAB  086D               	movf	(??_main+3)^(0+128),w
  1496  0AAC  3A80               	xorlw	128
  1497  0AAD  00EE               	movwf	(??_main+4)^(0+128)
  1498  0AAE  0020               	movlb	0	; select bank0
  1499  0AAF  086E               	movf	_auxDistance+3,w
  1500  0AB0  3A80               	xorlw	128
  1501  0AB1  0021               	movlb	1	; select bank1
  1502  0AB2  026E               	subwf	(??_main+4)^(0+128),w
  1503  0AB3  1D03               	skipz
  1504  0AB4  2AC5               	goto	u4723
  1505  0AB5  0020               	movlb	0	; select bank0
  1506  0AB6  086D               	movf	_auxDistance+2,w
  1507  0AB7  0021               	movlb	1	; select bank1
  1508  0AB8  026C               	subwf	(??_main+2)^(0+128),w
  1509  0AB9  1D03               	skipz
  1510  0ABA  2AC5               	goto	u4723
  1511  0ABB  0020               	movlb	0	; select bank0
  1512  0ABC  086C               	movf	_auxDistance+1,w
  1513  0ABD  0021               	movlb	1	; select bank1
  1514  0ABE  026B               	subwf	(??_main+1)^(0+128),w
  1515  0ABF  1D03               	skipz
  1516  0AC0  2AC5               	goto	u4723
  1517  0AC1  0020               	movlb	0	; select bank0
  1518  0AC2  086B               	movf	_auxDistance,w
  1519  0AC3  0021               	movlb	1	; select bank1
  1520  0AC4  026A               	subwf	??_main^(0+128),w
  1521  0AC5                     u4723:	
  1522  0AC5  1C03               	skipc
  1523  0AC6  2945               	goto	l3834
  1524                           
  1525                           ;main.c: 493: stable++;
  1526  0AC7  0ACB               	incf	_stable^(0+128),f
  1527  0AC8  1903               	skipnz
  1528  0AC9  0ACC               	incf	(_stable+1)^(0+128),f
  1529                           
  1530                           ;main.c: 494: if (stable > 50)
  1531  0ACA  084C               	movf	(_stable+1)^(0+128),w
  1532  0ACB  3A80               	xorlw	128
  1533  0ACC  00EA               	movwf	??_main^(0+128)
  1534  0ACD  3080               	movlw	128
  1535  0ACE  026A               	subwf	??_main^(0+128),w
  1536  0ACF  1D03               	skipz
  1537  0AD0  2AD3               	goto	u4735
  1538  0AD1  3033               	movlw	51
  1539  0AD2  024B               	subwf	_stable^(0+128),w
  1540  0AD3                     u4735:	
  1541  0AD3  1C03               	skipc
  1542  0AD4  2AE8               	goto	l3926
  1543                           
  1544                           ;main.c: 495: {;main.c: 496: loadDistance = 0;
  1545  0AD5  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1546                           
  1547                           ;main.c: 497: M_control(0);
  1548  0AD6  0020               	movlb	0	; select bank0
  1549  0AD7                     L3:	
  1550  0AD7  01AC               	clrf	M_control@ctr
  1551  0AD8  01AD               	clrf	M_control@ctr+1
  1552  0AD9  2647  3188         	fcall	_M_control
  1553                           
  1554                           ;main.c: 498: I2C_buffer.data.START_STOP = 0;
  1555  0ADB  0021               	movlb	1	; select bank1
  1556  0ADC  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1557  0ADD  2AE8               	goto	l3926
  1558  0ADE                     l3924:	
  1559  0ADE  0824               	movf	(_I2C_buffer^(0+128)+4),w	;volatile
  1560                           
  1561                           ; Switch size 1, requested type "speed"
  1562                           ; Number of cases is 8, Range of values is 0 to 7
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; direct_byte           22     6 (fixed)
  1566                           ; simple_byte           25    13 (average)
  1567                           ; jumptable            260     6 (fixed)
  1568                           ;	Chosen strategy is direct_byte
  1569  0ADF  0084               	movwf	4
  1570  0AE0  3008               	movlw	8
  1571  0AE1  0204               	subwf	4,w
  1572  0AE2  1803               	skipnc
  1573  0AE3  2895               	goto	l3784
  1574  0AE4  3186               	movlp	high S3986
  1575  0AE5  3504               	lslf	4,w
  1576  0AE6  3ED1               	addlw	low S3986
  1577  0AE7  0082               	movwf	2
  1578  0AE8                     l3926:	
  1579                           
  1580                           ;main.c: 509: _delay((unsigned long)((5)*(32000000/4000.0)));
  1581  0AE8  3034               	movlw	52
  1582  0AE9  0021               	movlb	1	; select bank1
  1583  0AEA  00EA               	movwf	??_main^(0+128)
  1584  0AEB  30F1               	movlw	241
  1585  0AEC                     u4787:	
  1586  0AEC  0B89               	decfsz	9,f
  1587  0AED  2AEC               	goto	u4787
  1588  0AEE  0BEA               	decfsz	??_main^(0+128),f
  1589  0AEF  2AEC               	goto	u4787
  1590  0AF0  3200               	nop2
  1591                           
  1592                           ;main.c: 510: } else {
  1593  0AF1  2B08               	goto	l3938
  1594  0AF2                     l3928:	
  1595                           
  1596                           ;main.c: 511: M_control(0);
  1597  0AF2  0020               	movlb	0	; select bank0
  1598  0AF3  01AC               	clrf	M_control@ctr
  1599  0AF4  01AD               	clrf	M_control@ctr+1
  1600  0AF5  2647  3188         	fcall	_M_control
  1601                           
  1602                           ;main.c: 512: accumulatorM = 0;
  1603  0AF7  0022               	movlb	2	; select bank2
  1604  0AF8  01AC               	clrf	_accumulatorM^(0+256)
  1605  0AF9  01AD               	clrf	(_accumulatorM+1)^(0+256)
  1606  0AFA  01AE               	clrf	(_accumulatorM+2)^(0+256)
  1607  0AFB  01AF               	clrf	(_accumulatorM+3)^(0+256)
  1608                           
  1609                           ;main.c: 513: lasterrorM = 0;
  1610  0AFC  01A8               	clrf	_lasterrorM^(0+256)
  1611  0AFD  01A9               	clrf	(_lasterrorM+1)^(0+256)
  1612  0AFE  01AA               	clrf	(_lasterrorM+2)^(0+256)
  1613  0AFF  01AB               	clrf	(_lasterrorM+3)^(0+256)
  1614                           
  1615                           ;main.c: 514: accumulatorA = 0;
  1616  0B00  01A4               	clrf	_accumulatorA^(0+256)
  1617  0B01  01A5               	clrf	(_accumulatorA+1)^(0+256)
  1618  0B02  01A6               	clrf	(_accumulatorA+2)^(0+256)
  1619  0B03  01A7               	clrf	(_accumulatorA+3)^(0+256)
  1620                           
  1621                           ;main.c: 515: lasterrorA = 0;
  1622  0B04  01A0               	clrf	_lasterrorA^(0+256)
  1623  0B05  01A1               	clrf	(_lasterrorA+1)^(0+256)
  1624  0B06  01A2               	clrf	(_lasterrorA+2)^(0+256)
  1625  0B07  01A3               	clrf	(_lasterrorA+3)^(0+256)
  1626  0B08                     l3938:	
  1627                           
  1628                           ;main.c: 516: };main.c: 517: if (I2C_buffer.data.RESET == 1) {
  1629  0B08  0021               	movlb	1	; select bank1
  1630  0B09  0B26               	decfsz	(_I2C_buffer^(0+128)+6),w	;volatile
  1631  0B0A  2B0C               	goto	l3942
  1632  0B0B  0001               	reset	;# 
  1633  0B0C                     l3942:	
  1634                           
  1635                           ;main.c: 519: };main.c: 520: if (I2C_buffer.data.SAVE == 1) {
  1636  0B0C  0021               	movlb	1	; select bank1
  1637  0B0D  0B25               	decfsz	(_I2C_buffer^(0+128)+5),w	;volatile
  1638  0B0E  2890               	goto	l160
  1639                           
  1640                           ;main.c: 521: eeprom_write(0, I2C_buffer.data.ADDRESS);
  1641  0B0F  0821               	movf	(_I2C_buffer^(0+128)+1),w	;volatile
  1642  0B10  0020               	movlb	0	; select bank0
  1643  0B11  00A2               	movwf	eeprom_write@value
  1644  0B12  3000               	movlw	0
  1645  0B13  262A  3188         	fcall	_eeprom_write
  1646                           
  1647                           ;main.c: 522: eeprom_write(1, I2C_buffer.data.IOWPU);
  1648  0B15  0021               	movlb	1	; select bank1
  1649  0B16  0823               	movf	(_I2C_buffer^(0+128)+3),w	;volatile
  1650  0B17  0020               	movlb	0	; select bank0
  1651  0B18  00A2               	movwf	eeprom_write@value
  1652  0B19  3001               	movlw	1
  1653  0B1A  262A  3188         	fcall	_eeprom_write
  1654                           
  1655                           ;main.c: 523: eeprom_write(2, I2C_buffer.byte[0x07]);
  1656  0B1C  0021               	movlb	1	; select bank1
  1657  0B1D  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  1658  0B1E  0020               	movlb	0	; select bank0
  1659  0B1F  00A2               	movwf	eeprom_write@value
  1660  0B20  3002               	movlw	2
  1661  0B21  262A  3188         	fcall	_eeprom_write
  1662                           
  1663                           ;main.c: 524: eeprom_write(3, I2C_buffer.byte[0x08]);
  1664  0B23  0021               	movlb	1	; select bank1
  1665  0B24  0828               	movf	(_I2C_buffer^(0+128)+8),w	;volatile
  1666  0B25  0020               	movlb	0	; select bank0
  1667  0B26  00A2               	movwf	eeprom_write@value
  1668  0B27  3003               	movlw	3
  1669  0B28  262A  3188         	fcall	_eeprom_write
  1670                           
  1671                           ;main.c: 525: eeprom_write(4, I2C_buffer.byte[0x09]);
  1672  0B2A  0021               	movlb	1	; select bank1
  1673  0B2B  0829               	movf	(_I2C_buffer^(0+128)+9),w	;volatile
  1674  0B2C  0020               	movlb	0	; select bank0
  1675  0B2D  00A2               	movwf	eeprom_write@value
  1676  0B2E  3004               	movlw	4
  1677  0B2F  262A  3188         	fcall	_eeprom_write
  1678                           
  1679                           ;main.c: 526: eeprom_write(5, I2C_buffer.byte[0x0A]);
  1680  0B31  0021               	movlb	1	; select bank1
  1681  0B32  082A               	movf	(_I2C_buffer^(0+128)+10),w	;volatile
  1682  0B33  0020               	movlb	0	; select bank0
  1683  0B34  00A2               	movwf	eeprom_write@value
  1684  0B35  3005               	movlw	5
  1685  0B36  262A  3188         	fcall	_eeprom_write
  1686                           
  1687                           ;main.c: 527: eeprom_write(8, I2C_buffer.byte[0x13]);
  1688  0B38  0021               	movlb	1	; select bank1
  1689  0B39  0833               	movf	(_I2C_buffer^(0+128)+19),w	;volatile
  1690  0B3A  0020               	movlb	0	; select bank0
  1691  0B3B  00A2               	movwf	eeprom_write@value
  1692  0B3C  3008               	movlw	8
  1693  0B3D  262A  3188         	fcall	_eeprom_write
  1694                           
  1695                           ;main.c: 528: eeprom_write(9, I2C_buffer.byte[0x14]);
  1696  0B3F  0021               	movlb	1	; select bank1
  1697  0B40  0834               	movf	(_I2C_buffer^(0+128)+20),w	;volatile
  1698  0B41  0020               	movlb	0	; select bank0
  1699  0B42  00A2               	movwf	eeprom_write@value
  1700  0B43  3009               	movlw	9
  1701  0B44  262A  3188         	fcall	_eeprom_write
  1702                           
  1703                           ;main.c: 529: eeprom_write(10, I2C_buffer.byte[0x15]);
  1704  0B46  0021               	movlb	1	; select bank1
  1705  0B47  0835               	movf	(_I2C_buffer^(0+128)+21),w	;volatile
  1706  0B48  0020               	movlb	0	; select bank0
  1707  0B49  00A2               	movwf	eeprom_write@value
  1708  0B4A  300A               	movlw	10
  1709  0B4B  262A  3188         	fcall	_eeprom_write
  1710                           
  1711                           ;main.c: 530: eeprom_write(11, I2C_buffer.byte[0x16]);
  1712  0B4D  0021               	movlb	1	; select bank1
  1713  0B4E  0836               	movf	(_I2C_buffer^(0+128)+22),w	;volatile
  1714  0B4F  0020               	movlb	0	; select bank0
  1715  0B50  00A2               	movwf	eeprom_write@value
  1716  0B51  300B               	movlw	11
  1717  0B52  262A  3188         	fcall	_eeprom_write
  1718                           
  1719                           ;main.c: 531: eeprom_write(12, I2C_buffer.byte[0x17]);
  1720  0B54  0021               	movlb	1	; select bank1
  1721  0B55  0837               	movf	(_I2C_buffer^(0+128)+23),w	;volatile
  1722  0B56  0020               	movlb	0	; select bank0
  1723  0B57  00A2               	movwf	eeprom_write@value
  1724  0B58  300C               	movlw	12
  1725  0B59  262A  3188         	fcall	_eeprom_write
  1726                           
  1727                           ;main.c: 532: eeprom_write(13, I2C_buffer.byte[0x18]);
  1728  0B5B  0021               	movlb	1	; select bank1
  1729  0B5C  0838               	movf	(_I2C_buffer^(0+128)+24),w	;volatile
  1730  0B5D  0020               	movlb	0	; select bank0
  1731  0B5E  00A2               	movwf	eeprom_write@value
  1732  0B5F  300D               	movlw	13
  1733  0B60  262A  3188         	fcall	_eeprom_write
  1734                           
  1735                           ;main.c: 533: eeprom_write(14, I2C_buffer.byte[0x19]);
  1736  0B62  0021               	movlb	1	; select bank1
  1737  0B63  0839               	movf	(_I2C_buffer^(0+128)+25),w	;volatile
  1738  0B64  0020               	movlb	0	; select bank0
  1739  0B65  00A2               	movwf	eeprom_write@value
  1740  0B66  300E               	movlw	14
  1741  0B67  262A  3188         	fcall	_eeprom_write
  1742                           
  1743                           ;main.c: 534: eeprom_write(15, I2C_buffer.byte[0x1A]);
  1744  0B69  0021               	movlb	1	; select bank1
  1745  0B6A  083A               	movf	(_I2C_buffer^(0+128)+26),w	;volatile
  1746  0B6B  0020               	movlb	0	; select bank0
  1747  0B6C  00A2               	movwf	eeprom_write@value
  1748  0B6D  300F               	movlw	15
  1749  0B6E  262A  3188         	fcall	_eeprom_write
  1750                           
  1751                           ;main.c: 535: eeprom_write(16, I2C_buffer.byte[0x1B]);
  1752  0B70  0021               	movlb	1	; select bank1
  1753  0B71  083B               	movf	(_I2C_buffer^(0+128)+27),w	;volatile
  1754  0B72  0020               	movlb	0	; select bank0
  1755  0B73  00A2               	movwf	eeprom_write@value
  1756  0B74  3010               	movlw	16
  1757  0B75  262A  3188         	fcall	_eeprom_write
  1758                           
  1759                           ;main.c: 536: eeprom_write(17, I2C_buffer.byte[0x1C]);
  1760  0B77  0021               	movlb	1	; select bank1
  1761  0B78  083C               	movf	(_I2C_buffer^(0+128)+28),w	;volatile
  1762  0B79  0020               	movlb	0	; select bank0
  1763  0B7A  00A2               	movwf	eeprom_write@value
  1764  0B7B  3011               	movlw	17
  1765  0B7C  262A  3188         	fcall	_eeprom_write
  1766                           
  1767                           ;main.c: 537: eeprom_write(18, I2C_buffer.byte[0x1D]);
  1768  0B7E  0021               	movlb	1	; select bank1
  1769  0B7F  083D               	movf	(_I2C_buffer^(0+128)+29),w	;volatile
  1770  0B80  0020               	movlb	0	; select bank0
  1771  0B81  00A2               	movwf	eeprom_write@value
  1772  0B82  3012               	movlw	18
  1773  0B83  262A  3188         	fcall	_eeprom_write
  1774                           
  1775                           ;main.c: 538: eeprom_write(19, I2C_buffer.byte[0x1E]);
  1776  0B85  0021               	movlb	1	; select bank1
  1777  0B86  083E               	movf	(_I2C_buffer^(0+128)+30),w	;volatile
  1778  0B87  0020               	movlb	0	; select bank0
  1779  0B88  00A2               	movwf	eeprom_write@value
  1780  0B89  3013               	movlw	19
  1781  0B8A  262A  3188         	fcall	_eeprom_write
  1782                           
  1783                           ;main.c: 539: eeprom_write(20, I2C_buffer.byte[0x1F]);
  1784  0B8C  0021               	movlb	1	; select bank1
  1785  0B8D  083F               	movf	(_I2C_buffer^(0+128)+31),w	;volatile
  1786  0B8E  0020               	movlb	0	; select bank0
  1787  0B8F  00A2               	movwf	eeprom_write@value
  1788  0B90  3014               	movlw	20
  1789  0B91  262A  3188         	fcall	_eeprom_write
  1790                           
  1791                           ;main.c: 540: eeprom_write(21, I2C_buffer.byte[0x20]);
  1792  0B93  0021               	movlb	1	; select bank1
  1793  0B94  0840               	movf	(_I2C_buffer^(0+128)+32),w	;volatile
  1794  0B95  0020               	movlb	0	; select bank0
  1795  0B96  00A2               	movwf	eeprom_write@value
  1796  0B97  3015               	movlw	21
  1797  0B98  262A  3188         	fcall	_eeprom_write
  1798                           
  1799                           ;main.c: 541: eeprom_write(22, I2C_buffer.byte[0x21]);
  1800  0B9A  0021               	movlb	1	; select bank1
  1801  0B9B  0841               	movf	(_I2C_buffer^(0+128)+33),w	;volatile
  1802  0B9C  0020               	movlb	0	; select bank0
  1803  0B9D  00A2               	movwf	eeprom_write@value
  1804  0B9E  3016               	movlw	22
  1805  0B9F  262A  3188         	fcall	_eeprom_write
  1806                           
  1807                           ;main.c: 542: eeprom_write(23, I2C_buffer.byte[0x22]);
  1808  0BA1  0021               	movlb	1	; select bank1
  1809  0BA2  0842               	movf	(_I2C_buffer^(0+128)+34),w	;volatile
  1810  0BA3  0020               	movlb	0	; select bank0
  1811  0BA4  00A2               	movwf	eeprom_write@value
  1812  0BA5  3017               	movlw	23
  1813  0BA6  262A  3188         	fcall	_eeprom_write
  1814                           
  1815                           ;main.c: 543: eeprom_write(24, I2C_buffer.byte[0x23]);
  1816  0BA8  0021               	movlb	1	; select bank1
  1817  0BA9  0843               	movf	(_I2C_buffer^(0+128)+35),w	;volatile
  1818  0BAA  0020               	movlb	0	; select bank0
  1819  0BAB  00A2               	movwf	eeprom_write@value
  1820  0BAC  3018               	movlw	24
  1821  0BAD  262A  3188         	fcall	_eeprom_write
  1822                           
  1823                           ;main.c: 544: eeprom_write(25, I2C_buffer.byte[0x24]);
  1824  0BAF  0021               	movlb	1	; select bank1
  1825  0BB0  0844               	movf	(_I2C_buffer^(0+128)+36),w	;volatile
  1826  0BB1  0020               	movlb	0	; select bank0
  1827  0BB2  00A2               	movwf	eeprom_write@value
  1828  0BB3  3019               	movlw	25
  1829  0BB4  262A  3188         	fcall	_eeprom_write
  1830                           
  1831                           ;main.c: 545: eeprom_write(26, I2C_buffer.byte[0x25]);
  1832  0BB6  0021               	movlb	1	; select bank1
  1833  0BB7  0845               	movf	(_I2C_buffer^(0+128)+37),w	;volatile
  1834  0BB8  0020               	movlb	0	; select bank0
  1835  0BB9  00A2               	movwf	eeprom_write@value
  1836  0BBA  301A               	movlw	26
  1837  0BBB  262A  3188         	fcall	_eeprom_write
  1838                           
  1839                           ;main.c: 546: eeprom_write(27, I2C_buffer.byte[0x26]);
  1840  0BBD  0021               	movlb	1	; select bank1
  1841  0BBE  0846               	movf	(_I2C_buffer^(0+128)+38),w	;volatile
  1842  0BBF  0020               	movlb	0	; select bank0
  1843  0BC0  00A2               	movwf	eeprom_write@value
  1844  0BC1  301B               	movlw	27
  1845  0BC2  262A  3188         	fcall	_eeprom_write
  1846                           
  1847                           ;main.c: 547: eeprom_write(28, I2C_buffer.byte[0x27]);
  1848  0BC4  0021               	movlb	1	; select bank1
  1849  0BC5  0847               	movf	(_I2C_buffer^(0+128)+39),w	;volatile
  1850  0BC6  0020               	movlb	0	; select bank0
  1851  0BC7  00A2               	movwf	eeprom_write@value
  1852  0BC8  301C               	movlw	28
  1853  0BC9  262A  3188         	fcall	_eeprom_write
  1854                           
  1855                           ;main.c: 548: eeprom_write(29, I2C_buffer.byte[0x28]);
  1856  0BCB  0021               	movlb	1	; select bank1
  1857  0BCC  0848               	movf	(_I2C_buffer^(0+128)+40),w	;volatile
  1858  0BCD  0020               	movlb	0	; select bank0
  1859  0BCE  00A2               	movwf	eeprom_write@value
  1860  0BCF  301D               	movlw	29
  1861  0BD0  262A  3188         	fcall	_eeprom_write
  1862                           
  1863                           ;main.c: 549: eeprom_write(30, I2C_buffer.byte[0x29]);
  1864  0BD2  0021               	movlb	1	; select bank1
  1865  0BD3  0849               	movf	(_I2C_buffer^(0+128)+41),w	;volatile
  1866  0BD4  0020               	movlb	0	; select bank0
  1867  0BD5  00A2               	movwf	eeprom_write@value
  1868  0BD6  301E               	movlw	30
  1869  0BD7  262A  3188         	fcall	_eeprom_write
  1870                           
  1871                           ;main.c: 550: eeprom_write(31, I2C_buffer.byte[0x2A]);
  1872  0BD9  0021               	movlb	1	; select bank1
  1873  0BDA  084A               	movf	(_I2C_buffer^(0+128)+42),w	;volatile
  1874  0BDB  0020               	movlb	0	; select bank0
  1875  0BDC  00A2               	movwf	eeprom_write@value
  1876  0BDD  301F               	movlw	31
  1877  0BDE  262A  3188         	fcall	_eeprom_write
  1878                           
  1879                           ;main.c: 551: _delay((unsigned long)((5)*(32000000/4000.0)));
  1880  0BE0  3034               	movlw	52
  1881  0BE1  0021               	movlb	1	; select bank1
  1882  0BE2  00EA               	movwf	??_main^(0+128)
  1883  0BE3  30F1               	movlw	241
  1884  0BE4                     u4797:	
  1885  0BE4  0B89               	decfsz	9,f
  1886  0BE5  2BE4               	goto	u4797
  1887  0BE6  0BEA               	decfsz	??_main^(0+128),f
  1888  0BE7  2BE4               	goto	u4797
  1889  0BE8  3200               	nop2
  1890                           
  1891                           ;main.c: 552: I2C_buffer.data.SAVE = 0;
  1892  0BE9  0021               	movlb	1	; select bank1
  1893  0BEA  01A5               	clrf	(_I2C_buffer^(0+128)+5)	;volatile
  1894  0BEB  2890               	goto	l160
  1895  0BEC                     __end_of_main:	
  1896  0BEC                     __ptext10:	
  1897 ;; *************** function _abs *****************
  1898 ;; Defined at:
  1899 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\abs.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  a               2    2[BANK0 ] int 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  2    2[BANK0 ] int 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2, status,0
  1908 ;; Tracked objects:
  1909 ;;		On entry : 1F/0
  1910 ;;		On exit  : 1F/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1913 ;;      Params:         0       2       0       0
  1914 ;;      Locals:         0       0       0       0
  1915 ;;      Temps:          0       2       0       0
  1916 ;;      Totals:         0       4       0       0
  1917 ;;Total ram usage:        4 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    2
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_calculate_pidA
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _abs
  1930  0BEC                     _abs:	
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _abs: [wreg+status,2+status,0]
  1934  0BEC  1FA3               	btfss	abs@a+1,7
  1935  0BED  0008               	return
  1936  0BEE  0922               	comf	abs@a,w
  1937  0BEF  00A4               	movwf	??_abs
  1938  0BF0  0923               	comf	abs@a+1,w
  1939  0BF1  00A5               	movwf	??_abs+1
  1940  0BF2  0AA4               	incf	??_abs,f
  1941  0BF3  1903               	skipnz
  1942  0BF4  0AA5               	incf	??_abs+1,f
  1943  0BF5  0824               	movf	??_abs,w
  1944  0BF6  00A2               	movwf	?_abs
  1945  0BF7  0825               	movf	??_abs+1,w
  1946  0BF8  00A3               	movwf	?_abs+1
  1947  0BF9  0008               	return
  1948  0BFA                     __end_of_abs:	
  1949  0BFA                     __ptext9:	
  1950 ;; *************** function _calculate_pidA *****************
  1951 ;; Defined at:
  1952 ;;		line 253 in file "main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  set             4   63[BANK0 ] long 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  pid             4    8[BANK1 ] float 
  1957 ;;  error           4    4[BANK1 ] float 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2   63[BANK0 ] int 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 1F/0
  1964 ;;		On exit  : 1F/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1967 ;;      Params:         0       4       0       0
  1968 ;;      Locals:         0       0      12       0
  1969 ;;      Temps:          0       2       0       0
  1970 ;;      Totals:         0       6      12       0
  1971 ;;Total ram usage:       18 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    4
  1974 ;; This function calls:
  1975 ;;		___fladd
  1976 ;;		___flge
  1977 ;;		___flmul
  1978 ;;		___flsub
  1979 ;;		___fltol
  1980 ;;		___xxtofl
  1981 ;;		_abs
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           
  1988                           ;psect for function _calculate_pidA
  1989  0BFA                     _calculate_pidA:	
  1990                           
  1991                           ;main.c: 256: float pid = 0;
  1992                           
  1993                           ;incstack = 0
  1994                           ; Regs used in _calculate_pidA: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1995  0BFA  0021               	movlb	1	; select bank1
  1996  0BFB  01DA               	clrf	calculate_pidA@pid^(0+128)
  1997  0BFC  01DB               	clrf	(calculate_pidA@pid+1)^(0+128)
  1998  0BFD  01DC               	clrf	(calculate_pidA@pid+2)^(0+128)
  1999  0BFE  01DD               	clrf	(calculate_pidA@pid+3)^(0+128)
  2000                           
  2001                           ;main.c: 257: error = set - I2C_buffer.data.DISTANCE;
  2002  0BFF  0020               	movlb	0	; select bank0
  2003  0C00  0862               	movf	calculate_pidA@set+3,w
  2004  0C01  00A9               	movwf	___xxtofl@val+3
  2005  0C02  0861               	movf	calculate_pidA@set+2,w
  2006  0C03  00A8               	movwf	___xxtofl@val+2
  2007  0C04  0860               	movf	calculate_pidA@set+1,w
  2008  0C05  00A7               	movwf	___xxtofl@val+1
  2009  0C06  085F               	movf	calculate_pidA@set,w
  2010  0C07  00A6               	movwf	___xxtofl@val
  2011  0C08  0021               	movlb	1	; select bank1
  2012  0C09  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  2013  0C0A  0020               	movlb	0	; select bank0
  2014  0C0B  02A6               	subwf	___xxtofl@val,f
  2015  0C0C  0021               	movlb	1	; select bank1
  2016  0C0D  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  2017  0C0E  0020               	movlb	0	; select bank0
  2018  0C0F  3BA7               	subwfb	___xxtofl@val+1,f
  2019  0C10  0021               	movlb	1	; select bank1
  2020  0C11  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  2021  0C12  0020               	movlb	0	; select bank0
  2022  0C13  3BA8               	subwfb	___xxtofl@val+2,f
  2023  0C14  0021               	movlb	1	; select bank1
  2024  0C15  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  2025  0C16  0020               	movlb	0	; select bank0
  2026  0C17  3BA9               	subwfb	___xxtofl@val+3,f
  2027  0C18  3001               	movlw	1
  2028  0C19  267E  3188         	fcall	___xxtofl
  2029  0C1B  0829               	movf	?___xxtofl+3,w
  2030  0C1C  0021               	movlb	1	; select bank1
  2031  0C1D  00D9               	movwf	(calculate_pidA@error+3)^(0+128)
  2032  0C1E  0020               	movlb	0	; select bank0
  2033  0C1F  0828               	movf	?___xxtofl+2,w
  2034  0C20  0021               	movlb	1	; select bank1
  2035  0C21  00D8               	movwf	(calculate_pidA@error+2)^(0+128)
  2036  0C22  0020               	movlb	0	; select bank0
  2037  0C23  0827               	movf	?___xxtofl+1,w
  2038  0C24  0021               	movlb	1	; select bank1
  2039  0C25  00D7               	movwf	(calculate_pidA@error+1)^(0+128)
  2040  0C26  0020               	movlb	0	; select bank0
  2041  0C27  0826               	movf	?___xxtofl,w
  2042  0C28  0021               	movlb	1	; select bank1
  2043  0C29  00D6               	movwf	calculate_pidA@error^(0+128)
  2044                           
  2045                           ;main.c: 258: pid = error * I2C_buffer.data.ATS_PID_KP;
  2046  0C2A  0859               	movf	(calculate_pidA@error+3)^(0+128),w
  2047  0C2B  0020               	movlb	0	; select bank0
  2048  0C2C  00AD               	movwf	___flmul@b+3
  2049  0C2D  0021               	movlb	1	; select bank1
  2050  0C2E  0858               	movf	(calculate_pidA@error+2)^(0+128),w
  2051  0C2F  0020               	movlb	0	; select bank0
  2052  0C30  00AC               	movwf	___flmul@b+2
  2053  0C31  0021               	movlb	1	; select bank1
  2054  0C32  0857               	movf	(calculate_pidA@error+1)^(0+128),w
  2055  0C33  0020               	movlb	0	; select bank0
  2056  0C34  00AB               	movwf	___flmul@b+1
  2057  0C35  0021               	movlb	1	; select bank1
  2058  0C36  0856               	movf	calculate_pidA@error^(0+128),w
  2059  0C37  0020               	movlb	0	; select bank0
  2060  0C38  00AA               	movwf	___flmul@b
  2061  0C39  301F               	movlw	31
  2062  0C3A  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2063  0C3B  0086               	movwf	6
  2064  0C3C  0187               	clrf	7
  2065  0C3D  3F40               	moviw [0]fsr1
  2066  0C3E  00AE               	movwf	___flmul@a
  2067  0C3F  3F41               	moviw [1]fsr1
  2068  0C40  00AF               	movwf	___flmul@a+1
  2069  0C41  3F42               	moviw [2]fsr1
  2070  0C42  00B0               	movwf	___flmul@a+2
  2071  0C43  3F43               	moviw [3]fsr1
  2072  0C44  00B1               	movwf	___flmul@a+3
  2073  0C45  3182  2273  3188   	fcall	___flmul
  2074  0C48  082D               	movf	?___flmul+3,w
  2075  0C49  0021               	movlb	1	; select bank1
  2076  0C4A  00DD               	movwf	(calculate_pidA@pid+3)^(0+128)
  2077  0C4B  0020               	movlb	0	; select bank0
  2078  0C4C  082C               	movf	?___flmul+2,w
  2079  0C4D  0021               	movlb	1	; select bank1
  2080  0C4E  00DC               	movwf	(calculate_pidA@pid+2)^(0+128)
  2081  0C4F  0020               	movlb	0	; select bank0
  2082  0C50  082B               	movf	?___flmul+1,w
  2083  0C51  0021               	movlb	1	; select bank1
  2084  0C52  00DB               	movwf	(calculate_pidA@pid+1)^(0+128)
  2085  0C53  0020               	movlb	0	; select bank0
  2086  0C54  082A               	movf	?___flmul,w
  2087  0C55  0021               	movlb	1	; select bank1
  2088  0C56  00DA               	movwf	calculate_pidA@pid^(0+128)
  2089                           
  2090                           ;main.c: 259: accumulatorA += error;
  2091  0C57  0859               	movf	(calculate_pidA@error+3)^(0+128),w
  2092  0C58  0020               	movlb	0	; select bank0
  2093  0C59  00C6               	movwf	___fladd@b+3
  2094  0C5A  0021               	movlb	1	; select bank1
  2095  0C5B  0858               	movf	(calculate_pidA@error+2)^(0+128),w
  2096  0C5C  0020               	movlb	0	; select bank0
  2097  0C5D  00C5               	movwf	___fladd@b+2
  2098  0C5E  0021               	movlb	1	; select bank1
  2099  0C5F  0857               	movf	(calculate_pidA@error+1)^(0+128),w
  2100  0C60  0020               	movlb	0	; select bank0
  2101  0C61  00C4               	movwf	___fladd@b+1
  2102  0C62  0021               	movlb	1	; select bank1
  2103  0C63  0856               	movf	calculate_pidA@error^(0+128),w
  2104  0C64  0020               	movlb	0	; select bank0
  2105  0C65  00C3               	movwf	___fladd@b
  2106  0C66  0022               	movlb	2	; select bank2
  2107  0C67  0827               	movf	(_accumulatorA+3)^(0+256),w
  2108  0C68  0020               	movlb	0	; select bank0
  2109  0C69  00CA               	movwf	___fladd@a+3
  2110  0C6A  0022               	movlb	2	; select bank2
  2111  0C6B  0826               	movf	(_accumulatorA+2)^(0+256),w
  2112  0C6C  0020               	movlb	0	; select bank0
  2113  0C6D  00C9               	movwf	___fladd@a+2
  2114  0C6E  0022               	movlb	2	; select bank2
  2115  0C6F  0825               	movf	(_accumulatorA+1)^(0+256),w
  2116  0C70  0020               	movlb	0	; select bank0
  2117  0C71  00C8               	movwf	___fladd@a+1
  2118  0C72  0022               	movlb	2	; select bank2
  2119  0C73  0824               	movf	_accumulatorA^(0+256),w
  2120  0C74  0020               	movlb	0	; select bank0
  2121  0C75  00C7               	movwf	___fladd@a
  2122  0C76  3184  2491  3188   	fcall	___fladd
  2123  0C79  0846               	movf	?___fladd+3,w
  2124  0C7A  0022               	movlb	2	; select bank2
  2125  0C7B  00A7               	movwf	(_accumulatorA+3)^(0+256)
  2126  0C7C  0020               	movlb	0	; select bank0
  2127  0C7D  0845               	movf	?___fladd+2,w
  2128  0C7E  0022               	movlb	2	; select bank2
  2129  0C7F  00A6               	movwf	(_accumulatorA+2)^(0+256)
  2130  0C80  0020               	movlb	0	; select bank0
  2131  0C81  0844               	movf	?___fladd+1,w
  2132  0C82  0022               	movlb	2	; select bank2
  2133  0C83  00A5               	movwf	(_accumulatorA+1)^(0+256)
  2134  0C84  0020               	movlb	0	; select bank0
  2135  0C85  0843               	movf	?___fladd,w
  2136  0C86  0022               	movlb	2	; select bank2
  2137  0C87  00A4               	movwf	_accumulatorA^(0+256)
  2138                           
  2139                           ;main.c: 260: pid += I2C_buffer.data.ATS_PID_KI*accumulatorA;
  2140  0C88  3027               	movlw	39
  2141  0C89  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2142  0C8A  0086               	movwf	6
  2143  0C8B  0187               	clrf	7
  2144  0C8C  3F40               	moviw [0]fsr1
  2145  0C8D  0020               	movlb	0	; select bank0
  2146  0C8E  00AE               	movwf	___flmul@a
  2147  0C8F  3F41               	moviw [1]fsr1
  2148  0C90  00AF               	movwf	___flmul@a+1
  2149  0C91  3F42               	moviw [2]fsr1
  2150  0C92  00B0               	movwf	___flmul@a+2
  2151  0C93  3F43               	moviw [3]fsr1
  2152  0C94  00B1               	movwf	___flmul@a+3
  2153  0C95  0022               	movlb	2	; select bank2
  2154  0C96  0827               	movf	(_accumulatorA+3)^(0+256),w
  2155  0C97  0020               	movlb	0	; select bank0
  2156  0C98  00AD               	movwf	___flmul@b+3
  2157  0C99  0022               	movlb	2	; select bank2
  2158  0C9A  0826               	movf	(_accumulatorA+2)^(0+256),w
  2159  0C9B  0020               	movlb	0	; select bank0
  2160  0C9C  00AC               	movwf	___flmul@b+2
  2161  0C9D  0022               	movlb	2	; select bank2
  2162  0C9E  0825               	movf	(_accumulatorA+1)^(0+256),w
  2163  0C9F  0020               	movlb	0	; select bank0
  2164  0CA0  00AB               	movwf	___flmul@b+1
  2165  0CA1  0022               	movlb	2	; select bank2
  2166  0CA2  0824               	movf	_accumulatorA^(0+256),w
  2167  0CA3  0020               	movlb	0	; select bank0
  2168  0CA4  00AA               	movwf	___flmul@b
  2169  0CA5  3182  2273  3188   	fcall	___flmul
  2170  0CA8  082D               	movf	?___flmul+3,w
  2171  0CA9  00C6               	movwf	___fladd@b+3
  2172  0CAA  082C               	movf	?___flmul+2,w
  2173  0CAB  00C5               	movwf	___fladd@b+2
  2174  0CAC  082B               	movf	?___flmul+1,w
  2175  0CAD  00C4               	movwf	___fladd@b+1
  2176  0CAE  082A               	movf	?___flmul,w
  2177  0CAF  00C3               	movwf	___fladd@b
  2178  0CB0  0021               	movlb	1	; select bank1
  2179  0CB1  085D               	movf	(calculate_pidA@pid+3)^(0+128),w
  2180  0CB2  0020               	movlb	0	; select bank0
  2181  0CB3  00CA               	movwf	___fladd@a+3
  2182  0CB4  0021               	movlb	1	; select bank1
  2183  0CB5  085C               	movf	(calculate_pidA@pid+2)^(0+128),w
  2184  0CB6  0020               	movlb	0	; select bank0
  2185  0CB7  00C9               	movwf	___fladd@a+2
  2186  0CB8  0021               	movlb	1	; select bank1
  2187  0CB9  085B               	movf	(calculate_pidA@pid+1)^(0+128),w
  2188  0CBA  0020               	movlb	0	; select bank0
  2189  0CBB  00C8               	movwf	___fladd@a+1
  2190  0CBC  0021               	movlb	1	; select bank1
  2191  0CBD  085A               	movf	calculate_pidA@pid^(0+128),w
  2192  0CBE  0020               	movlb	0	; select bank0
  2193  0CBF  00C7               	movwf	___fladd@a
  2194  0CC0  3184  2491  3188   	fcall	___fladd
  2195  0CC3  0846               	movf	?___fladd+3,w
  2196  0CC4  0021               	movlb	1	; select bank1
  2197  0CC5  00DD               	movwf	(calculate_pidA@pid+3)^(0+128)
  2198  0CC6  0020               	movlb	0	; select bank0
  2199  0CC7  0845               	movf	?___fladd+2,w
  2200  0CC8  0021               	movlb	1	; select bank1
  2201  0CC9  00DC               	movwf	(calculate_pidA@pid+2)^(0+128)
  2202  0CCA  0020               	movlb	0	; select bank0
  2203  0CCB  0844               	movf	?___fladd+1,w
  2204  0CCC  0021               	movlb	1	; select bank1
  2205  0CCD  00DB               	movwf	(calculate_pidA@pid+1)^(0+128)
  2206  0CCE  0020               	movlb	0	; select bank0
  2207  0CCF  0843               	movf	?___fladd,w
  2208  0CD0  0021               	movlb	1	; select bank1
  2209  0CD1  00DA               	movwf	calculate_pidA@pid^(0+128)
  2210                           
  2211                           ;main.c: 261: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2212  0CD2  0859               	movf	(calculate_pidA@error+3)^(0+128),w
  2213  0CD3  0020               	movlb	0	; select bank0
  2214  0CD4  00DE               	movwf	___flsub@b+3
  2215  0CD5  0021               	movlb	1	; select bank1
  2216  0CD6  0858               	movf	(calculate_pidA@error+2)^(0+128),w
  2217  0CD7  0020               	movlb	0	; select bank0
  2218  0CD8  00DD               	movwf	___flsub@b+2
  2219  0CD9  0021               	movlb	1	; select bank1
  2220  0CDA  0857               	movf	(calculate_pidA@error+1)^(0+128),w
  2221  0CDB  0020               	movlb	0	; select bank0
  2222  0CDC  00DC               	movwf	___flsub@b+1
  2223  0CDD  0021               	movlb	1	; select bank1
  2224  0CDE  0856               	movf	calculate_pidA@error^(0+128),w
  2225  0CDF  0020               	movlb	0	; select bank0
  2226  0CE0  00DB               	movwf	___flsub@b
  2227  0CE1  0022               	movlb	2	; select bank2
  2228  0CE2  0823               	movf	(_lasterrorA+3)^(0+256),w
  2229  0CE3  0020               	movlb	0	; select bank0
  2230  0CE4  00DA               	movwf	___flsub@a+3
  2231  0CE5  0022               	movlb	2	; select bank2
  2232  0CE6  0822               	movf	(_lasterrorA+2)^(0+256),w
  2233  0CE7  0020               	movlb	0	; select bank0
  2234  0CE8  00D9               	movwf	___flsub@a+2
  2235  0CE9  0022               	movlb	2	; select bank2
  2236  0CEA  0821               	movf	(_lasterrorA+1)^(0+256),w
  2237  0CEB  0020               	movlb	0	; select bank0
  2238  0CEC  00D8               	movwf	___flsub@a+1
  2239  0CED  0022               	movlb	2	; select bank2
  2240  0CEE  0820               	movf	_lasterrorA^(0+256),w
  2241  0CEF  0020               	movlb	0	; select bank0
  2242  0CF0  00D7               	movwf	___flsub@a
  2243  0CF1  27CE               	fcall	___flsub
  2244  0CF2  085A               	movf	?___flsub+3,w
  2245  0CF3  00B1               	movwf	___flmul@a+3
  2246  0CF4  0859               	movf	?___flsub+2,w
  2247  0CF5  00B0               	movwf	___flmul@a+2
  2248  0CF6  0858               	movf	?___flsub+1,w
  2249  0CF7  00AF               	movwf	___flmul@a+1
  2250  0CF8  0857               	movf	?___flsub,w
  2251  0CF9  00AE               	movwf	___flmul@a
  2252  0CFA  3023               	movlw	35
  2253  0CFB  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2254  0CFC  0086               	movwf	6
  2255  0CFD  0187               	clrf	7
  2256  0CFE  3F40               	moviw [0]fsr1
  2257  0CFF  00AA               	movwf	___flmul@b
  2258  0D00  3F41               	moviw [1]fsr1
  2259  0D01  00AB               	movwf	___flmul@b+1
  2260  0D02  3F42               	moviw [2]fsr1
  2261  0D03  00AC               	movwf	___flmul@b+2
  2262  0D04  3F43               	moviw [3]fsr1
  2263  0D05  00AD               	movwf	___flmul@b+3
  2264  0D06  3182  2273  3188   	fcall	___flmul
  2265  0D09  082D               	movf	?___flmul+3,w
  2266  0D0A  0021               	movlb	1	; select bank1
  2267  0D0B  00D5               	movwf	(_calculate_pidA$1318+3)^(0+128)
  2268  0D0C  0020               	movlb	0	; select bank0
  2269  0D0D  082C               	movf	?___flmul+2,w
  2270  0D0E  0021               	movlb	1	; select bank1
  2271  0D0F  00D4               	movwf	(_calculate_pidA$1318+2)^(0+128)
  2272  0D10  0020               	movlb	0	; select bank0
  2273  0D11  082B               	movf	?___flmul+1,w
  2274  0D12  0021               	movlb	1	; select bank1
  2275  0D13  00D3               	movwf	(_calculate_pidA$1318+1)^(0+128)
  2276  0D14  0020               	movlb	0	; select bank0
  2277  0D15  082A               	movf	?___flmul,w
  2278  0D16  0021               	movlb	1	; select bank1
  2279  0D17  00D2               	movwf	_calculate_pidA$1318^(0+128)
  2280                           
  2281                           ;main.c: 261: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2282  0D18  0855               	movf	(_calculate_pidA$1318+3)^(0+128),w
  2283  0D19  0020               	movlb	0	; select bank0
  2284  0D1A  00C6               	movwf	___fladd@b+3
  2285  0D1B  0021               	movlb	1	; select bank1
  2286  0D1C  0854               	movf	(_calculate_pidA$1318+2)^(0+128),w
  2287  0D1D  0020               	movlb	0	; select bank0
  2288  0D1E  00C5               	movwf	___fladd@b+2
  2289  0D1F  0021               	movlb	1	; select bank1
  2290  0D20  0853               	movf	(_calculate_pidA$1318+1)^(0+128),w
  2291  0D21  0020               	movlb	0	; select bank0
  2292  0D22  00C4               	movwf	___fladd@b+1
  2293  0D23  0021               	movlb	1	; select bank1
  2294  0D24  0852               	movf	_calculate_pidA$1318^(0+128),w
  2295  0D25  0020               	movlb	0	; select bank0
  2296  0D26  00C3               	movwf	___fladd@b
  2297  0D27  0021               	movlb	1	; select bank1
  2298  0D28  085D               	movf	(calculate_pidA@pid+3)^(0+128),w
  2299  0D29  0020               	movlb	0	; select bank0
  2300  0D2A  00CA               	movwf	___fladd@a+3
  2301  0D2B  0021               	movlb	1	; select bank1
  2302  0D2C  085C               	movf	(calculate_pidA@pid+2)^(0+128),w
  2303  0D2D  0020               	movlb	0	; select bank0
  2304  0D2E  00C9               	movwf	___fladd@a+2
  2305  0D2F  0021               	movlb	1	; select bank1
  2306  0D30  085B               	movf	(calculate_pidA@pid+1)^(0+128),w
  2307  0D31  0020               	movlb	0	; select bank0
  2308  0D32  00C8               	movwf	___fladd@a+1
  2309  0D33  0021               	movlb	1	; select bank1
  2310  0D34  085A               	movf	calculate_pidA@pid^(0+128),w
  2311  0D35  0020               	movlb	0	; select bank0
  2312  0D36  00C7               	movwf	___fladd@a
  2313  0D37  3184  2491  3188   	fcall	___fladd
  2314  0D3A  0846               	movf	?___fladd+3,w
  2315  0D3B  0021               	movlb	1	; select bank1
  2316  0D3C  00DD               	movwf	(calculate_pidA@pid+3)^(0+128)
  2317  0D3D  0020               	movlb	0	; select bank0
  2318  0D3E  0845               	movf	?___fladd+2,w
  2319  0D3F  0021               	movlb	1	; select bank1
  2320  0D40  00DC               	movwf	(calculate_pidA@pid+2)^(0+128)
  2321  0D41  0020               	movlb	0	; select bank0
  2322  0D42  0844               	movf	?___fladd+1,w
  2323  0D43  0021               	movlb	1	; select bank1
  2324  0D44  00DB               	movwf	(calculate_pidA@pid+1)^(0+128)
  2325  0D45  0020               	movlb	0	; select bank0
  2326  0D46  0843               	movf	?___fladd,w
  2327  0D47  0021               	movlb	1	; select bank1
  2328  0D48  00DA               	movwf	calculate_pidA@pid^(0+128)
  2329                           
  2330                           ;main.c: 262: lasterrorA = error;
  2331  0D49  0859               	movf	(calculate_pidA@error+3)^(0+128),w
  2332  0D4A  0022               	movlb	2	; select bank2
  2333  0D4B  00A3               	movwf	(_lasterrorA+3)^(0+256)
  2334  0D4C  0021               	movlb	1	; select bank1
  2335  0D4D  0858               	movf	(calculate_pidA@error+2)^(0+128),w
  2336  0D4E  0022               	movlb	2	; select bank2
  2337  0D4F  00A2               	movwf	(_lasterrorA+2)^(0+256)
  2338  0D50  0021               	movlb	1	; select bank1
  2339  0D51  0857               	movf	(calculate_pidA@error+1)^(0+128),w
  2340  0D52  0022               	movlb	2	; select bank2
  2341  0D53  00A1               	movwf	(_lasterrorA+1)^(0+256)
  2342  0D54  0021               	movlb	1	; select bank1
  2343  0D55  0856               	movf	calculate_pidA@error^(0+128),w
  2344  0D56  0022               	movlb	2	; select bank2
  2345  0D57  00A0               	movwf	_lasterrorA^(0+256)
  2346                           
  2347                           ;main.c: 263: if (pid >= abs(I2C_buffer.data.SPEED))
  2348  0D58  0021               	movlb	1	; select bank1
  2349  0D59  085D               	movf	(calculate_pidA@pid+3)^(0+128),w
  2350  0D5A  0020               	movlb	0	; select bank0
  2351  0D5B  00B7               	movwf	___flge@ff1+3
  2352  0D5C  0021               	movlb	1	; select bank1
  2353  0D5D  085C               	movf	(calculate_pidA@pid+2)^(0+128),w
  2354  0D5E  0020               	movlb	0	; select bank0
  2355  0D5F  00B6               	movwf	___flge@ff1+2
  2356  0D60  0021               	movlb	1	; select bank1
  2357  0D61  085B               	movf	(calculate_pidA@pid+1)^(0+128),w
  2358  0D62  0020               	movlb	0	; select bank0
  2359  0D63  00B5               	movwf	___flge@ff1+1
  2360  0D64  0021               	movlb	1	; select bank1
  2361  0D65  085A               	movf	calculate_pidA@pid^(0+128),w
  2362  0D66  0020               	movlb	0	; select bank0
  2363  0D67  00B4               	movwf	___flge@ff1
  2364  0D68  0021               	movlb	1	; select bank1
  2365  0D69  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2366  0D6A  0020               	movlb	0	; select bank0
  2367  0D6B  00A3               	movwf	abs@a+1
  2368  0D6C  0021               	movlb	1	; select bank1
  2369  0D6D  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2370  0D6E  0020               	movlb	0	; select bank0
  2371  0D6F  00A2               	movwf	abs@a
  2372  0D70  23EC  3188         	fcall	_abs
  2373  0D72  0822               	movf	?_abs,w
  2374  0D73  00A6               	movwf	___xxtofl@val
  2375  0D74  0823               	movf	?_abs+1,w
  2376  0D75  00A7               	movwf	___xxtofl@val+1
  2377  0D76  0D89               	rlf	9,f
  2378  0D77  3B89               	subwfb	9,f
  2379  0D78  0989               	comf	9,f
  2380  0D79  00A8               	movwf	___xxtofl@val+2
  2381  0D7A  00A9               	movwf	___xxtofl@val+3
  2382  0D7B  3001               	movlw	1
  2383  0D7C  267E  3188         	fcall	___xxtofl
  2384  0D7E  0829               	movf	?___xxtofl+3,w
  2385  0D7F  00BB               	movwf	___flge@ff2+3
  2386  0D80  0828               	movf	?___xxtofl+2,w
  2387  0D81  00BA               	movwf	___flge@ff2+2
  2388  0D82  0827               	movf	?___xxtofl+1,w
  2389  0D83  00B9               	movwf	___flge@ff2+1
  2390  0D84  0826               	movf	?___xxtofl,w
  2391  0D85  00B8               	movwf	___flge@ff2
  2392  0D86  2760  3188         	fcall	___flge
  2393  0D88  1C03               	btfss	3,0
  2394  0D89  2DAF               	goto	l137
  2395                           
  2396                           ;main.c: 264: {;main.c: 265: pid = abs(I2C_buffer.data.SPEED);
  2397  0D8A  0021               	movlb	1	; select bank1
  2398  0D8B  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2399  0D8C  0020               	movlb	0	; select bank0
  2400  0D8D  00A3               	movwf	abs@a+1
  2401  0D8E  0021               	movlb	1	; select bank1
  2402  0D8F  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2403  0D90  0020               	movlb	0	; select bank0
  2404  0D91  00A2               	movwf	abs@a
  2405  0D92  23EC  3188         	fcall	_abs
  2406  0D94  0822               	movf	?_abs,w
  2407  0D95  00A6               	movwf	___xxtofl@val
  2408  0D96  0823               	movf	?_abs+1,w
  2409  0D97  00A7               	movwf	___xxtofl@val+1
  2410  0D98  0D89               	rlf	9,f
  2411  0D99  3B89               	subwfb	9,f
  2412  0D9A  0989               	comf	9,f
  2413  0D9B  00A8               	movwf	___xxtofl@val+2
  2414  0D9C  00A9               	movwf	___xxtofl@val+3
  2415  0D9D  3001               	movlw	1
  2416  0D9E  267E  3188         	fcall	___xxtofl
  2417  0DA0  0829               	movf	?___xxtofl+3,w
  2418  0DA1  0021               	movlb	1	; select bank1
  2419  0DA2  00DD               	movwf	(calculate_pidA@pid+3)^(0+128)
  2420  0DA3  0020               	movlb	0	; select bank0
  2421  0DA4  0828               	movf	?___xxtofl+2,w
  2422  0DA5  0021               	movlb	1	; select bank1
  2423  0DA6  00DC               	movwf	(calculate_pidA@pid+2)^(0+128)
  2424  0DA7  0020               	movlb	0	; select bank0
  2425  0DA8  0827               	movf	?___xxtofl+1,w
  2426  0DA9  0021               	movlb	1	; select bank1
  2427  0DAA  00DB               	movwf	(calculate_pidA@pid+1)^(0+128)
  2428  0DAB  0020               	movlb	0	; select bank0
  2429  0DAC  0826               	movf	?___xxtofl,w
  2430  0DAD  0021               	movlb	1	; select bank1
  2431  0DAE  00DA               	movwf	calculate_pidA@pid^(0+128)
  2432  0DAF                     l137:	
  2433                           
  2434                           ;main.c: 266: };main.c: 267: if (pid <= abs(I2C_buffer.data.SPEED)*-1) {
  2435  0DAF  0021               	movlb	1	; select bank1
  2436  0DB0  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2437  0DB1  0020               	movlb	0	; select bank0
  2438  0DB2  00A3               	movwf	abs@a+1
  2439  0DB3  0021               	movlb	1	; select bank1
  2440  0DB4  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2441  0DB5  0020               	movlb	0	; select bank0
  2442  0DB6  00A2               	movwf	abs@a
  2443  0DB7  23EC  3188         	fcall	_abs
  2444  0DB9  0922               	comf	?_abs,w
  2445  0DBA  00E3               	movwf	??_calculate_pidA
  2446  0DBB  0923               	comf	?_abs+1,w
  2447  0DBC  00E4               	movwf	??_calculate_pidA+1
  2448  0DBD  0AE3               	incf	??_calculate_pidA,f
  2449  0DBE  1903               	skipnz
  2450  0DBF  0AE4               	incf	??_calculate_pidA+1,f
  2451  0DC0  0863               	movf	??_calculate_pidA,w
  2452  0DC1  00A6               	movwf	___xxtofl@val
  2453  0DC2  0864               	movf	??_calculate_pidA+1,w
  2454  0DC3  00A7               	movwf	___xxtofl@val+1
  2455  0DC4  0D89               	rlf	9,f
  2456  0DC5  3B89               	subwfb	9,f
  2457  0DC6  0989               	comf	9,f
  2458  0DC7  00A8               	movwf	___xxtofl@val+2
  2459  0DC8  00A9               	movwf	___xxtofl@val+3
  2460  0DC9  3001               	movlw	1
  2461  0DCA  267E  3188         	fcall	___xxtofl
  2462  0DCC  0829               	movf	?___xxtofl+3,w
  2463  0DCD  00B7               	movwf	___flge@ff1+3
  2464  0DCE  0828               	movf	?___xxtofl+2,w
  2465  0DCF  00B6               	movwf	___flge@ff1+2
  2466  0DD0  0827               	movf	?___xxtofl+1,w
  2467  0DD1  00B5               	movwf	___flge@ff1+1
  2468  0DD2  0826               	movf	?___xxtofl,w
  2469  0DD3  00B4               	movwf	___flge@ff1
  2470  0DD4  0021               	movlb	1	; select bank1
  2471  0DD5  085D               	movf	(calculate_pidA@pid+3)^(0+128),w
  2472  0DD6  0020               	movlb	0	; select bank0
  2473  0DD7  00BB               	movwf	___flge@ff2+3
  2474  0DD8  0021               	movlb	1	; select bank1
  2475  0DD9  085C               	movf	(calculate_pidA@pid+2)^(0+128),w
  2476  0DDA  0020               	movlb	0	; select bank0
  2477  0DDB  00BA               	movwf	___flge@ff2+2
  2478  0DDC  0021               	movlb	1	; select bank1
  2479  0DDD  085B               	movf	(calculate_pidA@pid+1)^(0+128),w
  2480  0DDE  0020               	movlb	0	; select bank0
  2481  0DDF  00B9               	movwf	___flge@ff2+1
  2482  0DE0  0021               	movlb	1	; select bank1
  2483  0DE1  085A               	movf	calculate_pidA@pid^(0+128),w
  2484  0DE2  0020               	movlb	0	; select bank0
  2485  0DE3  00B8               	movwf	___flge@ff2
  2486  0DE4  2760  3188         	fcall	___flge
  2487  0DE6  1C03               	btfss	3,0
  2488  0DE7  2E13               	goto	l138
  2489                           
  2490                           ;main.c: 268: pid = abs(I2C_buffer.data.SPEED)*-1;
  2491  0DE8  0021               	movlb	1	; select bank1
  2492  0DE9  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2493  0DEA  0020               	movlb	0	; select bank0
  2494  0DEB  00A3               	movwf	abs@a+1
  2495  0DEC  0021               	movlb	1	; select bank1
  2496  0DED  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2497  0DEE  0020               	movlb	0	; select bank0
  2498  0DEF  00A2               	movwf	abs@a
  2499  0DF0  23EC  3188         	fcall	_abs
  2500  0DF2  0922               	comf	?_abs,w
  2501  0DF3  00E3               	movwf	??_calculate_pidA
  2502  0DF4  0923               	comf	?_abs+1,w
  2503  0DF5  00E4               	movwf	??_calculate_pidA+1
  2504  0DF6  0AE3               	incf	??_calculate_pidA,f
  2505  0DF7  1903               	skipnz
  2506  0DF8  0AE4               	incf	??_calculate_pidA+1,f
  2507  0DF9  0863               	movf	??_calculate_pidA,w
  2508  0DFA  00A6               	movwf	___xxtofl@val
  2509  0DFB  0864               	movf	??_calculate_pidA+1,w
  2510  0DFC  00A7               	movwf	___xxtofl@val+1
  2511  0DFD  0D89               	rlf	9,f
  2512  0DFE  3B89               	subwfb	9,f
  2513  0DFF  0989               	comf	9,f
  2514  0E00  00A8               	movwf	___xxtofl@val+2
  2515  0E01  00A9               	movwf	___xxtofl@val+3
  2516  0E02  3001               	movlw	1
  2517  0E03  267E               	fcall	___xxtofl
  2518  0E04  0829               	movf	?___xxtofl+3,w
  2519  0E05  0021               	movlb	1	; select bank1
  2520  0E06  00DD               	movwf	(calculate_pidA@pid+3)^(0+128)
  2521  0E07  0020               	movlb	0	; select bank0
  2522  0E08  0828               	movf	?___xxtofl+2,w
  2523  0E09  0021               	movlb	1	; select bank1
  2524  0E0A  00DC               	movwf	(calculate_pidA@pid+2)^(0+128)
  2525  0E0B  0020               	movlb	0	; select bank0
  2526  0E0C  0827               	movf	?___xxtofl+1,w
  2527  0E0D  0021               	movlb	1	; select bank1
  2528  0E0E  00DB               	movwf	(calculate_pidA@pid+1)^(0+128)
  2529  0E0F  0020               	movlb	0	; select bank0
  2530  0E10  0826               	movf	?___xxtofl,w
  2531  0E11  0021               	movlb	1	; select bank1
  2532  0E12  00DA               	movwf	calculate_pidA@pid^(0+128)
  2533  0E13                     l138:	
  2534                           
  2535                           ;main.c: 269: };main.c: 270: return ((int) pid);
  2536  0E13  0021               	movlb	1	; select bank1
  2537  0E14  085D               	movf	(calculate_pidA@pid+3)^(0+128),w
  2538  0E15  0020               	movlb	0	; select bank0
  2539  0E16  00A5               	movwf	___fltol@f1+3
  2540  0E17  0021               	movlb	1	; select bank1
  2541  0E18  085C               	movf	(calculate_pidA@pid+2)^(0+128),w
  2542  0E19  0020               	movlb	0	; select bank0
  2543  0E1A  00A4               	movwf	___fltol@f1+2
  2544  0E1B  0021               	movlb	1	; select bank1
  2545  0E1C  085B               	movf	(calculate_pidA@pid+1)^(0+128),w
  2546  0E1D  0020               	movlb	0	; select bank0
  2547  0E1E  00A3               	movwf	___fltol@f1+1
  2548  0E1F  0021               	movlb	1	; select bank1
  2549  0E20  085A               	movf	calculate_pidA@pid^(0+128),w
  2550  0E21  0020               	movlb	0	; select bank0
  2551  0E22  00A2               	movwf	___fltol@f1
  2552  0E23  3184  243E         	fcall	___fltol
  2553  0E25  0823               	movf	?___fltol+1,w
  2554  0E26  00E0               	movwf	?_calculate_pidA+1
  2555  0E27  0822               	movf	?___fltol,w
  2556  0E28  00DF               	movwf	?_calculate_pidA
  2557  0E29  0008               	return
  2558  0E2A                     __end_of_calculate_pidA:	
  2559  0E2A                     __ptext8:	
  2560 ;; *************** function _eeprom_write *****************
  2561 ;; Defined at:
  2562 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eewrite.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  addr            1    wreg     unsigned char 
  2565 ;;  value           1    2[BANK0 ] unsigned char 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  addr            1    3[BANK0 ] unsigned char 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0
  2572 ;; Tracked objects:
  2573 ;;		On entry : 1F/0
  2574 ;;		On exit  : 1F/3
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2577 ;;      Params:         0       1       0       0
  2578 ;;      Locals:         0       1       0       0
  2579 ;;      Temps:          0       0       0       0
  2580 ;;      Totals:         0       2       0       0
  2581 ;;Total ram usage:        2 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    2
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           
  2592                           ;psect for function _eeprom_write
  2593  0E2A                     _eeprom_write:	
  2594                           
  2595                           ;incstack = 0
  2596                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2597                           ;eeprom_write@addr stored from wreg
  2598  0E2A  00A3               	movwf	eeprom_write@addr
  2599  0E2B                     l313:	
  2600                           ;__eewrite.c: 8: do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value
      +                          ); EECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } I
      +                          NTCONbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1;
      +                           EE
  2601                           
  2602  0E2B  0023               	movlb	3	; select bank3
  2603  0E2C  1895               	btfsc	21,1	;volsfr
  2604  0E2D  2E2B               	goto	l313
  2605  0E2E  0020               	movlb	0	; select bank0
  2606  0E2F  0823               	movf	eeprom_write@addr,w
  2607  0E30  0023               	movlb	3	; select bank3
  2608  0E31  0091               	movwf	17	;volatile
  2609  0E32  0192               	clrf	18	;volatile
  2610  0E33  0020               	movlb	0	; select bank0
  2611  0E34  0822               	movf	eeprom_write@value,w
  2612  0E35  0023               	movlb	3	; select bank3
  2613  0E36  0093               	movwf	19	;volatile
  2614  0E37  303F               	movlw	63
  2615  0E38  0595               	andwf	21,f	;volsfr
  2616  0E39  1003               	bcf	3,0	;volatile
  2617  0E3A  1B8B               	btfsc	11,7	;volatile
  2618  0E3B  1403               	bsf	3,0	;volatile
  2619  0E3C  138B               	bcf	11,7	;volatile
  2620  0E3D  1515               	bsf	21,2	;volsfr
  2621  0E3E  3055               	movlw	85
  2622  0E3F  0096               	movwf	22	;volsfr
  2623  0E40  30AA               	movlw	170
  2624  0E41  0096               	movwf	22	;volsfr
  2625  0E42  1495               	bsf	21,1	;volsfr
  2626  0E43  1115               	bcf	21,2	;volsfr
  2627  0E44  1803               	btfsc	3,0	;volatile
  2628  0E45  178B               	bsf	11,7	;volatile
  2629  0E46  0008               	return
  2630  0E47                     __end_of_eeprom_write:	
  2631  0E47                     __ptext3:	
  2632 ;; *************** function _M_control *****************
  2633 ;; Defined at:
  2634 ;;		line 234 in file "main.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  ctr             2   12[BANK0 ] int 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2, status,0, pclath, cstack
  2643 ;; Tracked objects:
  2644 ;;		On entry : 1F/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2648 ;;      Params:         0       2       0       0
  2649 ;;      Locals:         0       0       0       0
  2650 ;;      Temps:          0       1       0       0
  2651 ;;      Totals:         0       3       0       0
  2652 ;;Total ram usage:        3 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    3
  2655 ;; This function calls:
  2656 ;;		_PWM_set_duty
  2657 ;;		___wmul
  2658 ;; This function is called by:
  2659 ;;		_calculate_pidM
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _M_control
  2666  0E47                     _M_control:	
  2667  0E47                     l3264:	
  2668                           ;incstack = 0
  2669                           ; Regs used in _M_control: [wreg+status,2+status,0+pclath+cstack]
  2670                           
  2671                           
  2672                           ;main.c: 236: if (ctr == 0)
  2673  0E47  082C               	movf	M_control@ctr,w
  2674  0E48  042D               	iorwf	M_control@ctr+1,w
  2675  0E49  1D03               	btfss	3,2
  2676  0E4A  2E51               	goto	l3268
  2677                           
  2678                           ;main.c: 237: {;main.c: 238: PWM_set_duty(ctr);
  2679  0E4B  082D               	movf	M_control@ctr+1,w
  2680  0E4C  00A3               	movwf	PWM_set_duty@duty+1
  2681  0E4D  082C               	movf	M_control@ctr,w
  2682  0E4E  00A2               	movwf	PWM_set_duty@duty
  2683  0E4F  2741  3188         	fcall	_PWM_set_duty
  2684  0E51                     l3268:	
  2685                           
  2686                           ;main.c: 239: };main.c: 240: if (ctr > 0)
  2687  0E51  0020               	movlb	0	; select bank0
  2688  0E52  082D               	movf	M_control@ctr+1,w
  2689  0E53  3A80               	xorlw	128
  2690  0E54  00AE               	movwf	??_M_control
  2691  0E55  3080               	movlw	128
  2692  0E56  022E               	subwf	??_M_control,w
  2693  0E57  1D03               	skipz
  2694  0E58  2E5B               	goto	u3725
  2695  0E59  3001               	movlw	1
  2696  0E5A  022C               	subwf	M_control@ctr,w
  2697  0E5B                     u3725:	
  2698  0E5B  1C03               	skipc
  2699  0E5C  2E66               	goto	l3274
  2700                           
  2701                           ;main.c: 241: {;main.c: 242: LATAbits.LATA0 = 1;
  2702  0E5D  0022               	movlb	2	; select bank2
  2703  0E5E  140C               	bsf	12,0	;volatile
  2704                           
  2705                           ;main.c: 243: PWM_set_duty(ctr);
  2706  0E5F  0020               	movlb	0	; select bank0
  2707  0E60  082D               	movf	M_control@ctr+1,w
  2708  0E61  00A3               	movwf	PWM_set_duty@duty+1
  2709  0E62  082C               	movf	M_control@ctr,w
  2710  0E63  00A2               	movwf	PWM_set_duty@duty
  2711  0E64  2741  3188         	fcall	_PWM_set_duty
  2712  0E66                     l3274:	
  2713                           
  2714                           ;main.c: 244: };main.c: 245: if (ctr < 0)
  2715  0E66  0020               	movlb	0	; select bank0
  2716  0E67  1FAD               	btfss	M_control@ctr+1,7
  2717  0E68  0008               	return
  2718                           
  2719                           ;main.c: 246: {;main.c: 247: LATAbits.LATA0 = 0;
  2720  0E69  0022               	movlb	2	; select bank2
  2721  0E6A  100C               	bcf	12,0	;volatile
  2722                           
  2723                           ;main.c: 248: ctr = ctr * -1;
  2724  0E6B  30FF               	movlw	255
  2725  0E6C  0020               	movlb	0	; select bank0
  2726  0E6D  00A2               	movwf	___wmul@multiplier
  2727  0E6E  00A3               	movwf	___wmul@multiplier+1
  2728  0E6F  082D               	movf	M_control@ctr+1,w
  2729  0E70  00A5               	movwf	___wmul@multiplicand+1
  2730  0E71  082C               	movf	M_control@ctr,w
  2731  0E72  00A4               	movwf	___wmul@multiplicand
  2732  0E73  27EB  3188         	fcall	___wmul
  2733  0E75  0823               	movf	?___wmul+1,w
  2734  0E76  00AD               	movwf	M_control@ctr+1
  2735  0E77  0822               	movf	?___wmul,w
  2736  0E78  00AC               	movwf	M_control@ctr
  2737                           
  2738                           ;main.c: 249: PWM_set_duty(ctr);
  2739  0E79  082D               	movf	M_control@ctr+1,w
  2740  0E7A  00A3               	movwf	PWM_set_duty@duty+1
  2741  0E7B  082C               	movf	M_control@ctr,w
  2742  0E7C  00A2               	movwf	PWM_set_duty@duty
  2743  0E7D  2F41               	ljmp	l3014
  2744  0E7E                     __end_of_M_control:	
  2745  0E7E                     __ptext11:	
  2746 ;; *************** function ___xxtofl *****************
  2747 ;; Defined at:
  2748 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\xxtofl.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  sign            1    wreg     unsigned char 
  2751 ;;  val             4    6[BANK0 ] long 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  sign            1   14[BANK0 ] unsigned char 
  2754 ;;  arg             4   16[BANK0 ] unsigned long 
  2755 ;;  exp             1   15[BANK0 ] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  4    6[BANK0 ] unsigned char 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0
  2760 ;; Tracked objects:
  2761 ;;		On entry : 1F/0
  2762 ;;		On exit  : 1F/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2765 ;;      Params:         0       4       0       0
  2766 ;;      Locals:         0       6       0       0
  2767 ;;      Temps:          0       4       0       0
  2768 ;;      Totals:         0      14       0       0
  2769 ;;Total ram usage:       14 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    2
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_calculate_pidA
  2776 ;;		_calculate_pidM
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           
  2781                           ;psect for function ___xxtofl
  2782  0E7E                     ___xxtofl:	
  2783                           
  2784                           ;incstack = 0
  2785                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  2786                           ;___xxtofl@sign stored from wreg
  2787  0E7E  00AE               	movwf	___xxtofl@sign
  2788  0E7F  082E               	movf	___xxtofl@sign,w
  2789  0E80  1D03               	btfss	3,2
  2790  0E81  1FA9               	btfss	___xxtofl@val+3,7
  2791  0E82  2E93               	goto	l3468
  2792  0E83  0926               	comf	___xxtofl@val,w
  2793  0E84  00B0               	movwf	___xxtofl@arg
  2794  0E85  0927               	comf	___xxtofl@val+1,w
  2795  0E86  00B1               	movwf	___xxtofl@arg+1
  2796  0E87  0928               	comf	___xxtofl@val+2,w
  2797  0E88  00B2               	movwf	___xxtofl@arg+2
  2798  0E89  0929               	comf	___xxtofl@val+3,w
  2799  0E8A  00B3               	movwf	___xxtofl@arg+3
  2800  0E8B  0AB0               	incf	___xxtofl@arg,f
  2801  0E8C  1903               	skipnz
  2802  0E8D  0AB1               	incf	___xxtofl@arg+1,f
  2803  0E8E  1903               	skipnz
  2804  0E8F  0AB2               	incf	___xxtofl@arg+2,f
  2805  0E90  1903               	skipnz
  2806  0E91  0AB3               	incf	___xxtofl@arg+3,f
  2807  0E92  2E9B               	goto	l736
  2808  0E93                     l3468:	
  2809  0E93  0829               	movf	___xxtofl@val+3,w
  2810  0E94  00B3               	movwf	___xxtofl@arg+3
  2811  0E95  0828               	movf	___xxtofl@val+2,w
  2812  0E96  00B2               	movwf	___xxtofl@arg+2
  2813  0E97  0827               	movf	___xxtofl@val+1,w
  2814  0E98  00B1               	movwf	___xxtofl@arg+1
  2815  0E99  0826               	movf	___xxtofl@val,w
  2816  0E9A  00B0               	movwf	___xxtofl@arg
  2817  0E9B                     l736:	
  2818  0E9B  0829               	movf	___xxtofl@val+3,w
  2819  0E9C  0428               	iorwf	___xxtofl@val+2,w
  2820  0E9D  0427               	iorwf	___xxtofl@val+1,w
  2821  0E9E  0426               	iorwf	___xxtofl@val,w
  2822  0E9F  1D03               	skipz
  2823  0EA0  2EA6               	goto	l3472
  2824  0EA1  01A6               	clrf	?___xxtofl
  2825  0EA2  01A7               	clrf	?___xxtofl+1
  2826  0EA3  01A8               	clrf	?___xxtofl+2
  2827  0EA4  01A9               	clrf	?___xxtofl+3
  2828  0EA5  0008               	return
  2829  0EA6                     l3472:	
  2830  0EA6  3096               	movlw	150
  2831  0EA7  00AF               	movwf	___xxtofl@exp
  2832  0EA8                     l3476:	
  2833  0EA8  30FE               	movlw	254
  2834  0EA9  0533               	andwf	___xxtofl@arg+3,w
  2835  0EAA  1903               	btfsc	3,2
  2836  0EAB  2EBD               	goto	l3484
  2837  0EAC  0AAF               	incf	___xxtofl@exp,f
  2838  0EAD  36B3               	lsrf	___xxtofl@arg+3,f
  2839  0EAE  0CB2               	rrf	___xxtofl@arg+2,f
  2840  0EAF  0CB1               	rrf	___xxtofl@arg+1,f
  2841  0EB0  0CB0               	rrf	___xxtofl@arg,f
  2842  0EB1  2EA8               	goto	l3476
  2843  0EB2                     l3478:	
  2844  0EB2  3001               	movlw	1
  2845  0EB3  0AAF               	incf	___xxtofl@exp,f
  2846  0EB4  07B0               	addwf	___xxtofl@arg,f
  2847  0EB5  3000               	movlw	0
  2848  0EB6  3DB1               	addwfc	___xxtofl@arg+1,f
  2849  0EB7  3DB2               	addwfc	___xxtofl@arg+2,f
  2850  0EB8  3DB3               	addwfc	___xxtofl@arg+3,f
  2851  0EB9  36B3               	lsrf	___xxtofl@arg+3,f
  2852  0EBA  0CB2               	rrf	___xxtofl@arg+2,f
  2853  0EBB  0CB1               	rrf	___xxtofl@arg+1,f
  2854  0EBC  0CB0               	rrf	___xxtofl@arg,f
  2855  0EBD                     l3484:	
  2856  0EBD  30FF               	movlw	255
  2857  0EBE  0533               	andwf	___xxtofl@arg+3,w
  2858  0EBF  1903               	btfsc	3,2
  2859  0EC0  2ECB               	goto	l3488
  2860  0EC1  2EB2               	goto	l3478
  2861  0EC2                     l3490:	
  2862  0EC2  3002               	movlw	2
  2863  0EC3  022F               	subwf	___xxtofl@exp,w
  2864  0EC4  1C03               	btfss	3,0
  2865  0EC5  2ECD               	goto	l749
  2866  0EC6  03AF               	decf	___xxtofl@exp,f
  2867  0EC7  35B0               	lslf	___xxtofl@arg,f
  2868  0EC8  0DB1               	rlf	___xxtofl@arg+1,f
  2869  0EC9  0DB2               	rlf	___xxtofl@arg+2,f
  2870  0ECA  0DB3               	rlf	___xxtofl@arg+3,f
  2871  0ECB                     l3488:	
  2872  0ECB  1FB2               	btfss	___xxtofl@arg+2,7
  2873  0ECC  2EC2               	goto	l3490
  2874  0ECD                     l749:	
  2875  0ECD  1C2F               	btfss	___xxtofl@exp,0
  2876  0ECE  13B2               	bcf	___xxtofl@arg+2,7
  2877  0ECF  36AF               	lsrf	___xxtofl@exp,f
  2878  0ED0  082F               	movf	___xxtofl@exp,w
  2879  0ED1  00AD               	movwf	??___xxtofl+3
  2880  0ED2  01AC               	clrf	??___xxtofl+2
  2881  0ED3  01AB               	clrf	??___xxtofl+1
  2882  0ED4  01AA               	clrf	??___xxtofl
  2883  0ED5  082A               	movf	??___xxtofl,w
  2884  0ED6  04B0               	iorwf	___xxtofl@arg,f
  2885  0ED7  082B               	movf	??___xxtofl+1,w
  2886  0ED8  04B1               	iorwf	___xxtofl@arg+1,f
  2887  0ED9  082C               	movf	??___xxtofl+2,w
  2888  0EDA  04B2               	iorwf	___xxtofl@arg+2,f
  2889  0EDB  082D               	movf	??___xxtofl+3,w
  2890  0EDC  04B3               	iorwf	___xxtofl@arg+3,f
  2891  0EDD  082E               	movf	___xxtofl@sign,w
  2892  0EDE  1D03               	btfss	3,2
  2893  0EDF  1FA9               	btfss	___xxtofl@val+3,7
  2894  0EE0  2EE2               	goto	l3502
  2895  0EE1  17B3               	bsf	___xxtofl@arg+3,7
  2896  0EE2                     l3502:	
  2897  0EE2  0833               	movf	___xxtofl@arg+3,w
  2898  0EE3  00A9               	movwf	?___xxtofl+3
  2899  0EE4  0832               	movf	___xxtofl@arg+2,w
  2900  0EE5  00A8               	movwf	?___xxtofl+2
  2901  0EE6  0831               	movf	___xxtofl@arg+1,w
  2902  0EE7  00A7               	movwf	?___xxtofl+1
  2903  0EE8  0830               	movf	___xxtofl@arg,w
  2904  0EE9  00A6               	movwf	?___xxtofl
  2905  0EEA  0008               	return
  2906  0EEB                     __end_of___xxtofl:	
  2907  0EEB                     __ptext1:	
  2908 ;; *************** function _pre_pidM *****************
  2909 ;; Defined at:
  2910 ;;		line 293 in file "main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  set             2   71[BANK0 ] int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 1F/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2924 ;;      Params:         0       2       0       0
  2925 ;;      Locals:         0       0       0       0
  2926 ;;      Temps:          0       2       0       0
  2927 ;;      Totals:         0       4       0       0
  2928 ;;Total ram usage:        4 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    5
  2931 ;; This function calls:
  2932 ;;		_calculate_pidM
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           
  2939                           ;psect for function _pre_pidM
  2940  0EEB                     _pre_pidM:	
  2941                           
  2942                           ;main.c: 295: zero_cross = ((lset^set) < 0);
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in _pre_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2946  0EEB  0867               	movf	pre_pidM@set,w
  2947  0EEC  0021               	movlb	1	; select bank1
  2948  0EED  064D               	xorwf	_lset^(0+128),w
  2949  0EEE  0020               	movlb	0	; select bank0
  2950  0EEF  00E9               	movwf	??_pre_pidM
  2951  0EF0  0868               	movf	pre_pidM@set+1,w
  2952  0EF1  0021               	movlb	1	; select bank1
  2953  0EF2  064E               	xorwf	(_lset+1)^(0+128),w
  2954  0EF3  0020               	movlb	0	; select bank0
  2955  0EF4  00EA               	movwf	??_pre_pidM+1
  2956  0EF5  1FEA               	btfss	??_pre_pidM+1,7
  2957  0EF6  2EFA               	goto	u4190
  2958  0EF7  0020               	movlb	0	; select bank0
  2959  0EF8  146F               	bsf	_zero_cross/(0+8),_zero_cross& (0+7)
  2960  0EF9  2EFC               	goto	u4204
  2961  0EFA                     u4190:	
  2962  0EFA  0020               	movlb	0	; select bank0
  2963  0EFB  106F               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  2964  0EFC                     u4204:	
  2965                           
  2966                           ;main.c: 296: if (((zero_cross == 1) &(set <= 0) & (lset <= 0)))
  2967  0EFC  0868               	movf	pre_pidM@set+1,w
  2968  0EFD  3A80               	xorlw	128
  2969  0EFE  00E9               	movwf	??_pre_pidM
  2970  0EFF  3080               	movlw	128
  2971  0F00  0269               	subwf	??_pre_pidM,w
  2972  0F01  1D03               	skipz
  2973  0F02  2F05               	goto	u4215
  2974  0F03  3001               	movlw	1
  2975  0F04  0267               	subwf	pre_pidM@set,w
  2976  0F05                     u4215:	
  2977  0F05  1803               	skipnc
  2978  0F06  2F1A               	goto	l147
  2979  0F07  0020               	movlb	0	; select bank0
  2980  0F08  1C6F               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  2981  0F09  2F1A               	goto	l147
  2982  0F0A  0021               	movlb	1	; select bank1
  2983  0F0B  084E               	movf	(_lset+1)^(0+128),w
  2984  0F0C  3A80               	xorlw	128
  2985  0F0D  0020               	movlb	0	; select bank0
  2986  0F0E  00E9               	movwf	??_pre_pidM
  2987  0F0F  3080               	movlw	128
  2988  0F10  0269               	subwf	??_pre_pidM,w
  2989  0F11  1D03               	skipz
  2990  0F12  2F16               	goto	u4235
  2991  0F13  3001               	movlw	1
  2992  0F14  0021               	movlb	1	; select bank1
  2993  0F15  024D               	subwf	_lset^(0+128),w
  2994  0F16                     u4235:	
  2995  0F16  1803               	skipnc
  2996  0F17  2F1A               	goto	l147
  2997                           
  2998                           ;main.c: 297: {;main.c: 298: zero_cross = 0;
  2999  0F18  0020               	movlb	0	; select bank0
  3000  0F19  106F               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  3001  0F1A                     l147:	
  3002                           
  3003                           ;main.c: 299: };main.c: 300: if (zero_cross == 1) {
  3004  0F1A  0020               	movlb	0	; select bank0
  3005  0F1B  1C6F               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  3006  0F1C  2F32               	goto	l3564
  3007  0F1D                     l3558:	
  3008                           
  3009                           ;main.c: 302: calculate_pidM(0);
  3010  0F1D  0020               	movlb	0	; select bank0
  3011  0F1E  01E5               	clrf	calculate_pidM@set
  3012  0F1F  01E6               	clrf	calculate_pidM@set+1
  3013  0F20  3180  20C0  3188   	fcall	_calculate_pidM
  3014  0F23  0064               	clrwdt	;# 
  3015                           
  3016                           ;main.c: 304: _delay((unsigned long)((5)*(32000000/4000.0)));
  3017  0F24  3034               	movlw	52
  3018  0F25  0020               	movlb	0	; select bank0
  3019  0F26  00E9               	movwf	??_pre_pidM
  3020  0F27  30F1               	movlw	241
  3021  0F28                     u4807:	
  3022  0F28  0B89               	decfsz	9,f
  3023  0F29  2F28               	goto	u4807
  3024  0F2A  0BE9               	decfsz	??_pre_pidM,f
  3025  0F2B  2F28               	goto	u4807
  3026  0F2C  3200               	nop2
  3027                           
  3028                           ;main.c: 305: } while ((I2C_buffer.data.RPM != 0));
  3029  0F2D  0021               	movlb	1	; select bank1
  3030  0F2E  082B               	movf	(_I2C_buffer^(0+128)+11),w	;volatile
  3031  0F2F  042C               	iorwf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  3032  0F30  1D03               	btfss	3,2
  3033  0F31  2F1D               	goto	l3558
  3034  0F32                     l3564:	
  3035                           
  3036                           ;main.c: 306: };main.c: 307: lset = set;
  3037  0F32  0020               	movlb	0	; select bank0
  3038  0F33  0868               	movf	pre_pidM@set+1,w
  3039  0F34  0021               	movlb	1	; select bank1
  3040  0F35  00CE               	movwf	(_lset+1)^(0+128)
  3041  0F36  0020               	movlb	0	; select bank0
  3042  0F37  0867               	movf	pre_pidM@set,w
  3043  0F38  0021               	movlb	1	; select bank1
  3044  0F39  00CD               	movwf	_lset^(0+128)
  3045                           
  3046                           ;main.c: 308: calculate_pidM(set);
  3047  0F3A  0020               	movlb	0	; select bank0
  3048  0F3B  0868               	movf	pre_pidM@set+1,w
  3049  0F3C  00E6               	movwf	calculate_pidM@set+1
  3050  0F3D  0867               	movf	pre_pidM@set,w
  3051  0F3E  00E5               	movwf	calculate_pidM@set
  3052  0F3F  3180  28C0         	ljmp	l3506
  3053  0F41                     __end_of_pre_pidM:	
  3054  0F41                     __ptext5:	
  3055 ;; *************** function _PWM_set_duty *****************
  3056 ;; Defined at:
  3057 ;;		line 225 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  duty            2    2[BANK0 ] int 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  2    2[BANK0 ] int 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0
  3066 ;; Tracked objects:
  3067 ;;		On entry : 1F/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3071 ;;      Params:         0       2       0       0
  3072 ;;      Locals:         0       0       0       0
  3073 ;;      Temps:          0       2       0       0
  3074 ;;      Totals:         0       4       0       0
  3075 ;;Total ram usage:        4 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    2
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_M_control
  3082 ;;		_main
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           
  3087                           ;psect for function _PWM_set_duty
  3088  0F41                     _PWM_set_duty:	
  3089  0F41                     l3014:	
  3090                           ;incstack = 0
  3091                           ; Regs used in _PWM_set_duty: [wreg+status,2+status,0]
  3092                           
  3093                           
  3094                           ;main.c: 227: if (duty < 1024) {
  3095  0F41  0823               	movf	PWM_set_duty@duty+1,w
  3096  0F42  3A80               	xorlw	128
  3097  0F43  00A4               	movwf	??_PWM_set_duty
  3098  0F44  3084               	movlw	132
  3099  0F45  0224               	subwf	??_PWM_set_duty,w
  3100  0F46  1D03               	skipz
  3101  0F47  2F4A               	goto	u3215
  3102  0F48  3000               	movlw	0
  3103  0F49  0222               	subwf	PWM_set_duty@duty,w
  3104  0F4A                     u3215:	
  3105  0F4A  1803               	skipnc
  3106  0F4B  0008               	return
  3107                           
  3108                           ;main.c: 228: CCPR1L = (0xFF & ((unsigned int) duty >> 2));
  3109  0F4C  0020               	movlb	0	; select bank0
  3110  0F4D  0823               	movf	PWM_set_duty@duty+1,w
  3111  0F4E  00A5               	movwf	??_PWM_set_duty+1
  3112  0F4F  0822               	movf	PWM_set_duty@duty,w
  3113  0F50  00A4               	movwf	??_PWM_set_duty
  3114  0F51  36A5               	lsrf	??_PWM_set_duty+1,f
  3115  0F52  0CA4               	rrf	??_PWM_set_duty,f
  3116  0F53  36A5               	lsrf	??_PWM_set_duty+1,f
  3117  0F54  0CA4               	rrf	??_PWM_set_duty,f
  3118  0F55  0824               	movf	??_PWM_set_duty,w
  3119  0F56  0025               	movlb	5	; select bank5
  3120  0F57  0091               	movwf	17	;volatile
  3121                           
  3122                           ;main.c: 229: CCP1CON = (0x0C | (0x30 & ((unsigned int) duty << 4)));
  3123  0F58  0020               	movlb	0	; select bank0
  3124  0F59  0E22               	swapf	PWM_set_duty@duty,w
  3125  0F5A  39F0               	andlw	240
  3126  0F5B  3930               	andlw	48
  3127  0F5C  380C               	iorlw	12
  3128  0F5D  0025               	movlb	5	; select bank5
  3129  0F5E  0093               	movwf	19	;volatile
  3130  0F5F  0008               	return
  3131  0F60                     __end_of_PWM_set_duty:	
  3132  0F60                     __ptext17:	
  3133 ;; *************** function ___flge *****************
  3134 ;; Defined at:
  3135 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\flge.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  ff1             4   20[BANK0 ] unsigned int 
  3138 ;;  ff2             4   24[BANK0 ] unsigned int 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;		None               void
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0
  3145 ;; Tracked objects:
  3146 ;;		On entry : 1F/0
  3147 ;;		On exit  : 1F/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3150 ;;      Params:         0       8       0       0
  3151 ;;      Locals:         0       0       0       0
  3152 ;;      Temps:          0       4       0       0
  3153 ;;      Totals:         0      12       0       0
  3154 ;;Total ram usage:       12 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    2
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_calculate_pidA
  3161 ;;		_calculate_pidM
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           
  3166                           ;psect for function ___flge
  3167  0F60                     ___flge:	
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in ___flge: [wreg+status,2+status,0]
  3171  0F60  3080               	movlw	128
  3172  0F61  01BC               	clrf	??___flge
  3173  0F62  01BD               	clrf	??___flge+1
  3174  0F63  0536               	andwf	___flge@ff1+2,w
  3175  0F64  00BE               	movwf	??___flge+2
  3176  0F65  307F               	movlw	127
  3177  0F66  0537               	andwf	___flge@ff1+3,w
  3178  0F67  00BF               	movwf	??___flge+3
  3179  0F68  043E               	iorwf	??___flge+2,w
  3180  0F69  043D               	iorwf	??___flge+1,w
  3181  0F6A  043C               	iorwf	??___flge,w
  3182  0F6B  1D03               	skipz
  3183  0F6C  2F71               	goto	l3284
  3184  0F6D  01B4               	clrf	___flge@ff1
  3185  0F6E  01B5               	clrf	___flge@ff1+1
  3186  0F6F  01B6               	clrf	___flge@ff1+2
  3187  0F70  01B7               	clrf	___flge@ff1+3
  3188  0F71                     l3284:	
  3189  0F71  3080               	movlw	128
  3190  0F72  01BC               	clrf	??___flge
  3191  0F73  01BD               	clrf	??___flge+1
  3192  0F74  053A               	andwf	___flge@ff2+2,w
  3193  0F75  00BE               	movwf	??___flge+2
  3194  0F76  307F               	movlw	127
  3195  0F77  053B               	andwf	___flge@ff2+3,w
  3196  0F78  00BF               	movwf	??___flge+3
  3197  0F79  043E               	iorwf	??___flge+2,w
  3198  0F7A  043D               	iorwf	??___flge+1,w
  3199  0F7B  043C               	iorwf	??___flge,w
  3200  0F7C  1D03               	skipz
  3201  0F7D  2F82               	goto	l503
  3202  0F7E  01B8               	clrf	___flge@ff2
  3203  0F7F  01B9               	clrf	___flge@ff2+1
  3204  0F80  01BA               	clrf	___flge@ff2+2
  3205  0F81  01BB               	clrf	___flge@ff2+3
  3206  0F82                     l503:	
  3207  0F82  1FB7               	btfss	___flge@ff1+3,7
  3208  0F83  2F99               	goto	l3290
  3209  0F84  3080               	movlw	128
  3210  0F85  01BC               	clrf	??___flge
  3211  0F86  01BD               	clrf	??___flge+1
  3212  0F87  01BE               	clrf	??___flge+2
  3213  0F88  00BF               	movwf	??___flge+3
  3214  0F89  0834               	movf	___flge@ff1,w
  3215  0F8A  02BC               	subwf	??___flge,f
  3216  0F8B  0835               	movf	___flge@ff1+1,w
  3217  0F8C  3BBD               	subwfb	??___flge+1,f
  3218  0F8D  0836               	movf	___flge@ff1+2,w
  3219  0F8E  3BBE               	subwfb	??___flge+2,f
  3220  0F8F  0837               	movf	___flge@ff1+3,w
  3221  0F90  3BBF               	subwfb	??___flge+3,f
  3222  0F91  083F               	movf	??___flge+3,w
  3223  0F92  00B7               	movwf	___flge@ff1+3
  3224  0F93  083E               	movf	??___flge+2,w
  3225  0F94  00B6               	movwf	___flge@ff1+2
  3226  0F95  083D               	movf	??___flge+1,w
  3227  0F96  00B5               	movwf	___flge@ff1+1
  3228  0F97  083C               	movf	??___flge,w
  3229  0F98  00B4               	movwf	___flge@ff1
  3230  0F99                     l3290:	
  3231  0F99  1FBB               	btfss	___flge@ff2+3,7
  3232  0F9A  2FB0               	goto	l505
  3233  0F9B  3080               	movlw	128
  3234  0F9C  01BC               	clrf	??___flge
  3235  0F9D  01BD               	clrf	??___flge+1
  3236  0F9E  01BE               	clrf	??___flge+2
  3237  0F9F  00BF               	movwf	??___flge+3
  3238  0FA0  0838               	movf	___flge@ff2,w
  3239  0FA1  02BC               	subwf	??___flge,f
  3240  0FA2  0839               	movf	___flge@ff2+1,w
  3241  0FA3  3BBD               	subwfb	??___flge+1,f
  3242  0FA4  083A               	movf	___flge@ff2+2,w
  3243  0FA5  3BBE               	subwfb	??___flge+2,f
  3244  0FA6  083B               	movf	___flge@ff2+3,w
  3245  0FA7  3BBF               	subwfb	??___flge+3,f
  3246  0FA8  083F               	movf	??___flge+3,w
  3247  0FA9  00BB               	movwf	___flge@ff2+3
  3248  0FAA  083E               	movf	??___flge+2,w
  3249  0FAB  00BA               	movwf	___flge@ff2+2
  3250  0FAC  083D               	movf	??___flge+1,w
  3251  0FAD  00B9               	movwf	___flge@ff2+1
  3252  0FAE  083C               	movf	??___flge,w
  3253  0FAF  00B8               	movwf	___flge@ff2
  3254  0FB0                     l505:	
  3255  0FB0  3080               	movlw	128
  3256  0FB1  06B7               	xorwf	___flge@ff1+3,f
  3257  0FB2  06BB               	xorwf	___flge@ff2+3,f
  3258  0FB3  083B               	movf	___flge@ff2+3,w
  3259  0FB4  0237               	subwf	___flge@ff1+3,w
  3260  0FB5  1D03               	skipz
  3261  0FB6  0008               	return
  3262  0FB7  083A               	movf	___flge@ff2+2,w
  3263  0FB8  0236               	subwf	___flge@ff1+2,w
  3264  0FB9  1D03               	skipz
  3265  0FBA  0008               	return
  3266  0FBB  0839               	movf	___flge@ff2+1,w
  3267  0FBC  0235               	subwf	___flge@ff1+1,w
  3268  0FBD  1D03               	skipz
  3269  0FBE  0008               	return
  3270  0FBF  0838               	movf	___flge@ff2,w
  3271  0FC0  0234               	subwf	___flge@ff1,w
  3272  0FC1  0008               	return
  3273  0FC2                     __end_of___flge:	
  3274  0FC2                     __ptext18:	
  3275 ;; *************** function _PWM_Init *****************
  3276 ;; Defined at:
  3277 ;;		line 188 in file "main.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  2  123[None  ] int 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2
  3286 ;; Tracked objects:
  3287 ;;		On entry : 1F/1
  3288 ;;		On exit  : 1F/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3291 ;;      Params:         0       0       0       0
  3292 ;;      Locals:         0       0       0       0
  3293 ;;      Temps:          0       0       0       0
  3294 ;;      Totals:         0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    2
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _PWM_Init
  3307  0FC2                     _PWM_Init:	
  3308                           
  3309                           ;main.c: 209: PR2 = 0xFF;
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _PWM_Init: [wreg+status,2]
  3313  0FC2  30FF               	movlw	255
  3314  0FC3  0020               	movlb	0	; select bank0
  3315  0FC4  009B               	movwf	27	;volatile
  3316                           
  3317                           ;main.c: 210: CCP1CON = 0b00001100;
  3318  0FC5  300C               	movlw	12
  3319  0FC6  0025               	movlb	5	; select bank5
  3320  0FC7  0093               	movwf	19	;volatile
  3321                           
  3322                           ;main.c: 211: CCPR1L = 0b00000000;
  3323  0FC8  0191               	clrf	17	;volatile
  3324                           
  3325                           ;main.c: 212: PIR1bits.TMR2IF = 0;
  3326  0FC9  0020               	movlb	0	; select bank0
  3327  0FCA  1091               	bcf	17,1	;volatile
  3328                           
  3329                           ;main.c: 213: T2CON = 0b00000100;
  3330  0FCB  3004               	movlw	4
  3331  0FCC  009C               	movwf	28	;volatile
  3332  0FCD  0008               	return
  3333  0FCE                     __end_of_PWM_Init:	
  3334  0FCE                     __ptext13:	
  3335 ;; *************** function ___flsub *****************
  3336 ;; Defined at:
  3337 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  a               4   55[BANK0 ] long 
  3340 ;;  b               4   59[BANK0 ] long 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  4   55[BANK0 ] long 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 1F/0
  3349 ;;		On exit  : 1F/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3352 ;;      Params:         0       8       0       0
  3353 ;;      Locals:         0       0       0       0
  3354 ;;      Temps:          0       0       0       0
  3355 ;;      Totals:         0       8       0       0
  3356 ;;Total ram usage:        8 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    3
  3359 ;; This function calls:
  3360 ;;		___fladd
  3361 ;; This function is called by:
  3362 ;;		_calculate_pidA
  3363 ;;		_calculate_pidM
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function ___flsub
  3369  0FCE                     ___flsub:	
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  3373  0FCE  3080               	movlw	128
  3374  0FCF  06DA               	xorwf	___flsub@a+3,f
  3375  0FD0  085E               	movf	___flsub@b+3,w
  3376  0FD1  00C6               	movwf	___fladd@b+3
  3377  0FD2  085D               	movf	___flsub@b+2,w
  3378  0FD3  00C5               	movwf	___fladd@b+2
  3379  0FD4  085C               	movf	___flsub@b+1,w
  3380  0FD5  00C4               	movwf	___fladd@b+1
  3381  0FD6  085B               	movf	___flsub@b,w
  3382  0FD7  00C3               	movwf	___fladd@b
  3383  0FD8  085A               	movf	___flsub@a+3,w
  3384  0FD9  00CA               	movwf	___fladd@a+3
  3385  0FDA  0859               	movf	___flsub@a+2,w
  3386  0FDB  00C9               	movwf	___fladd@a+2
  3387  0FDC  0858               	movf	___flsub@a+1,w
  3388  0FDD  00C8               	movwf	___fladd@a+1
  3389  0FDE  0857               	movf	___flsub@a,w
  3390  0FDF  00C7               	movwf	___fladd@a
  3391  0FE0  3184  2491         	fcall	___fladd
  3392  0FE2  0846               	movf	?___fladd+3,w
  3393  0FE3  00DA               	movwf	?___flsub+3
  3394  0FE4  0845               	movf	?___fladd+2,w
  3395  0FE5  00D9               	movwf	?___flsub+2
  3396  0FE6  0844               	movf	?___fladd+1,w
  3397  0FE7  00D8               	movwf	?___flsub+1
  3398  0FE8  0843               	movf	?___fladd,w
  3399  0FE9  00D7               	movwf	?___flsub
  3400  0FEA  0008               	return
  3401  0FEB                     __end_of___flsub:	
  3402  0FEB                     __ptext4:	
  3403 ;; *************** function ___wmul *****************
  3404 ;; Defined at:
  3405 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  multiplier      2    2[BANK0 ] unsigned int 
  3408 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  product         2    6[BANK0 ] unsigned int 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2    2[BANK0 ] unsigned int 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 1F/0
  3417 ;;		On exit  : 1F/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3420 ;;      Params:         0       4       0       0
  3421 ;;      Locals:         0       2       0       0
  3422 ;;      Temps:          0       0       0       0
  3423 ;;      Totals:         0       6       0       0
  3424 ;;Total ram usage:        6 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    2
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_M_control
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function ___wmul
  3436  0FEB                     ___wmul:	
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3440  0FEB  01A6               	clrf	___wmul@product
  3441  0FEC  01A7               	clrf	___wmul@product+1
  3442  0FED                     l3020:	
  3443  0FED  1C22               	btfss	___wmul@multiplier,0
  3444  0FEE  2FF3               	goto	l3024
  3445  0FEF  0824               	movf	___wmul@multiplicand,w
  3446  0FF0  07A6               	addwf	___wmul@product,f
  3447  0FF1  0825               	movf	___wmul@multiplicand+1,w
  3448  0FF2  3DA7               	addwfc	___wmul@product+1,f
  3449  0FF3                     l3024:	
  3450  0FF3  35A4               	lslf	___wmul@multiplicand,f
  3451  0FF4  0DA5               	rlf	___wmul@multiplicand+1,f
  3452  0FF5  36A3               	lsrf	___wmul@multiplier+1,f
  3453  0FF6  0CA2               	rrf	___wmul@multiplier,f
  3454  0FF7  0822               	movf	___wmul@multiplier,w
  3455  0FF8  0423               	iorwf	___wmul@multiplier+1,w
  3456  0FF9  1D03               	btfss	3,2
  3457  0FFA  2FED               	goto	l3020
  3458  0FFB  0827               	movf	___wmul@product+1,w
  3459  0FFC  00A3               	movwf	?___wmul+1
  3460  0FFD  0826               	movf	___wmul@product,w
  3461  0FFE  00A2               	movwf	?___wmul
  3462  0FFF  0008               	return
  3463  1000                     __end_of___wmul:	
  3464                           
  3465                           	psect	bitbssCOMMON
  3466  03E8                     __pbitbssCOMMON:	
  3467  03E8                     _loadDistance:	
  3468  03E8                     	ds	1
  3469                           
  3470                           	psect	bitbssBANK0
  3471  0378                     __pbitbssBANK0:	
  3472  0378                     _zero_cross:	
  3473  0378                     	ds	1
  3474                           
  3475                           	psect	bssBANK0
  3476  006B                     __pbssBANK0:	
  3477  006B                     _auxDistance:	
  3478  006B                     	ds	4
  3479                           
  3480                           	psect	bssBANK1
  3481  00A0                     __pbssBANK1:	
  3482  00A0                     _I2C_buffer:	
  3483  00A0                     	ds	43
  3484  00CB                     _stable:	
  3485  00CB                     	ds	2
  3486  00CD                     _lset:	
  3487  00CD                     	ds	2
  3488  00CF                     _counter:	
  3489  00CF                     	ds	2
  3490  00D1                     _index_i2c:	
  3491  00D1                     	ds	1
  3492                           
  3493                           	psect	dataBANK1
  3494  00EF                     __pdataBANK1:	
  3495  00EF                     _first_i2c:	
  3496  00EF                     	ds	1
  3497                           
  3498                           	psect	bssBANK2
  3499  0120                     __pbssBANK2:	
  3500  0120                     _lasterrorA:	
  3501  0120                     	ds	4
  3502  0124                     _accumulatorA:	
  3503  0124                     	ds	4
  3504  0128                     _lasterrorM:	
  3505  0128                     	ds	4
  3506  012C                     _accumulatorM:	
  3507  012C                     	ds	4
  3508                           
  3509                           	psect	clrtext
  3510  06E1                     clear_ram0:	
  3511                           ;	Called with FSR0 containing the base address, and
  3512                           ;	WREG with the size to clear
  3513                           
  3514  06E1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3515  06E2                     clrloop0:	
  3516  06E2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3517  06E3  3101               	addfsr 0,1
  3518  06E4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3519  06E5  2EE2               	goto	clrloop0	;have we reached the end yet?
  3520  06E6  3400               	retlw	0	;all done for this memory range, return
  3521                           
  3522                           	psect	cstackBANK1
  3523  00D2                     __pcstackBANK1:	
  3524  00D2                     _calculate_pidA$1318:	
  3525                           
  3526                           ; 4 bytes @ 0x0
  3527  00D2                     	ds	4
  3528  00D6                     calculate_pidA@error:	
  3529                           
  3530                           ; 4 bytes @ 0x4
  3531  00D6                     	ds	4
  3532  00DA                     calculate_pidA@pid:	
  3533                           
  3534                           ; 4 bytes @ 0x8
  3535  00DA                     	ds	4
  3536  00DE                     _calculate_pidM$1319:	
  3537                           
  3538                           ; 4 bytes @ 0xC
  3539  00DE                     	ds	4
  3540  00E2                     calculate_pidM@error:	
  3541                           
  3542                           ; 4 bytes @ 0x10
  3543  00E2                     	ds	4
  3544  00E6                     calculate_pidM@pid:	
  3545                           
  3546                           ; 4 bytes @ 0x14
  3547  00E6                     	ds	4
  3548  00EA                     ??_main:	
  3549                           
  3550                           ; 1 bytes @ 0x18
  3551  00EA                     	ds	5
  3552                           
  3553                           	psect	cstackCOMMON
  3554  0070                     __pcstackCOMMON:	
  3555  0070                     ?_eeprom_read:	
  3556  0070                     ?_isr:	
  3557                           ; 1 bytes @ 0x0
  3558                           
  3559  0070                     ?_init_I2C_buffer:	
  3560                           ; 1 bytes @ 0x0
  3561                           
  3562  0070                     ?_main:	
  3563                           ; 1 bytes @ 0x0
  3564                           
  3565  0070                     ?_PWM_Init:	
  3566                           ; 1 bytes @ 0x0
  3567                           
  3568  0070                     ?i1___wmul:	
  3569                           ; 2 bytes @ 0x0
  3570                           
  3571  0070                     i1___wmul@multiplier:	
  3572                           ; 2 bytes @ 0x0
  3573                           
  3574                           
  3575                           ; 2 bytes @ 0x0
  3576  0070                     	ds	2
  3577  0072                     i1___wmul@multiplicand:	
  3578                           
  3579                           ; 2 bytes @ 0x2
  3580  0072                     	ds	2
  3581  0074                     ??i1___wmul:	
  3582  0074                     i1___wmul@product:	
  3583                           ; 1 bytes @ 0x4
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x4
  3587  0074                     	ds	2
  3588  0076                     ?___lwdiv:	
  3589  0076                     ___lwdiv@divisor:	
  3590                           ; 2 bytes @ 0x6
  3591                           
  3592                           
  3593                           ; 2 bytes @ 0x6
  3594  0076                     	ds	2
  3595  0078                     ___lwdiv@dividend:	
  3596                           
  3597                           ; 2 bytes @ 0x8
  3598  0078                     	ds	2
  3599  007A                     ??___lwdiv:	
  3600  007A                     ___lwdiv@counter:	
  3601                           ; 1 bytes @ 0xA
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0xA
  3605  007A                     	ds	1
  3606  007B                     ___lwdiv@quotient:	
  3607                           
  3608                           ; 2 bytes @ 0xB
  3609  007B                     	ds	2
  3610                           
  3611                           	psect	cstackBANK0
  3612  0020                     __pcstackBANK0:	
  3613  0020                     ??_isr:	
  3614                           
  3615                           ; 1 bytes @ 0x0
  3616  0020                     	ds	2
  3617  0022                     ??_eeprom_read:	
  3618  0022                     ?_eeprom_write:	
  3619                           ; 1 bytes @ 0x2
  3620                           
  3621  0022                     ??_PWM_Init:	
  3622                           ; 1 bytes @ 0x2
  3623                           
  3624  0022                     ?_abs:	
  3625                           ; 1 bytes @ 0x2
  3626                           
  3627  0022                     ?__Umul8_16:	
  3628                           ; 2 bytes @ 0x2
  3629                           
  3630  0022                     ?_PWM_set_duty:	
  3631                           ; 2 bytes @ 0x2
  3632                           
  3633  0022                     ?___wmul:	
  3634                           ; 2 bytes @ 0x2
  3635                           
  3636  0022                     ?___fltol:	
  3637                           ; 2 bytes @ 0x2
  3638                           
  3639  0022                     eeprom_read@addr:	
  3640                           ; 4 bytes @ 0x2
  3641                           
  3642  0022                     eeprom_write@value:	
  3643                           ; 1 bytes @ 0x2
  3644                           
  3645  0022                     __Umul8_16@multiplicand:	
  3646                           ; 1 bytes @ 0x2
  3647                           
  3648  0022                     PWM_set_duty@duty:	
  3649                           ; 1 bytes @ 0x2
  3650                           
  3651  0022                     ___wmul@multiplier:	
  3652                           ; 2 bytes @ 0x2
  3653                           
  3654  0022                     abs@a:	
  3655                           ; 2 bytes @ 0x2
  3656                           
  3657  0022                     ___fltol@f1:	
  3658                           ; 2 bytes @ 0x2
  3659                           
  3660                           
  3661                           ; 4 bytes @ 0x2
  3662  0022                     	ds	1
  3663  0023                     ??_eeprom_write:	
  3664  0023                     ??_init_I2C_buffer:	
  3665                           ; 1 bytes @ 0x3
  3666                           
  3667  0023                     eeprom_write@addr:	
  3668                           ; 1 bytes @ 0x3
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x3
  3672  0023                     	ds	1
  3673  0024                     ??_abs:	
  3674  0024                     ??_PWM_set_duty:	
  3675                           ; 1 bytes @ 0x4
  3676                           
  3677  0024                     ___wmul@multiplicand:	
  3678                           ; 1 bytes @ 0x4
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x4
  3682  0024                     	ds	1
  3683  0025                     ??__Umul8_16:	
  3684  0025                     __Umul8_16@product:	
  3685                           ; 1 bytes @ 0x5
  3686                           
  3687                           
  3688                           ; 2 bytes @ 0x5
  3689  0025                     	ds	1
  3690  0026                     ??___wmul:	
  3691  0026                     ??___fltol:	
  3692                           ; 1 bytes @ 0x6
  3693                           
  3694  0026                     ?___xxtofl:	
  3695                           ; 1 bytes @ 0x6
  3696                           
  3697  0026                     ___wmul@product:	
  3698                           ; 4 bytes @ 0x6
  3699                           
  3700  0026                     ___xxtofl@val:	
  3701                           ; 2 bytes @ 0x6
  3702                           
  3703                           
  3704                           ; 4 bytes @ 0x6
  3705  0026                     	ds	1
  3706  0027                     __Umul8_16@multiplier:	
  3707                           
  3708                           ; 1 bytes @ 0x7
  3709  0027                     	ds	1
  3710  0028                     __Umul8_16@word_mpld:	
  3711                           
  3712                           ; 2 bytes @ 0x8
  3713  0028                     	ds	2
  3714  002A                     ??___xxtofl:	
  3715  002A                     ?___flmul:	
  3716                           ; 1 bytes @ 0xA
  3717                           
  3718  002A                     ___fltol@sign1:	
  3719                           ; 4 bytes @ 0xA
  3720                           
  3721  002A                     ___flmul@b:	
  3722                           ; 1 bytes @ 0xA
  3723                           
  3724                           
  3725                           ; 4 bytes @ 0xA
  3726  002A                     	ds	1
  3727  002B                     ___fltol@exp1:	
  3728                           
  3729                           ; 1 bytes @ 0xB
  3730  002B                     	ds	1
  3731  002C                     ?_M_control:	
  3732  002C                     M_control@ctr:	
  3733                           ; 1 bytes @ 0xC
  3734                           
  3735                           
  3736                           ; 2 bytes @ 0xC
  3737  002C                     	ds	2
  3738  002E                     ??_M_control:	
  3739  002E                     ___xxtofl@sign:	
  3740                           ; 1 bytes @ 0xE
  3741                           
  3742  002E                     ___flmul@a:	
  3743                           ; 1 bytes @ 0xE
  3744                           
  3745                           
  3746                           ; 4 bytes @ 0xE
  3747  002E                     	ds	1
  3748  002F                     ___xxtofl@exp:	
  3749                           
  3750                           ; 1 bytes @ 0xF
  3751  002F                     	ds	1
  3752  0030                     ___xxtofl@arg:	
  3753                           
  3754                           ; 4 bytes @ 0x10
  3755  0030                     	ds	2
  3756  0032                     ??___flmul:	
  3757                           
  3758                           ; 1 bytes @ 0x12
  3759  0032                     	ds	2
  3760  0034                     ?___flge:	
  3761  0034                     ___flge@ff1:	
  3762                           ; 1 bit 
  3763                           
  3764                           
  3765                           ; 4 bytes @ 0x14
  3766  0034                     	ds	2
  3767  0036                     ___flmul@sign:	
  3768                           
  3769                           ; 1 bytes @ 0x16
  3770  0036                     	ds	1
  3771  0037                     ___flmul@aexp:	
  3772                           
  3773                           ; 1 bytes @ 0x17
  3774  0037                     	ds	1
  3775  0038                     ___flmul@bexp:	
  3776  0038                     ___flge@ff2:	
  3777                           ; 1 bytes @ 0x18
  3778                           
  3779                           
  3780                           ; 4 bytes @ 0x18
  3781  0038                     	ds	1
  3782  0039                     ___flmul@grs:	
  3783                           
  3784                           ; 4 bytes @ 0x19
  3785  0039                     	ds	3
  3786  003C                     ??___flge:	
  3787                           
  3788                           ; 1 bytes @ 0x1C
  3789  003C                     	ds	1
  3790  003D                     ___flmul@prod:	
  3791                           
  3792                           ; 4 bytes @ 0x1D
  3793  003D                     	ds	4
  3794  0041                     ___flmul@temp:	
  3795                           
  3796                           ; 2 bytes @ 0x21
  3797  0041                     	ds	2
  3798  0043                     ?___fladd:	
  3799  0043                     ___fladd@b:	
  3800                           ; 4 bytes @ 0x23
  3801                           
  3802                           
  3803                           ; 4 bytes @ 0x23
  3804  0043                     	ds	4
  3805  0047                     ___fladd@a:	
  3806                           
  3807                           ; 4 bytes @ 0x27
  3808  0047                     	ds	4
  3809  004B                     ??___fladd:	
  3810                           
  3811                           ; 1 bytes @ 0x2B
  3812  004B                     	ds	8
  3813  0053                     ___fladd@signs:	
  3814                           
  3815                           ; 1 bytes @ 0x33
  3816  0053                     	ds	1
  3817  0054                     ___fladd@aexp:	
  3818                           
  3819                           ; 1 bytes @ 0x34
  3820  0054                     	ds	1
  3821  0055                     ___fladd@bexp:	
  3822                           
  3823                           ; 1 bytes @ 0x35
  3824  0055                     	ds	1
  3825  0056                     ___fladd@grs:	
  3826                           
  3827                           ; 1 bytes @ 0x36
  3828  0056                     	ds	1
  3829  0057                     ?___flsub:	
  3830  0057                     ___flsub@a:	
  3831                           ; 4 bytes @ 0x37
  3832                           
  3833                           
  3834                           ; 4 bytes @ 0x37
  3835  0057                     	ds	4
  3836  005B                     ___flsub@b:	
  3837                           
  3838                           ; 4 bytes @ 0x3B
  3839  005B                     	ds	4
  3840  005F                     ??___flsub:	
  3841  005F                     ?_calculate_pidA:	
  3842                           ; 1 bytes @ 0x3F
  3843                           
  3844  005F                     calculate_pidA@set:	
  3845                           ; 2 bytes @ 0x3F
  3846                           
  3847                           
  3848                           ; 4 bytes @ 0x3F
  3849  005F                     	ds	4
  3850  0063                     ??_calculate_pidA:	
  3851                           
  3852                           ; 1 bytes @ 0x43
  3853  0063                     	ds	2
  3854  0065                     ?_calculate_pidM:	
  3855  0065                     calculate_pidM@set:	
  3856                           ; 1 bytes @ 0x45
  3857                           
  3858                           
  3859                           ; 2 bytes @ 0x45
  3860  0065                     	ds	2
  3861  0067                     ??_calculate_pidM:	
  3862  0067                     ?_pre_pidM:	
  3863                           ; 1 bytes @ 0x47
  3864                           
  3865  0067                     pre_pidM@set:	
  3866                           ; 1 bytes @ 0x47
  3867                           
  3868                           
  3869                           ; 2 bytes @ 0x47
  3870  0067                     	ds	2
  3871  0069                     ??_pre_pidM:	
  3872                           
  3873                           ; 1 bytes @ 0x49
  3874  0069                     	ds	2
  3875                           
  3876                           	psect	swtext1
  3877  06D1                     __pswtext1:	
  3878  06D1                     S3986:	
  3879  06D1  3188  2895         	ljmp	l3784
  3880  06D3  3188  289B         	ljmp	l3786
  3881  06D5  3188  28A5         	ljmp	l3788
  3882  06D7  3188  28B0         	ljmp	l3790
  3883  06D9  3189  292B         	ljmp	l3824
  3884  06DB  3189  299B         	ljmp	l3854
  3885  06DD  3189  29A5         	ljmp	l3856
  3886  06DF  318A  2A44         	ljmp	l3890
  3887                           
  3888                           	psect	text2
  3889  00C0                     __ptext2:	
  3890 ;; *************** function _calculate_pidM *****************
  3891 ;; Defined at:
  3892 ;;		line 273 in file "main.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  set             2   69[BANK0 ] int 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  pid             4   20[BANK1 ] float 
  3897 ;;  error           4   16[BANK1 ] float 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 1F/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3907 ;;      Params:         0       2       0       0
  3908 ;;      Locals:         0       0      12       0
  3909 ;;      Temps:          0       0       0       0
  3910 ;;      Totals:         0       2      12       0
  3911 ;;Total ram usage:       14 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    4
  3914 ;; This function calls:
  3915 ;;		_M_control
  3916 ;;		___fladd
  3917 ;;		___flge
  3918 ;;		___flmul
  3919 ;;		___flsub
  3920 ;;		___fltol
  3921 ;;		___xxtofl
  3922 ;; This function is called by:
  3923 ;;		_pre_pidM
  3924 ;;		_main
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           
  3929                           ;psect for function _calculate_pidM
  3930  00C0                     _calculate_pidM:	
  3931  00C0                     l3506:	
  3932                           ;incstack = 0
  3933                           ; Regs used in _calculate_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3934                           
  3935                           
  3936                           ;main.c: 276: float pid = 0;
  3937  00C0  0021               	movlb	1	; select bank1
  3938  00C1  30AB               	movlw	((low (_I2C_buffer| 0))& (0+255)+11)
  3939  00C2  01E6               	clrf	calculate_pidM@pid^(0+128)
  3940  00C3  01E7               	clrf	(calculate_pidM@pid+1)^(0+128)
  3941  00C4  01E8               	clrf	(calculate_pidM@pid+2)^(0+128)
  3942  00C5  01E9               	clrf	(calculate_pidM@pid+3)^(0+128)
  3943                           
  3944                           ;main.c: 277: error = set - I2C_buffer.data.RPM;
  3945  00C6  0086               	movwf	6
  3946  00C7  0187               	clrf	7
  3947  00C8  3F40               	moviw [0]fsr1
  3948  00C9  0020               	movlb	0	; select bank0
  3949  00CA  0265               	subwf	calculate_pidM@set,w
  3950  00CB  00A6               	movwf	___xxtofl@val
  3951  00CC  3F41               	moviw [1]fsr1
  3952  00CD  3B66               	subwfb	calculate_pidM@set+1,w
  3953  00CE  00A7               	movwf	___xxtofl@val+1
  3954  00CF  01A8               	clrf	___xxtofl@val+2
  3955  00D0  1BA7               	btfsc	___xxtofl@val+1,7
  3956  00D1  03A8               	decf	___xxtofl@val+2,f
  3957  00D2  0828               	movf	___xxtofl@val+2,w
  3958  00D3  00A9               	movwf	___xxtofl@val+3
  3959  00D4  3001               	movlw	1
  3960  00D5  318E  267E  3180   	fcall	___xxtofl
  3961  00D8  0829               	movf	?___xxtofl+3,w
  3962  00D9  0021               	movlb	1	; select bank1
  3963  00DA  00E5               	movwf	(calculate_pidM@error+3)^(0+128)
  3964  00DB  0020               	movlb	0	; select bank0
  3965  00DC  0828               	movf	?___xxtofl+2,w
  3966  00DD  0021               	movlb	1	; select bank1
  3967  00DE  00E4               	movwf	(calculate_pidM@error+2)^(0+128)
  3968  00DF  0020               	movlb	0	; select bank0
  3969  00E0  0827               	movf	?___xxtofl+1,w
  3970  00E1  0021               	movlb	1	; select bank1
  3971  00E2  00E3               	movwf	(calculate_pidM@error+1)^(0+128)
  3972  00E3  0020               	movlb	0	; select bank0
  3973  00E4  0826               	movf	?___xxtofl,w
  3974  00E5  0021               	movlb	1	; select bank1
  3975  00E6  00E2               	movwf	calculate_pidM@error^(0+128)
  3976                           
  3977                           ;main.c: 278: pid = error * I2C_buffer.data.RPM_PID_KP;
  3978  00E7  0865               	movf	(calculate_pidM@error+3)^(0+128),w
  3979  00E8  0020               	movlb	0	; select bank0
  3980  00E9  00AD               	movwf	___flmul@b+3
  3981  00EA  0021               	movlb	1	; select bank1
  3982  00EB  0864               	movf	(calculate_pidM@error+2)^(0+128),w
  3983  00EC  0020               	movlb	0	; select bank0
  3984  00ED  00AC               	movwf	___flmul@b+2
  3985  00EE  0021               	movlb	1	; select bank1
  3986  00EF  0863               	movf	(calculate_pidM@error+1)^(0+128),w
  3987  00F0  0020               	movlb	0	; select bank0
  3988  00F1  00AB               	movwf	___flmul@b+1
  3989  00F2  0021               	movlb	1	; select bank1
  3990  00F3  0862               	movf	calculate_pidM@error^(0+128),w
  3991  00F4  0020               	movlb	0	; select bank0
  3992  00F5  00AA               	movwf	___flmul@b
  3993  00F6  3013               	movlw	19
  3994  00F7  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  3995  00F8  0086               	movwf	6
  3996  00F9  0187               	clrf	7
  3997  00FA  3F40               	moviw [0]fsr1
  3998  00FB  00AE               	movwf	___flmul@a
  3999  00FC  3F41               	moviw [1]fsr1
  4000  00FD  00AF               	movwf	___flmul@a+1
  4001  00FE  3F42               	moviw [2]fsr1
  4002  00FF  00B0               	movwf	___flmul@a+2
  4003  0100  3F43               	moviw [3]fsr1
  4004  0101  00B1               	movwf	___flmul@a+3
  4005  0102  2273  3180         	fcall	___flmul
  4006  0104  082D               	movf	?___flmul+3,w
  4007  0105  0021               	movlb	1	; select bank1
  4008  0106  00E9               	movwf	(calculate_pidM@pid+3)^(0+128)
  4009  0107  0020               	movlb	0	; select bank0
  4010  0108  082C               	movf	?___flmul+2,w
  4011  0109  0021               	movlb	1	; select bank1
  4012  010A  00E8               	movwf	(calculate_pidM@pid+2)^(0+128)
  4013  010B  0020               	movlb	0	; select bank0
  4014  010C  082B               	movf	?___flmul+1,w
  4015  010D  0021               	movlb	1	; select bank1
  4016  010E  00E7               	movwf	(calculate_pidM@pid+1)^(0+128)
  4017  010F  0020               	movlb	0	; select bank0
  4018  0110  082A               	movf	?___flmul,w
  4019  0111  0021               	movlb	1	; select bank1
  4020  0112  00E6               	movwf	calculate_pidM@pid^(0+128)
  4021                           
  4022                           ;main.c: 279: accumulatorM += error;
  4023  0113  0865               	movf	(calculate_pidM@error+3)^(0+128),w
  4024  0114  0020               	movlb	0	; select bank0
  4025  0115  00C6               	movwf	___fladd@b+3
  4026  0116  0021               	movlb	1	; select bank1
  4027  0117  0864               	movf	(calculate_pidM@error+2)^(0+128),w
  4028  0118  0020               	movlb	0	; select bank0
  4029  0119  00C5               	movwf	___fladd@b+2
  4030  011A  0021               	movlb	1	; select bank1
  4031  011B  0863               	movf	(calculate_pidM@error+1)^(0+128),w
  4032  011C  0020               	movlb	0	; select bank0
  4033  011D  00C4               	movwf	___fladd@b+1
  4034  011E  0021               	movlb	1	; select bank1
  4035  011F  0862               	movf	calculate_pidM@error^(0+128),w
  4036  0120  0020               	movlb	0	; select bank0
  4037  0121  00C3               	movwf	___fladd@b
  4038  0122  0022               	movlb	2	; select bank2
  4039  0123  082F               	movf	(_accumulatorM+3)^(0+256),w
  4040  0124  0020               	movlb	0	; select bank0
  4041  0125  00CA               	movwf	___fladd@a+3
  4042  0126  0022               	movlb	2	; select bank2
  4043  0127  082E               	movf	(_accumulatorM+2)^(0+256),w
  4044  0128  0020               	movlb	0	; select bank0
  4045  0129  00C9               	movwf	___fladd@a+2
  4046  012A  0022               	movlb	2	; select bank2
  4047  012B  082D               	movf	(_accumulatorM+1)^(0+256),w
  4048  012C  0020               	movlb	0	; select bank0
  4049  012D  00C8               	movwf	___fladd@a+1
  4050  012E  0022               	movlb	2	; select bank2
  4051  012F  082C               	movf	_accumulatorM^(0+256),w
  4052  0130  0020               	movlb	0	; select bank0
  4053  0131  00C7               	movwf	___fladd@a
  4054  0132  3184  2491  3180   	fcall	___fladd
  4055  0135  0846               	movf	?___fladd+3,w
  4056  0136  0022               	movlb	2	; select bank2
  4057  0137  00AF               	movwf	(_accumulatorM+3)^(0+256)
  4058  0138  0020               	movlb	0	; select bank0
  4059  0139  0845               	movf	?___fladd+2,w
  4060  013A  0022               	movlb	2	; select bank2
  4061  013B  00AE               	movwf	(_accumulatorM+2)^(0+256)
  4062  013C  0020               	movlb	0	; select bank0
  4063  013D  0844               	movf	?___fladd+1,w
  4064  013E  0022               	movlb	2	; select bank2
  4065  013F  00AD               	movwf	(_accumulatorM+1)^(0+256)
  4066  0140  0020               	movlb	0	; select bank0
  4067  0141  0843               	movf	?___fladd,w
  4068  0142  0022               	movlb	2	; select bank2
  4069  0143  00AC               	movwf	_accumulatorM^(0+256)
  4070                           
  4071                           ;main.c: 280: pid += I2C_buffer.data.RPM_PID_KI*accumulatorM;
  4072  0144  301B               	movlw	27
  4073  0145  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  4074  0146  0086               	movwf	6
  4075  0147  0187               	clrf	7
  4076  0148  3F40               	moviw [0]fsr1
  4077  0149  0020               	movlb	0	; select bank0
  4078  014A  00AE               	movwf	___flmul@a
  4079  014B  3F41               	moviw [1]fsr1
  4080  014C  00AF               	movwf	___flmul@a+1
  4081  014D  3F42               	moviw [2]fsr1
  4082  014E  00B0               	movwf	___flmul@a+2
  4083  014F  3F43               	moviw [3]fsr1
  4084  0150  00B1               	movwf	___flmul@a+3
  4085  0151  0022               	movlb	2	; select bank2
  4086  0152  082F               	movf	(_accumulatorM+3)^(0+256),w
  4087  0153  0020               	movlb	0	; select bank0
  4088  0154  00AD               	movwf	___flmul@b+3
  4089  0155  0022               	movlb	2	; select bank2
  4090  0156  082E               	movf	(_accumulatorM+2)^(0+256),w
  4091  0157  0020               	movlb	0	; select bank0
  4092  0158  00AC               	movwf	___flmul@b+2
  4093  0159  0022               	movlb	2	; select bank2
  4094  015A  082D               	movf	(_accumulatorM+1)^(0+256),w
  4095  015B  0020               	movlb	0	; select bank0
  4096  015C  00AB               	movwf	___flmul@b+1
  4097  015D  0022               	movlb	2	; select bank2
  4098  015E  082C               	movf	_accumulatorM^(0+256),w
  4099  015F  0020               	movlb	0	; select bank0
  4100  0160  00AA               	movwf	___flmul@b
  4101  0161  2273               	fcall	___flmul
  4102  0162  082D               	movf	?___flmul+3,w
  4103  0163  00C6               	movwf	___fladd@b+3
  4104  0164  082C               	movf	?___flmul+2,w
  4105  0165  00C5               	movwf	___fladd@b+2
  4106  0166  082B               	movf	?___flmul+1,w
  4107  0167  00C4               	movwf	___fladd@b+1
  4108  0168  082A               	movf	?___flmul,w
  4109  0169  00C3               	movwf	___fladd@b
  4110  016A  0021               	movlb	1	; select bank1
  4111  016B  0869               	movf	(calculate_pidM@pid+3)^(0+128),w
  4112  016C  0020               	movlb	0	; select bank0
  4113  016D  00CA               	movwf	___fladd@a+3
  4114  016E  0021               	movlb	1	; select bank1
  4115  016F  0868               	movf	(calculate_pidM@pid+2)^(0+128),w
  4116  0170  0020               	movlb	0	; select bank0
  4117  0171  00C9               	movwf	___fladd@a+2
  4118  0172  0021               	movlb	1	; select bank1
  4119  0173  0867               	movf	(calculate_pidM@pid+1)^(0+128),w
  4120  0174  0020               	movlb	0	; select bank0
  4121  0175  00C8               	movwf	___fladd@a+1
  4122  0176  0021               	movlb	1	; select bank1
  4123  0177  0866               	movf	calculate_pidM@pid^(0+128),w
  4124  0178  0020               	movlb	0	; select bank0
  4125  0179  00C7               	movwf	___fladd@a
  4126  017A  3184  2491  3180   	fcall	___fladd
  4127  017D  0846               	movf	?___fladd+3,w
  4128  017E  0021               	movlb	1	; select bank1
  4129  017F  00E9               	movwf	(calculate_pidM@pid+3)^(0+128)
  4130  0180  0020               	movlb	0	; select bank0
  4131  0181  0845               	movf	?___fladd+2,w
  4132  0182  0021               	movlb	1	; select bank1
  4133  0183  00E8               	movwf	(calculate_pidM@pid+2)^(0+128)
  4134  0184  0020               	movlb	0	; select bank0
  4135  0185  0844               	movf	?___fladd+1,w
  4136  0186  0021               	movlb	1	; select bank1
  4137  0187  00E7               	movwf	(calculate_pidM@pid+1)^(0+128)
  4138  0188  0020               	movlb	0	; select bank0
  4139  0189  0843               	movf	?___fladd,w
  4140  018A  0021               	movlb	1	; select bank1
  4141  018B  00E6               	movwf	calculate_pidM@pid^(0+128)
  4142                           
  4143                           ;main.c: 281: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  4144  018C  0865               	movf	(calculate_pidM@error+3)^(0+128),w
  4145  018D  0020               	movlb	0	; select bank0
  4146  018E  00DE               	movwf	___flsub@b+3
  4147  018F  0021               	movlb	1	; select bank1
  4148  0190  0864               	movf	(calculate_pidM@error+2)^(0+128),w
  4149  0191  0020               	movlb	0	; select bank0
  4150  0192  00DD               	movwf	___flsub@b+2
  4151  0193  0021               	movlb	1	; select bank1
  4152  0194  0863               	movf	(calculate_pidM@error+1)^(0+128),w
  4153  0195  0020               	movlb	0	; select bank0
  4154  0196  00DC               	movwf	___flsub@b+1
  4155  0197  0021               	movlb	1	; select bank1
  4156  0198  0862               	movf	calculate_pidM@error^(0+128),w
  4157  0199  0020               	movlb	0	; select bank0
  4158  019A  00DB               	movwf	___flsub@b
  4159  019B  0022               	movlb	2	; select bank2
  4160  019C  082B               	movf	(_lasterrorM+3)^(0+256),w
  4161  019D  0020               	movlb	0	; select bank0
  4162  019E  00DA               	movwf	___flsub@a+3
  4163  019F  0022               	movlb	2	; select bank2
  4164  01A0  082A               	movf	(_lasterrorM+2)^(0+256),w
  4165  01A1  0020               	movlb	0	; select bank0
  4166  01A2  00D9               	movwf	___flsub@a+2
  4167  01A3  0022               	movlb	2	; select bank2
  4168  01A4  0829               	movf	(_lasterrorM+1)^(0+256),w
  4169  01A5  0020               	movlb	0	; select bank0
  4170  01A6  00D8               	movwf	___flsub@a+1
  4171  01A7  0022               	movlb	2	; select bank2
  4172  01A8  0828               	movf	_lasterrorM^(0+256),w
  4173  01A9  0020               	movlb	0	; select bank0
  4174  01AA  00D7               	movwf	___flsub@a
  4175  01AB  318F  27CE  3180   	fcall	___flsub
  4176  01AE  085A               	movf	?___flsub+3,w
  4177  01AF  00B1               	movwf	___flmul@a+3
  4178  01B0  0859               	movf	?___flsub+2,w
  4179  01B1  00B0               	movwf	___flmul@a+2
  4180  01B2  0858               	movf	?___flsub+1,w
  4181  01B3  00AF               	movwf	___flmul@a+1
  4182  01B4  0857               	movf	?___flsub,w
  4183  01B5  00AE               	movwf	___flmul@a
  4184  01B6  3017               	movlw	23
  4185  01B7  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  4186  01B8  0086               	movwf	6
  4187  01B9  0187               	clrf	7
  4188  01BA  3F40               	moviw [0]fsr1
  4189  01BB  00AA               	movwf	___flmul@b
  4190  01BC  3F41               	moviw [1]fsr1
  4191  01BD  00AB               	movwf	___flmul@b+1
  4192  01BE  3F42               	moviw [2]fsr1
  4193  01BF  00AC               	movwf	___flmul@b+2
  4194  01C0  3F43               	moviw [3]fsr1
  4195  01C1  00AD               	movwf	___flmul@b+3
  4196  01C2  2273  3180         	fcall	___flmul
  4197  01C4  082D               	movf	?___flmul+3,w
  4198  01C5  0021               	movlb	1	; select bank1
  4199  01C6  00E1               	movwf	(_calculate_pidM$1319+3)^(0+128)
  4200  01C7  0020               	movlb	0	; select bank0
  4201  01C8  082C               	movf	?___flmul+2,w
  4202  01C9  0021               	movlb	1	; select bank1
  4203  01CA  00E0               	movwf	(_calculate_pidM$1319+2)^(0+128)
  4204  01CB  0020               	movlb	0	; select bank0
  4205  01CC  082B               	movf	?___flmul+1,w
  4206  01CD  0021               	movlb	1	; select bank1
  4207  01CE  00DF               	movwf	(_calculate_pidM$1319+1)^(0+128)
  4208  01CF  0020               	movlb	0	; select bank0
  4209  01D0  082A               	movf	?___flmul,w
  4210  01D1  0021               	movlb	1	; select bank1
  4211  01D2  00DE               	movwf	_calculate_pidM$1319^(0+128)
  4212                           
  4213                           ;main.c: 281: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  4214  01D3  0861               	movf	(_calculate_pidM$1319+3)^(0+128),w
  4215  01D4  0020               	movlb	0	; select bank0
  4216  01D5  00C6               	movwf	___fladd@b+3
  4217  01D6  0021               	movlb	1	; select bank1
  4218  01D7  0860               	movf	(_calculate_pidM$1319+2)^(0+128),w
  4219  01D8  0020               	movlb	0	; select bank0
  4220  01D9  00C5               	movwf	___fladd@b+2
  4221  01DA  0021               	movlb	1	; select bank1
  4222  01DB  085F               	movf	(_calculate_pidM$1319+1)^(0+128),w
  4223  01DC  0020               	movlb	0	; select bank0
  4224  01DD  00C4               	movwf	___fladd@b+1
  4225  01DE  0021               	movlb	1	; select bank1
  4226  01DF  085E               	movf	_calculate_pidM$1319^(0+128),w
  4227  01E0  0020               	movlb	0	; select bank0
  4228  01E1  00C3               	movwf	___fladd@b
  4229  01E2  0021               	movlb	1	; select bank1
  4230  01E3  0869               	movf	(calculate_pidM@pid+3)^(0+128),w
  4231  01E4  0020               	movlb	0	; select bank0
  4232  01E5  00CA               	movwf	___fladd@a+3
  4233  01E6  0021               	movlb	1	; select bank1
  4234  01E7  0868               	movf	(calculate_pidM@pid+2)^(0+128),w
  4235  01E8  0020               	movlb	0	; select bank0
  4236  01E9  00C9               	movwf	___fladd@a+2
  4237  01EA  0021               	movlb	1	; select bank1
  4238  01EB  0867               	movf	(calculate_pidM@pid+1)^(0+128),w
  4239  01EC  0020               	movlb	0	; select bank0
  4240  01ED  00C8               	movwf	___fladd@a+1
  4241  01EE  0021               	movlb	1	; select bank1
  4242  01EF  0866               	movf	calculate_pidM@pid^(0+128),w
  4243  01F0  0020               	movlb	0	; select bank0
  4244  01F1  00C7               	movwf	___fladd@a
  4245  01F2  3184  2491  3180   	fcall	___fladd
  4246  01F5  0846               	movf	?___fladd+3,w
  4247  01F6  0021               	movlb	1	; select bank1
  4248  01F7  00E9               	movwf	(calculate_pidM@pid+3)^(0+128)
  4249  01F8  0020               	movlb	0	; select bank0
  4250  01F9  0845               	movf	?___fladd+2,w
  4251  01FA  0021               	movlb	1	; select bank1
  4252  01FB  00E8               	movwf	(calculate_pidM@pid+2)^(0+128)
  4253  01FC  0020               	movlb	0	; select bank0
  4254  01FD  0844               	movf	?___fladd+1,w
  4255  01FE  0021               	movlb	1	; select bank1
  4256  01FF  00E7               	movwf	(calculate_pidM@pid+1)^(0+128)
  4257  0200  0020               	movlb	0	; select bank0
  4258  0201  0843               	movf	?___fladd,w
  4259  0202  0021               	movlb	1	; select bank1
  4260  0203  00E6               	movwf	calculate_pidM@pid^(0+128)
  4261                           
  4262                           ;main.c: 282: lasterrorM = error;
  4263  0204  0865               	movf	(calculate_pidM@error+3)^(0+128),w
  4264  0205  0022               	movlb	2	; select bank2
  4265  0206  00AB               	movwf	(_lasterrorM+3)^(0+256)
  4266  0207  0021               	movlb	1	; select bank1
  4267  0208  0864               	movf	(calculate_pidM@error+2)^(0+128),w
  4268  0209  0022               	movlb	2	; select bank2
  4269  020A  00AA               	movwf	(_lasterrorM+2)^(0+256)
  4270  020B  0021               	movlb	1	; select bank1
  4271  020C  0863               	movf	(calculate_pidM@error+1)^(0+128),w
  4272  020D  0022               	movlb	2	; select bank2
  4273  020E  00A9               	movwf	(_lasterrorM+1)^(0+256)
  4274  020F  0021               	movlb	1	; select bank1
  4275  0210  0862               	movf	calculate_pidM@error^(0+128),w
  4276  0211  0022               	movlb	2	; select bank2
  4277  0212  00A8               	movwf	_lasterrorM^(0+256)
  4278                           
  4279                           ;main.c: 283: if (pid >= 1023)
  4280  0213  0021               	movlb	1	; select bank1
  4281  0214  0869               	movf	(calculate_pidM@pid+3)^(0+128),w
  4282  0215  0020               	movlb	0	; select bank0
  4283  0216  00B7               	movwf	___flge@ff1+3
  4284  0217  0021               	movlb	1	; select bank1
  4285  0218  0868               	movf	(calculate_pidM@pid+2)^(0+128),w
  4286  0219  0020               	movlb	0	; select bank0
  4287  021A  00B6               	movwf	___flge@ff1+2
  4288  021B  0021               	movlb	1	; select bank1
  4289  021C  0867               	movf	(calculate_pidM@pid+1)^(0+128),w
  4290  021D  0020               	movlb	0	; select bank0
  4291  021E  00B5               	movwf	___flge@ff1+1
  4292  021F  0021               	movlb	1	; select bank1
  4293  0220  0866               	movf	calculate_pidM@pid^(0+128),w
  4294  0221  0020               	movlb	0	; select bank0
  4295  0222  00B4               	movwf	___flge@ff1
  4296  0223  3044               	movlw	68
  4297  0224  00BB               	movwf	___flge@ff2+3
  4298  0225  307F               	movlw	127
  4299  0226  00BA               	movwf	___flge@ff2+2
  4300  0227  30C0               	movlw	192
  4301  0228  00B9               	movwf	___flge@ff2+1
  4302  0229  01B8               	clrf	___flge@ff2
  4303  022A  318F  2760  3180   	fcall	___flge
  4304  022D  1C03               	btfss	3,0
  4305  022E  2A37               	goto	l3524
  4306                           
  4307                           ;main.c: 284: {;main.c: 285: pid = 1023;
  4308  022F  3044               	movlw	68
  4309  0230  0021               	movlb	1	; select bank1
  4310  0231  00E9               	movwf	(calculate_pidM@pid+3)^(0+128)
  4311  0232  307F               	movlw	127
  4312  0233  00E8               	movwf	(calculate_pidM@pid+2)^(0+128)
  4313  0234  30C0               	movlw	192
  4314  0235  00E7               	movwf	(calculate_pidM@pid+1)^(0+128)
  4315  0236  01E6               	clrf	calculate_pidM@pid^(0+128)
  4316  0237                     l3524:	
  4317                           
  4318                           ;main.c: 286: };main.c: 287: if (pid <= -1023) {
  4319  0237  30C4               	movlw	196
  4320  0238  0020               	movlb	0	; select bank0
  4321  0239  00B7               	movwf	___flge@ff1+3
  4322  023A  307F               	movlw	127
  4323  023B  00B6               	movwf	___flge@ff1+2
  4324  023C  30C0               	movlw	192
  4325  023D  00B5               	movwf	___flge@ff1+1
  4326  023E  01B4               	clrf	___flge@ff1
  4327  023F  0021               	movlb	1	; select bank1
  4328  0240  0869               	movf	(calculate_pidM@pid+3)^(0+128),w
  4329  0241  0020               	movlb	0	; select bank0
  4330  0242  00BB               	movwf	___flge@ff2+3
  4331  0243  0021               	movlb	1	; select bank1
  4332  0244  0868               	movf	(calculate_pidM@pid+2)^(0+128),w
  4333  0245  0020               	movlb	0	; select bank0
  4334  0246  00BA               	movwf	___flge@ff2+2
  4335  0247  0021               	movlb	1	; select bank1
  4336  0248  0867               	movf	(calculate_pidM@pid+1)^(0+128),w
  4337  0249  0020               	movlb	0	; select bank0
  4338  024A  00B9               	movwf	___flge@ff2+1
  4339  024B  0021               	movlb	1	; select bank1
  4340  024C  0866               	movf	calculate_pidM@pid^(0+128),w
  4341  024D  0020               	movlb	0	; select bank0
  4342  024E  00B8               	movwf	___flge@ff2
  4343  024F  318F  2760  3180   	fcall	___flge
  4344  0252  1C03               	btfss	3,0
  4345  0253  2A5C               	goto	l3528
  4346                           
  4347                           ;main.c: 288: pid = -1023;
  4348  0254  30C4               	movlw	196
  4349  0255  0021               	movlb	1	; select bank1
  4350  0256  00E9               	movwf	(calculate_pidM@pid+3)^(0+128)
  4351  0257  307F               	movlw	127
  4352  0258  00E8               	movwf	(calculate_pidM@pid+2)^(0+128)
  4353  0259  30C0               	movlw	192
  4354  025A  00E7               	movwf	(calculate_pidM@pid+1)^(0+128)
  4355  025B  01E6               	clrf	calculate_pidM@pid^(0+128)
  4356  025C                     l3528:	
  4357                           
  4358                           ;main.c: 289: };main.c: 290: M_control((int) pid);
  4359  025C  0021               	movlb	1	; select bank1
  4360  025D  0869               	movf	(calculate_pidM@pid+3)^(0+128),w
  4361  025E  0020               	movlb	0	; select bank0
  4362  025F  00A5               	movwf	___fltol@f1+3
  4363  0260  0021               	movlb	1	; select bank1
  4364  0261  0868               	movf	(calculate_pidM@pid+2)^(0+128),w
  4365  0262  0020               	movlb	0	; select bank0
  4366  0263  00A4               	movwf	___fltol@f1+2
  4367  0264  0021               	movlb	1	; select bank1
  4368  0265  0867               	movf	(calculate_pidM@pid+1)^(0+128),w
  4369  0266  0020               	movlb	0	; select bank0
  4370  0267  00A3               	movwf	___fltol@f1+1
  4371  0268  0021               	movlb	1	; select bank1
  4372  0269  0866               	movf	calculate_pidM@pid^(0+128),w
  4373  026A  0020               	movlb	0	; select bank0
  4374  026B  00A2               	movwf	___fltol@f1
  4375  026C  243E               	fcall	___fltol
  4376  026D  0823               	movf	?___fltol+1,w
  4377  026E  00AD               	movwf	M_control@ctr+1
  4378  026F  0822               	movf	?___fltol,w
  4379  0270  00AC               	movwf	M_control@ctr
  4380  0271  318E  2E47         	ljmp	l3264
  4381  0273                     __end_of_calculate_pidM:	
  4382  0273                     __ptext15:	
  4383 ;; *************** function ___flmul *****************
  4384 ;; Defined at:
  4385 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcmul.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  b               4   10[BANK0 ] unsigned char 
  4388 ;;  a               4   14[BANK0 ] unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  prod            4   29[BANK0 ] struct .
  4391 ;;  grs             4   25[BANK0 ] unsigned long 
  4392 ;;  temp            2   33[BANK0 ] struct .
  4393 ;;  bexp            1   24[BANK0 ] unsigned char 
  4394 ;;  aexp            1   23[BANK0 ] unsigned char 
  4395 ;;  sign            1   22[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  4   10[BANK0 ] unsigned char 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 1F/0
  4402 ;;		On exit  : 1F/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4405 ;;      Params:         0       8       0       0
  4406 ;;      Locals:         0      13       0       0
  4407 ;;      Temps:          0       4       0       0
  4408 ;;      Totals:         0      25       0       0
  4409 ;;Total ram usage:       25 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    3
  4412 ;; This function calls:
  4413 ;;		__Umul8_16
  4414 ;; This function is called by:
  4415 ;;		_calculate_pidA
  4416 ;;		_calculate_pidM
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           
  4421                           ;psect for function ___flmul
  4422  0273                     ___flmul:	
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  4426  0273  082D               	movf	___flmul@b+3,w
  4427  0274  00B6               	movwf	___flmul@sign
  4428  0275  3080               	movlw	128
  4429  0276  05B6               	andwf	___flmul@sign,f
  4430  0277  352D               	lslf	___flmul@b+3,w
  4431  0278  00B8               	movwf	___flmul@bexp
  4432  0279  1BAC               	btfsc	___flmul@b+2,7
  4433  027A  1438               	bsf	___flmul@bexp,0
  4434  027B  0838               	movf	___flmul@bexp,w
  4435  027C  1903               	btfsc	3,2
  4436  027D  2A86               	goto	l707
  4437  027E  0F38               	incfsz	___flmul@bexp,w
  4438  027F  2A84               	goto	l708
  4439  0280  01AA               	clrf	___flmul@b
  4440  0281  01AB               	clrf	___flmul@b+1
  4441  0282  01AC               	clrf	___flmul@b+2
  4442  0283  01AD               	clrf	___flmul@b+3
  4443  0284                     l708:	
  4444  0284  17AC               	bsf	___flmul@b+2,7
  4445  0285  2A8A               	goto	l3356
  4446  0286                     l707:	
  4447  0286  01AA               	clrf	___flmul@b
  4448  0287  01AB               	clrf	___flmul@b+1
  4449  0288  01AC               	clrf	___flmul@b+2
  4450  0289  01AD               	clrf	___flmul@b+3
  4451  028A                     l3356:	
  4452  028A  0831               	movf	___flmul@a+3,w
  4453  028B  3980               	andlw	128
  4454  028C  06B6               	xorwf	___flmul@sign,f
  4455  028D  3531               	lslf	___flmul@a+3,w
  4456  028E  00B7               	movwf	___flmul@aexp
  4457  028F  1BB0               	btfsc	___flmul@a+2,7
  4458  0290  1437               	bsf	___flmul@aexp,0
  4459  0291  0837               	movf	___flmul@aexp,w
  4460  0292  1903               	btfsc	3,2
  4461  0293  2A9C               	goto	l711
  4462  0294  0F37               	incfsz	___flmul@aexp,w
  4463  0295  2A9A               	goto	l712
  4464  0296  01AE               	clrf	___flmul@a
  4465  0297  01AF               	clrf	___flmul@a+1
  4466  0298  01B0               	clrf	___flmul@a+2
  4467  0299  01B1               	clrf	___flmul@a+3
  4468  029A                     l712:	
  4469  029A  17B0               	bsf	___flmul@a+2,7
  4470  029B  2AA0               	goto	l3368
  4471  029C                     l711:	
  4472  029C  01AE               	clrf	___flmul@a
  4473  029D  01AF               	clrf	___flmul@a+1
  4474  029E  01B0               	clrf	___flmul@a+2
  4475  029F  01B1               	clrf	___flmul@a+3
  4476  02A0                     l3368:	
  4477  02A0  0837               	movf	___flmul@aexp,w
  4478  02A1  1D03               	btfss	3,2
  4479  02A2  0838               	movf	___flmul@bexp,w
  4480  02A3  1D03               	btfss	3,2
  4481  02A4  2AAA               	goto	l3372
  4482  02A5  01AA               	clrf	?___flmul
  4483  02A6  01AB               	clrf	?___flmul+1
  4484  02A7  01AC               	clrf	?___flmul+2
  4485  02A8  01AD               	clrf	?___flmul+3
  4486  02A9  0008               	return
  4487  02AA                     l3372:	
  4488  02AA  082A               	movf	___flmul@b,w
  4489  02AB  00A2               	movwf	__Umul8_16@multiplicand
  4490  02AC  0830               	movf	___flmul@a+2,w
  4491  02AD  23F5  3180         	fcall	__Umul8_16
  4492  02AF  0823               	movf	?__Umul8_16+1,w
  4493  02B0  00C2               	movwf	___flmul@temp+1
  4494  02B1  0822               	movf	?__Umul8_16,w
  4495  02B2  00C1               	movwf	___flmul@temp
  4496  02B3  00B9               	movwf	___flmul@grs
  4497  02B4  01BA               	clrf	___flmul@grs+1
  4498  02B5  01BB               	clrf	___flmul@grs+2
  4499  02B6  01BC               	clrf	___flmul@grs+3
  4500  02B7  0842               	movf	___flmul@temp+1,w
  4501  02B8  00BD               	movwf	___flmul@prod
  4502  02B9  01BE               	clrf	___flmul@prod+1
  4503  02BA  01BF               	clrf	___flmul@prod+2
  4504  02BB  01C0               	clrf	___flmul@prod+3
  4505  02BC  082B               	movf	___flmul@b+1,w
  4506  02BD  00A2               	movwf	__Umul8_16@multiplicand
  4507  02BE  082F               	movf	___flmul@a+1,w
  4508  02BF  23F5  3180         	fcall	__Umul8_16
  4509  02C1  0823               	movf	?__Umul8_16+1,w
  4510  02C2  00C2               	movwf	___flmul@temp+1
  4511  02C3  0822               	movf	?__Umul8_16,w
  4512  02C4  00C1               	movwf	___flmul@temp
  4513  02C5  07B9               	addwf	___flmul@grs,f
  4514  02C6  3001               	movlw	1
  4515  02C7  1803               	skipnc
  4516  02C8  07BA               	addwf	___flmul@grs+1,f
  4517  02C9  1803               	skipnc
  4518  02CA  07BB               	addwf	___flmul@grs+2,f
  4519  02CB  1803               	skipnc
  4520  02CC  07BC               	addwf	___flmul@grs+3,f
  4521  02CD  0842               	movf	___flmul@temp+1,w
  4522  02CE  07BD               	addwf	___flmul@prod,f
  4523  02CF  3001               	movlw	1
  4524  02D0  1803               	skipnc
  4525  02D1  07BE               	addwf	___flmul@prod+1,f
  4526  02D2  1803               	skipnc
  4527  02D3  07BF               	addwf	___flmul@prod+2,f
  4528  02D4  1803               	skipnc
  4529  02D5  07C0               	addwf	___flmul@prod+3,f
  4530  02D6  082C               	movf	___flmul@b+2,w
  4531  02D7  00A2               	movwf	__Umul8_16@multiplicand
  4532  02D8  082E               	movf	___flmul@a,w
  4533  02D9  23F5  3180         	fcall	__Umul8_16
  4534  02DB  0823               	movf	?__Umul8_16+1,w
  4535  02DC  00C2               	movwf	___flmul@temp+1
  4536  02DD  0822               	movf	?__Umul8_16,w
  4537  02DE  00C1               	movwf	___flmul@temp
  4538  02DF  07B9               	addwf	___flmul@grs,f
  4539  02E0  3001               	movlw	1
  4540  02E1  1803               	skipnc
  4541  02E2  07BA               	addwf	___flmul@grs+1,f
  4542  02E3  1803               	skipnc
  4543  02E4  07BB               	addwf	___flmul@grs+2,f
  4544  02E5  1803               	skipnc
  4545  02E6  07BC               	addwf	___flmul@grs+3,f
  4546  02E7  0842               	movf	___flmul@temp+1,w
  4547  02E8  07BD               	addwf	___flmul@prod,f
  4548  02E9  3001               	movlw	1
  4549  02EA  1803               	skipnc
  4550  02EB  07BE               	addwf	___flmul@prod+1,f
  4551  02EC  1803               	skipnc
  4552  02ED  07BF               	addwf	___flmul@prod+2,f
  4553  02EE  1803               	skipnc
  4554  02EF  07C0               	addwf	___flmul@prod+3,f
  4555  02F0  083B               	movf	___flmul@grs+2,w
  4556  02F1  00BC               	movwf	___flmul@grs+3
  4557  02F2  083A               	movf	___flmul@grs+1,w
  4558  02F3  00BB               	movwf	___flmul@grs+2
  4559  02F4  0839               	movf	___flmul@grs,w
  4560  02F5  00BA               	movwf	___flmul@grs+1
  4561  02F6  01B9               	clrf	___flmul@grs
  4562  02F7  082B               	movf	___flmul@b+1,w
  4563  02F8  00A2               	movwf	__Umul8_16@multiplicand
  4564  02F9  082E               	movf	___flmul@a,w
  4565  02FA  23F5  3180         	fcall	__Umul8_16
  4566  02FC  0823               	movf	?__Umul8_16+1,w
  4567  02FD  00C2               	movwf	___flmul@temp+1
  4568  02FE  0822               	movf	?__Umul8_16,w
  4569  02FF  00C1               	movwf	___flmul@temp
  4570  0300  07B9               	addwf	___flmul@grs,f
  4571  0301  0842               	movf	___flmul@temp+1,w
  4572  0302  3DBA               	addwfc	___flmul@grs+1,f
  4573  0303  3000               	movlw	0
  4574  0304  3DBB               	addwfc	___flmul@grs+2,f
  4575  0305  3DBC               	addwfc	___flmul@grs+3,f
  4576  0306  082A               	movf	___flmul@b,w
  4577  0307  00A2               	movwf	__Umul8_16@multiplicand
  4578  0308  082F               	movf	___flmul@a+1,w
  4579  0309  23F5  3180         	fcall	__Umul8_16
  4580  030B  0823               	movf	?__Umul8_16+1,w
  4581  030C  00C2               	movwf	___flmul@temp+1
  4582  030D  0822               	movf	?__Umul8_16,w
  4583  030E  00C1               	movwf	___flmul@temp
  4584  030F  07B9               	addwf	___flmul@grs,f
  4585  0310  0842               	movf	___flmul@temp+1,w
  4586  0311  3DBA               	addwfc	___flmul@grs+1,f
  4587  0312  3000               	movlw	0
  4588  0313  3DBB               	addwfc	___flmul@grs+2,f
  4589  0314  3DBC               	addwfc	___flmul@grs+3,f
  4590  0315  083B               	movf	___flmul@grs+2,w
  4591  0316  00BC               	movwf	___flmul@grs+3
  4592  0317  083A               	movf	___flmul@grs+1,w
  4593  0318  00BB               	movwf	___flmul@grs+2
  4594  0319  0839               	movf	___flmul@grs,w
  4595  031A  00BA               	movwf	___flmul@grs+1
  4596  031B  01B9               	clrf	___flmul@grs
  4597  031C  082A               	movf	___flmul@b,w
  4598  031D  00A2               	movwf	__Umul8_16@multiplicand
  4599  031E  082E               	movf	___flmul@a,w
  4600  031F  23F5  3180         	fcall	__Umul8_16
  4601  0321  0823               	movf	?__Umul8_16+1,w
  4602  0322  00C2               	movwf	___flmul@temp+1
  4603  0323  0822               	movf	?__Umul8_16,w
  4604  0324  00C1               	movwf	___flmul@temp
  4605  0325  07B9               	addwf	___flmul@grs,f
  4606  0326  0842               	movf	___flmul@temp+1,w
  4607  0327  3DBA               	addwfc	___flmul@grs+1,f
  4608  0328  3000               	movlw	0
  4609  0329  3DBB               	addwfc	___flmul@grs+2,f
  4610  032A  3DBC               	addwfc	___flmul@grs+3,f
  4611  032B  082B               	movf	___flmul@b+1,w
  4612  032C  00A2               	movwf	__Umul8_16@multiplicand
  4613  032D  0830               	movf	___flmul@a+2,w
  4614  032E  23F5  3180         	fcall	__Umul8_16
  4615  0330  0823               	movf	?__Umul8_16+1,w
  4616  0331  00C2               	movwf	___flmul@temp+1
  4617  0332  0822               	movf	?__Umul8_16,w
  4618  0333  00C1               	movwf	___flmul@temp
  4619  0334  07BD               	addwf	___flmul@prod,f
  4620  0335  0842               	movf	___flmul@temp+1,w
  4621  0336  3DBE               	addwfc	___flmul@prod+1,f
  4622  0337  3000               	movlw	0
  4623  0338  3DBF               	addwfc	___flmul@prod+2,f
  4624  0339  3DC0               	addwfc	___flmul@prod+3,f
  4625  033A  082C               	movf	___flmul@b+2,w
  4626  033B  00A2               	movwf	__Umul8_16@multiplicand
  4627  033C  082F               	movf	___flmul@a+1,w
  4628  033D  23F5  3180         	fcall	__Umul8_16
  4629  033F  0823               	movf	?__Umul8_16+1,w
  4630  0340  00C2               	movwf	___flmul@temp+1
  4631  0341  0822               	movf	?__Umul8_16,w
  4632  0342  00C1               	movwf	___flmul@temp
  4633  0343  07BD               	addwf	___flmul@prod,f
  4634  0344  0842               	movf	___flmul@temp+1,w
  4635  0345  3DBE               	addwfc	___flmul@prod+1,f
  4636  0346  3000               	movlw	0
  4637  0347  3DBF               	addwfc	___flmul@prod+2,f
  4638  0348  3DC0               	addwfc	___flmul@prod+3,f
  4639  0349  082C               	movf	___flmul@b+2,w
  4640  034A  00A2               	movwf	__Umul8_16@multiplicand
  4641  034B  0830               	movf	___flmul@a+2,w
  4642  034C  23F5  3180         	fcall	__Umul8_16
  4643  034E  0823               	movf	?__Umul8_16+1,w
  4644  034F  00C2               	movwf	___flmul@temp+1
  4645  0350  0822               	movf	?__Umul8_16,w
  4646  0351  00C1               	movwf	___flmul@temp
  4647  0352  00B2               	movwf	??___flmul
  4648  0353  0842               	movf	___flmul@temp+1,w
  4649  0354  00B3               	movwf	??___flmul+1
  4650  0355  01B4               	clrf	??___flmul+2
  4651  0356  01B5               	clrf	??___flmul+3
  4652  0357  0834               	movf	??___flmul+2,w
  4653  0358  00B5               	movwf	??___flmul+3
  4654  0359  0833               	movf	??___flmul+1,w
  4655  035A  00B4               	movwf	??___flmul+2
  4656  035B  0832               	movf	??___flmul,w
  4657  035C  00B3               	movwf	??___flmul+1
  4658  035D  01B2               	clrf	??___flmul
  4659  035E  0832               	movf	??___flmul,w
  4660  035F  07BD               	addwf	___flmul@prod,f
  4661  0360  0833               	movf	??___flmul+1,w
  4662  0361  3DBE               	addwfc	___flmul@prod+1,f
  4663  0362  0834               	movf	??___flmul+2,w
  4664  0363  3DBF               	addwfc	___flmul@prod+2,f
  4665  0364  0835               	movf	??___flmul+3,w
  4666  0365  3DC0               	addwfc	___flmul@prod+3,f
  4667  0366  083C               	movf	___flmul@grs+3,w
  4668  0367  07BD               	addwf	___flmul@prod,f
  4669  0368  3001               	movlw	1
  4670  0369  1803               	skipnc
  4671  036A  07BE               	addwf	___flmul@prod+1,f
  4672  036B  1803               	skipnc
  4673  036C  07BF               	addwf	___flmul@prod+2,f
  4674  036D  1803               	skipnc
  4675  036E  07C0               	addwf	___flmul@prod+3,f
  4676  036F  083B               	movf	___flmul@grs+2,w
  4677  0370  00BC               	movwf	___flmul@grs+3
  4678  0371  083A               	movf	___flmul@grs+1,w
  4679  0372  00BB               	movwf	___flmul@grs+2
  4680  0373  0839               	movf	___flmul@grs,w
  4681  0374  00BA               	movwf	___flmul@grs+1
  4682  0375  01B9               	clrf	___flmul@grs
  4683  0376  0838               	movf	___flmul@bexp,w
  4684  0377  00C1               	movwf	___flmul@temp
  4685  0378  01C2               	clrf	___flmul@temp+1
  4686  0379  0837               	movf	___flmul@aexp,w
  4687  037A  07C1               	addwf	___flmul@temp,f
  4688  037B  1803               	skipnc
  4689  037C  0AC2               	incf	___flmul@temp+1,f
  4690  037D  3082               	movlw	-126
  4691  037E                     L8:	
  4692  037E  07C1               	addwf	___flmul@temp,f
  4693  037F  1C03               	skipc
  4694  0380  03C2               	decf	___flmul@temp+1,f
  4695  0381  1BBF               	btfsc	___flmul@prod+2,7
  4696  0382  2B8F               	goto	l3420
  4697  0383  35BD               	lslf	___flmul@prod,f
  4698  0384  0DBE               	rlf	___flmul@prod+1,f
  4699  0385  0DBF               	rlf	___flmul@prod+2,f
  4700  0386  0DC0               	rlf	___flmul@prod+3,f
  4701  0387  1BBC               	btfsc	___flmul@grs+3,7
  4702  0388  143D               	bsf	___flmul@prod,0
  4703  0389  30FF               	movlw	-1
  4704  038A  35B9               	lslf	___flmul@grs,f
  4705  038B  0DBA               	rlf	___flmul@grs+1,f
  4706  038C  0DBB               	rlf	___flmul@grs+2,f
  4707  038D  0DBC               	rlf	___flmul@grs+3,f
  4708  038E  2B7E               	goto	L8
  4709  038F                     l3420:	
  4710  038F  01B7               	clrf	___flmul@aexp
  4711  0390  1FBC               	btfss	___flmul@grs+3,7
  4712  0391  2BA4               	goto	l3430
  4713  0392  0839               	movf	___flmul@grs,w
  4714  0393  00B2               	movwf	??___flmul
  4715  0394  083A               	movf	___flmul@grs+1,w
  4716  0395  00B3               	movwf	??___flmul+1
  4717  0396  083B               	movf	___flmul@grs+2,w
  4718  0397  00B4               	movwf	??___flmul+2
  4719  0398  307F               	movlw	127
  4720  0399  053C               	andwf	___flmul@grs+3,w
  4721  039A  00B5               	movwf	??___flmul+3
  4722  039B  0434               	iorwf	??___flmul+2,w
  4723  039C  0433               	iorwf	??___flmul+1,w
  4724  039D  0432               	iorwf	??___flmul,w
  4725  039E  1903               	skipnz
  4726  039F  183D               	btfsc	___flmul@prod,0
  4727  03A0  2BA2               	goto	l3426
  4728  03A1  2BA4               	goto	l3430
  4729  03A2                     l3426:	
  4730  03A2  01B7               	clrf	___flmul@aexp
  4731  03A3  0AB7               	incf	___flmul@aexp,f
  4732  03A4                     l3430:	
  4733  03A4  0837               	movf	___flmul@aexp,w
  4734  03A5  1903               	btfsc	3,2
  4735  03A6  2BB6               	goto	l3440
  4736  03A7  3001               	movlw	1
  4737  03A8  07BD               	addwf	___flmul@prod,f
  4738  03A9  3000               	movlw	0
  4739  03AA  3DBE               	addwfc	___flmul@prod+1,f
  4740  03AB  3DBF               	addwfc	___flmul@prod+2,f
  4741  03AC  3DC0               	addwfc	___flmul@prod+3,f
  4742  03AD  1C40               	btfss	___flmul@prod+3,0
  4743  03AE  2BB6               	goto	l3440
  4744  03AF  37C0               	asrf	___flmul@prod+3,f
  4745  03B0  0CBF               	rrf	___flmul@prod+2,f
  4746  03B1  0CBE               	rrf	___flmul@prod+1,f
  4747  03B2  0CBD               	rrf	___flmul@prod,f
  4748  03B3  0AC1               	incf	___flmul@temp,f
  4749  03B4  1903               	skipnz
  4750  03B5  0AC2               	incf	___flmul@temp+1,f
  4751  03B6                     l3440:	
  4752  03B6  0842               	movf	___flmul@temp+1,w
  4753  03B7  3A80               	xorlw	128
  4754  03B8  00B2               	movwf	??___flmul
  4755  03B9  3080               	movlw	128
  4756  03BA  0232               	subwf	??___flmul,w
  4757  03BB  1D03               	skipz
  4758  03BC  2BBF               	goto	u4025
  4759  03BD  30FF               	movlw	255
  4760  03BE  0241               	subwf	___flmul@temp,w
  4761  03BF                     u4025:	
  4762  03BF  1C03               	skipc
  4763  03C0  2BC9               	goto	l3444
  4764  03C1  307F               	movlw	127
  4765  03C2  0020               	movlb	0	; select bank0
  4766  03C3  00C0               	movwf	___flmul@prod+3
  4767  03C4  3080               	movlw	128
  4768  03C5  00BF               	movwf	___flmul@prod+2
  4769  03C6  01BE               	clrf	___flmul@prod+1
  4770  03C7  01BD               	clrf	___flmul@prod
  4771  03C8  2BEA               	goto	l729
  4772  03C9                     l3444:	
  4773  03C9  0020               	movlb	0	; select bank0
  4774  03CA  0842               	movf	___flmul@temp+1,w
  4775  03CB  3A80               	xorlw	128
  4776  03CC  00B2               	movwf	??___flmul
  4777  03CD  3080               	movlw	128
  4778  03CE  0232               	subwf	??___flmul,w
  4779  03CF  1D03               	skipz
  4780  03D0  2BD3               	goto	u4035
  4781  03D1  3001               	movlw	1
  4782  03D2  0241               	subwf	___flmul@temp,w
  4783  03D3                     u4035:	
  4784  03D3  1803               	skipnc
  4785  03D4  2BDC               	goto	l3450
  4786  03D5  0020               	movlb	0	; select bank0
  4787  03D6  01BD               	clrf	___flmul@prod
  4788  03D7  01BE               	clrf	___flmul@prod+1
  4789  03D8  01BF               	clrf	___flmul@prod+2
  4790  03D9  01C0               	clrf	___flmul@prod+3
  4791  03DA  01B6               	clrf	___flmul@sign
  4792  03DB  2BEA               	goto	l729
  4793  03DC                     l3450:	
  4794  03DC  0020               	movlb	0	; select bank0
  4795  03DD  0841               	movf	___flmul@temp,w
  4796  03DE  00B8               	movwf	___flmul@bexp
  4797  03DF  30FF               	movlw	255
  4798  03E0  05BD               	andwf	___flmul@prod,f
  4799  03E1  05BE               	andwf	___flmul@prod+1,f
  4800  03E2  307F               	movlw	127
  4801  03E3  05BF               	andwf	___flmul@prod+2,f
  4802  03E4  3000               	movlw	0
  4803  03E5  01C0               	clrf	___flmul@prod+3
  4804  03E6  1838               	btfsc	___flmul@bexp,0
  4805  03E7  17BF               	bsf	___flmul@prod+2,7
  4806  03E8  3638               	lsrf	___flmul@bexp,w
  4807  03E9  00C0               	movwf	___flmul@prod+3
  4808  03EA                     l729:	
  4809  03EA  0836               	movf	___flmul@sign,w
  4810  03EB  04C0               	iorwf	___flmul@prod+3,f
  4811  03EC  0840               	movf	___flmul@prod+3,w
  4812  03ED  00AD               	movwf	?___flmul+3
  4813  03EE  083F               	movf	___flmul@prod+2,w
  4814  03EF  00AC               	movwf	?___flmul+2
  4815  03F0  083E               	movf	___flmul@prod+1,w
  4816  03F1  00AB               	movwf	?___flmul+1
  4817  03F2  083D               	movf	___flmul@prod,w
  4818  03F3  00AA               	movwf	?___flmul
  4819  03F4  0008               	return
  4820  03F5                     __end_of___flmul:	
  4821  03F5                     __ptext16:	
  4822 ;; *************** function __Umul8_16 *****************
  4823 ;; Defined at:
  4824 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8_16.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  multiplier      1    wreg     unsigned char 
  4827 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  multiplier      1    7[BANK0 ] unsigned char 
  4830 ;;  word_mpld       2    8[BANK0 ] unsigned int 
  4831 ;;  product         2    5[BANK0 ] unsigned int 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  2    2[BANK0 ] unsigned int 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 1F/0
  4838 ;;		On exit  : 1F/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4841 ;;      Params:         0       3       0       0
  4842 ;;      Locals:         0       5       0       0
  4843 ;;      Temps:          0       0       0       0
  4844 ;;      Totals:         0       8       0       0
  4845 ;;Total ram usage:        8 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    2
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		___flmul
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function __Umul8_16
  4857  03F5                     __Umul8_16:	
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4861                           ;__Umul8_16@multiplier stored from wreg
  4862  03F5  00A7               	movwf	__Umul8_16@multiplier
  4863  03F6  01A5               	clrf	__Umul8_16@product
  4864  03F7  01A6               	clrf	__Umul8_16@product+1
  4865  03F8  0822               	movf	__Umul8_16@multiplicand,w
  4866  03F9  00A8               	movwf	__Umul8_16@word_mpld
  4867  03FA  01A9               	clrf	__Umul8_16@word_mpld+1
  4868  03FB  1C27               	btfss	__Umul8_16@multiplier,0
  4869  03FC  2C01               	goto	l3220
  4870  03FD  0828               	movf	__Umul8_16@word_mpld,w
  4871  03FE  07A5               	addwf	__Umul8_16@product,f
  4872  03FF  0829               	movf	__Umul8_16@word_mpld+1,w
  4873  0400  3DA6               	addwfc	__Umul8_16@product+1,f
  4874  0401                     l3220:	
  4875  0401  35A8               	lslf	__Umul8_16@word_mpld,f
  4876  0402  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4877  0403  1CA7               	btfss	__Umul8_16@multiplier,1
  4878  0404  2C09               	goto	l3226
  4879  0405  0828               	movf	__Umul8_16@word_mpld,w
  4880  0406  07A5               	addwf	__Umul8_16@product,f
  4881  0407  0829               	movf	__Umul8_16@word_mpld+1,w
  4882  0408  3DA6               	addwfc	__Umul8_16@product+1,f
  4883  0409                     l3226:	
  4884  0409  35A8               	lslf	__Umul8_16@word_mpld,f
  4885  040A  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4886  040B  1D27               	btfss	__Umul8_16@multiplier,2
  4887  040C  2C11               	goto	l3232
  4888  040D  0828               	movf	__Umul8_16@word_mpld,w
  4889  040E  07A5               	addwf	__Umul8_16@product,f
  4890  040F  0829               	movf	__Umul8_16@word_mpld+1,w
  4891  0410  3DA6               	addwfc	__Umul8_16@product+1,f
  4892  0411                     l3232:	
  4893  0411  35A8               	lslf	__Umul8_16@word_mpld,f
  4894  0412  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4895  0413  1DA7               	btfss	__Umul8_16@multiplier,3
  4896  0414  2C19               	goto	l3238
  4897  0415  0828               	movf	__Umul8_16@word_mpld,w
  4898  0416  07A5               	addwf	__Umul8_16@product,f
  4899  0417  0829               	movf	__Umul8_16@word_mpld+1,w
  4900  0418  3DA6               	addwfc	__Umul8_16@product+1,f
  4901  0419                     l3238:	
  4902  0419  35A8               	lslf	__Umul8_16@word_mpld,f
  4903  041A  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4904  041B  1E27               	btfss	__Umul8_16@multiplier,4
  4905  041C  2C21               	goto	l3244
  4906  041D  0828               	movf	__Umul8_16@word_mpld,w
  4907  041E  07A5               	addwf	__Umul8_16@product,f
  4908  041F  0829               	movf	__Umul8_16@word_mpld+1,w
  4909  0420  3DA6               	addwfc	__Umul8_16@product+1,f
  4910  0421                     l3244:	
  4911  0421  35A8               	lslf	__Umul8_16@word_mpld,f
  4912  0422  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4913  0423  1EA7               	btfss	__Umul8_16@multiplier,5
  4914  0424  2C29               	goto	l3250
  4915  0425  0828               	movf	__Umul8_16@word_mpld,w
  4916  0426  07A5               	addwf	__Umul8_16@product,f
  4917  0427  0829               	movf	__Umul8_16@word_mpld+1,w
  4918  0428  3DA6               	addwfc	__Umul8_16@product+1,f
  4919  0429                     l3250:	
  4920  0429  35A8               	lslf	__Umul8_16@word_mpld,f
  4921  042A  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4922  042B  1F27               	btfss	__Umul8_16@multiplier,6
  4923  042C  2C31               	goto	l3256
  4924  042D  0828               	movf	__Umul8_16@word_mpld,w
  4925  042E  07A5               	addwf	__Umul8_16@product,f
  4926  042F  0829               	movf	__Umul8_16@word_mpld+1,w
  4927  0430  3DA6               	addwfc	__Umul8_16@product+1,f
  4928  0431                     l3256:	
  4929  0431  35A8               	lslf	__Umul8_16@word_mpld,f
  4930  0432  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4931  0433  1FA7               	btfss	__Umul8_16@multiplier,7
  4932  0434  2C39               	goto	l765
  4933  0435  0828               	movf	__Umul8_16@word_mpld,w
  4934  0436  07A5               	addwf	__Umul8_16@product,f
  4935  0437  0829               	movf	__Umul8_16@word_mpld+1,w
  4936  0438  3DA6               	addwfc	__Umul8_16@product+1,f
  4937  0439                     l765:	
  4938  0439  0826               	movf	__Umul8_16@product+1,w
  4939  043A  00A3               	movwf	?__Umul8_16+1
  4940  043B  0825               	movf	__Umul8_16@product,w
  4941  043C  00A2               	movwf	?__Umul8_16
  4942  043D  0008               	return
  4943  043E                     __end_of__Umul8_16:	
  4944  043E                     __ptext12:	
  4945 ;; *************** function ___fltol *****************
  4946 ;; Defined at:
  4947 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fltol.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  f1              4    2[BANK0 ] unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  exp1            1   11[BANK0 ] unsigned char 
  4952 ;;  sign1           1   10[BANK0 ] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  4    2[BANK0 ] long 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/0
  4959 ;;		On exit  : 1F/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         0       4       0       0
  4963 ;;      Locals:         0       2       0       0
  4964 ;;      Temps:          0       4       0       0
  4965 ;;      Totals:         0      10       0       0
  4966 ;;Total ram usage:       10 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    2
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_calculate_pidA
  4973 ;;		_calculate_pidM
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function ___fltol
  4979  043E                     ___fltol:	
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  4983  043E  0822               	movf	___fltol@f1,w
  4984  043F  00A6               	movwf	??___fltol
  4985  0440  0823               	movf	___fltol@f1+1,w
  4986  0441  00A7               	movwf	??___fltol+1
  4987  0442  0824               	movf	___fltol@f1+2,w
  4988  0443  00A8               	movwf	??___fltol+2
  4989  0444  0825               	movf	___fltol@f1+3,w
  4990  0445  00A9               	movwf	??___fltol+3
  4991  0446  1003               	clrc
  4992  0447  0D28               	rlf	??___fltol+2,w
  4993  0448  0D29               	rlf	??___fltol+3,w
  4994  0449  00AB               	movwf	___fltol@exp1
  4995  044A  082B               	movf	___fltol@exp1,w
  4996  044B  1D03               	btfss	3,2
  4997  044C  2C52               	goto	l3304
  4998  044D                     l3302:	
  4999  044D  01A2               	clrf	?___fltol
  5000  044E  01A3               	clrf	?___fltol+1
  5001  044F  01A4               	clrf	?___fltol+2
  5002  0450  01A5               	clrf	?___fltol+3
  5003  0451  0008               	return
  5004  0452                     l3304:	
  5005  0452  0822               	movf	___fltol@f1,w
  5006  0453  00A6               	movwf	??___fltol
  5007  0454  0823               	movf	___fltol@f1+1,w
  5008  0455  00A7               	movwf	??___fltol+1
  5009  0456  0824               	movf	___fltol@f1+2,w
  5010  0457  00A8               	movwf	??___fltol+2
  5011  0458  0825               	movf	___fltol@f1+3,w
  5012  0459  00A9               	movwf	??___fltol+3
  5013  045A  301F               	movlw	31
  5014  045B                     u3805:	
  5015  045B  36A9               	lsrf	??___fltol+3,f
  5016  045C  0CA8               	rrf	??___fltol+2,f
  5017  045D  0CA7               	rrf	??___fltol+1,f
  5018  045E  0CA6               	rrf	??___fltol,f
  5019  045F  0B89               	decfsz	9,f
  5020  0460  2C5B               	goto	u3805
  5021  0461  0826               	movf	??___fltol,w
  5022  0462  00AA               	movwf	___fltol@sign1
  5023  0463  3096               	movlw	150
  5024  0464  17A4               	bsf	___fltol@f1+2,7
  5025  0465  01A5               	clrf	___fltol@f1+3
  5026  0466  02AB               	subwf	___fltol@exp1,f
  5027  0467  1FAB               	btfss	___fltol@exp1,7
  5028  0468  2C75               	goto	l3322
  5029  0469  082B               	movf	___fltol@exp1,w
  5030  046A  3A80               	xorlw	128
  5031  046B  3E97               	addlw	151
  5032  046C  1C03               	btfss	3,0
  5033  046D  2C4D               	goto	l3302
  5034  046E                     l3318:	
  5035  046E  36A5               	lsrf	___fltol@f1+3,f
  5036  046F  0CA4               	rrf	___fltol@f1+2,f
  5037  0470  0CA3               	rrf	___fltol@f1+1,f
  5038  0471  0CA2               	rrf	___fltol@f1,f
  5039  0472  0FAB               	incfsz	___fltol@exp1,f
  5040  0473  2C6E               	goto	l3318
  5041  0474  2C82               	goto	l3330
  5042  0475                     l3322:	
  5043  0475  3020               	movlw	32
  5044  0476  022B               	subwf	___fltol@exp1,w
  5045  0477  1803               	btfsc	3,0
  5046  0478  2C4D               	goto	l3302
  5047  0479                     l3328:	
  5048  0479  082B               	movf	___fltol@exp1,w
  5049  047A  1903               	btfsc	3,2
  5050  047B  2C82               	goto	l3330
  5051  047C  35A2               	lslf	___fltol@f1,f
  5052  047D  0DA3               	rlf	___fltol@f1+1,f
  5053  047E  0DA4               	rlf	___fltol@f1+2,f
  5054  047F  0DA5               	rlf	___fltol@f1+3,f
  5055  0480  03AB               	decf	___fltol@exp1,f
  5056  0481  2C79               	goto	l3328
  5057  0482                     l3330:	
  5058  0482  082A               	movf	___fltol@sign1,w
  5059  0483  1903               	btfsc	3,2
  5060  0484  0008               	return
  5061  0485  09A2               	comf	___fltol@f1,f
  5062  0486  09A3               	comf	___fltol@f1+1,f
  5063  0487  09A4               	comf	___fltol@f1+2,f
  5064  0488  09A5               	comf	___fltol@f1+3,f
  5065  0489  0AA2               	incf	___fltol@f1,f
  5066  048A  1903               	skipnz
  5067  048B  0AA3               	incf	___fltol@f1+1,f
  5068  048C  1903               	skipnz
  5069  048D  0AA4               	incf	___fltol@f1+2,f
  5070  048E  1903               	skipnz
  5071  048F  0AA5               	incf	___fltol@f1+3,f
  5072  0490  0008               	return
  5073  0491                     __end_of___fltol:	
  5074                           
  5075                           	psect	text6
  5076  05E1                     __ptext6:	
  5077 ;; *************** function _init_I2C_buffer *****************
  5078 ;; Defined at:
  5079 ;;		line 311 in file "main.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : B1F/1
  5090 ;;		On exit  : 1F/1
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5093 ;;      Params:         0       0       0       0
  5094 ;;      Locals:         0       0       0       0
  5095 ;;      Temps:          0       0       0       0
  5096 ;;      Totals:         0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    3
  5100 ;; This function calls:
  5101 ;;		_eeprom_read
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           
  5108                           ;psect for function _init_I2C_buffer
  5109  05E1                     _init_I2C_buffer:	
  5110                           
  5111                           ;main.c: 312: I2C_buffer.data.ID = 0xF3;
  5112                           
  5113                           ;incstack = 0
  5114                           ; Regs used in _init_I2C_buffer: [wreg+status,2+status,0+pclath+cstack]
  5115  05E1  30F3               	movlw	243
  5116  05E2  00A0               	movwf	_I2C_buffer^(0+128)	;volatile
  5117                           
  5118                           ;main.c: 313: I2C_buffer.data.ADDRESS = eeprom_read(0);
  5119  05E3  3000               	movlw	0
  5120  05E4  2685  3185         	fcall	_eeprom_read
  5121  05E6  0021               	movlb	1	; select bank1
  5122  05E7  00A1               	movwf	(_I2C_buffer^(0+128)+1)	;volatile
  5123                           
  5124                           ;main.c: 314: I2C_buffer.data.START_STOP = 0;
  5125  05E8  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  5126                           
  5127                           ;main.c: 315: I2C_buffer.data.IOWPU = eeprom_read(1);
  5128  05E9  3001               	movlw	1
  5129  05EA  2685  3185         	fcall	_eeprom_read
  5130  05EC  0021               	movlb	1	; select bank1
  5131  05ED  00A3               	movwf	(_I2C_buffer^(0+128)+3)	;volatile
  5132                           
  5133                           ;main.c: 316: I2C_buffer.data.MODE = 0;
  5134  05EE  01A4               	clrf	(_I2C_buffer^(0+128)+4)	;volatile
  5135                           
  5136                           ;main.c: 317: I2C_buffer.data.SAVE = 0;
  5137  05EF  01A5               	clrf	(_I2C_buffer^(0+128)+5)	;volatile
  5138                           
  5139                           ;main.c: 318: I2C_buffer.data.RESET = 0;
  5140  05F0  01A6               	clrf	(_I2C_buffer^(0+128)+6)	;volatile
  5141                           
  5142                           ;main.c: 320: I2C_buffer.byte[0x07] = eeprom_read(2);
  5143  05F1  3002               	movlw	2
  5144  05F2  2685  3185         	fcall	_eeprom_read
  5145  05F4  0021               	movlb	1	; select bank1
  5146  05F5  00A7               	movwf	(_I2C_buffer^(0+128)+7)	;volatile
  5147                           
  5148                           ;main.c: 321: I2C_buffer.byte[0x08] = eeprom_read(3);
  5149  05F6  3003               	movlw	3
  5150  05F7  2685  3185         	fcall	_eeprom_read
  5151  05F9  0021               	movlb	1	; select bank1
  5152  05FA  00A8               	movwf	(_I2C_buffer^(0+128)+8)	;volatile
  5153                           
  5154                           ;main.c: 323: I2C_buffer.byte[0x09] = eeprom_read(4);
  5155  05FB  3004               	movlw	4
  5156  05FC  2685  3185         	fcall	_eeprom_read
  5157  05FE  0021               	movlb	1	; select bank1
  5158  05FF  00A9               	movwf	(_I2C_buffer^(0+128)+9)	;volatile
  5159                           
  5160                           ;main.c: 324: I2C_buffer.byte[0x0A] = eeprom_read(5);
  5161  0600  3005               	movlw	5
  5162  0601  2685  3185         	fcall	_eeprom_read
  5163  0603  0021               	movlb	1	; select bank1
  5164  0604  00AA               	movwf	(_I2C_buffer^(0+128)+10)	;volatile
  5165                           
  5166                           ;main.c: 325: I2C_buffer.data.RPM = 0;
  5167  0605  01AB               	clrf	(_I2C_buffer^(0+128)+11)	;volatile
  5168  0606  01AC               	clrf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5169                           
  5170                           ;main.c: 326: I2C_buffer.data.SPEED = 0;
  5171  0607  01AD               	clrf	(_I2C_buffer^(0+128)+13)	;volatile
  5172  0608  01AE               	clrf	((_I2C_buffer+1)^(0+128)+13)	;volatile
  5173                           
  5174                           ;main.c: 327: I2C_buffer.data.DISTANCE = 0;
  5175  0609  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  5176  060A  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  5177  060B  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  5178  060C  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  5179                           
  5180                           ;main.c: 329: I2C_buffer.byte[0x13] = eeprom_read(8);
  5181  060D  3008               	movlw	8
  5182  060E  2685  3185         	fcall	_eeprom_read
  5183  0610  0021               	movlb	1	; select bank1
  5184  0611  00B3               	movwf	(_I2C_buffer^(0+128)+19)	;volatile
  5185                           
  5186                           ;main.c: 330: I2C_buffer.byte[0x14] = eeprom_read(9);
  5187  0612  3009               	movlw	9
  5188  0613  2685  3185         	fcall	_eeprom_read
  5189  0615  0021               	movlb	1	; select bank1
  5190  0616  00B4               	movwf	(_I2C_buffer^(0+128)+20)	;volatile
  5191                           
  5192                           ;main.c: 331: I2C_buffer.byte[0x15] = eeprom_read(10);
  5193  0617  300A               	movlw	10
  5194  0618  2685  3185         	fcall	_eeprom_read
  5195  061A  0021               	movlb	1	; select bank1
  5196  061B  00B5               	movwf	(_I2C_buffer^(0+128)+21)	;volatile
  5197                           
  5198                           ;main.c: 332: I2C_buffer.byte[0x16] = eeprom_read(11);
  5199  061C  300B               	movlw	11
  5200  061D  2685  3185         	fcall	_eeprom_read
  5201  061F  0021               	movlb	1	; select bank1
  5202  0620  00B6               	movwf	(_I2C_buffer^(0+128)+22)	;volatile
  5203                           
  5204                           ;main.c: 334: I2C_buffer.byte[0x17] = eeprom_read(12);
  5205  0621  300C               	movlw	12
  5206  0622  2685  3185         	fcall	_eeprom_read
  5207  0624  0021               	movlb	1	; select bank1
  5208  0625  00B7               	movwf	(_I2C_buffer^(0+128)+23)	;volatile
  5209                           
  5210                           ;main.c: 335: I2C_buffer.byte[0x18] = eeprom_read(13);
  5211  0626  300D               	movlw	13
  5212  0627  2685  3185         	fcall	_eeprom_read
  5213  0629  0021               	movlb	1	; select bank1
  5214  062A  00B8               	movwf	(_I2C_buffer^(0+128)+24)	;volatile
  5215                           
  5216                           ;main.c: 336: I2C_buffer.byte[0x19] = eeprom_read(14);
  5217  062B  300E               	movlw	14
  5218  062C  2685  3185         	fcall	_eeprom_read
  5219  062E  0021               	movlb	1	; select bank1
  5220  062F  00B9               	movwf	(_I2C_buffer^(0+128)+25)	;volatile
  5221                           
  5222                           ;main.c: 337: I2C_buffer.byte[0x1A] = eeprom_read(15);
  5223  0630  300F               	movlw	15
  5224  0631  2685  3185         	fcall	_eeprom_read
  5225  0633  0021               	movlb	1	; select bank1
  5226  0634  00BA               	movwf	(_I2C_buffer^(0+128)+26)	;volatile
  5227                           
  5228                           ;main.c: 339: I2C_buffer.byte[0x1B] = eeprom_read(16);
  5229  0635  3010               	movlw	16
  5230  0636  2685  3185         	fcall	_eeprom_read
  5231  0638  0021               	movlb	1	; select bank1
  5232  0639  00BB               	movwf	(_I2C_buffer^(0+128)+27)	;volatile
  5233                           
  5234                           ;main.c: 340: I2C_buffer.byte[0x1C] = eeprom_read(17);
  5235  063A  3011               	movlw	17
  5236  063B  2685  3185         	fcall	_eeprom_read
  5237  063D  0021               	movlb	1	; select bank1
  5238  063E  00BC               	movwf	(_I2C_buffer^(0+128)+28)	;volatile
  5239                           
  5240                           ;main.c: 341: I2C_buffer.byte[0x1D] = eeprom_read(18);
  5241  063F  3012               	movlw	18
  5242  0640  2685  3185         	fcall	_eeprom_read
  5243  0642  0021               	movlb	1	; select bank1
  5244  0643  00BD               	movwf	(_I2C_buffer^(0+128)+29)	;volatile
  5245                           
  5246                           ;main.c: 342: I2C_buffer.byte[0x1E] = eeprom_read(19);
  5247  0644  3013               	movlw	19
  5248  0645  2685  3185         	fcall	_eeprom_read
  5249  0647  0021               	movlb	1	; select bank1
  5250  0648  00BE               	movwf	(_I2C_buffer^(0+128)+30)	;volatile
  5251                           
  5252                           ;main.c: 344: I2C_buffer.byte[0x1F] = eeprom_read(20);
  5253  0649  3014               	movlw	20
  5254  064A  2685  3185         	fcall	_eeprom_read
  5255  064C  0021               	movlb	1	; select bank1
  5256  064D  00BF               	movwf	(_I2C_buffer^(0+128)+31)	;volatile
  5257                           
  5258                           ;main.c: 345: I2C_buffer.byte[0x20] = eeprom_read(21);
  5259  064E  3015               	movlw	21
  5260  064F  2685  3185         	fcall	_eeprom_read
  5261  0651  0021               	movlb	1	; select bank1
  5262  0652  00C0               	movwf	(_I2C_buffer^(0+128)+32)	;volatile
  5263                           
  5264                           ;main.c: 346: I2C_buffer.byte[0x21] = eeprom_read(22);
  5265  0653  3016               	movlw	22
  5266  0654  2685  3185         	fcall	_eeprom_read
  5267  0656  0021               	movlb	1	; select bank1
  5268  0657  00C1               	movwf	(_I2C_buffer^(0+128)+33)	;volatile
  5269                           
  5270                           ;main.c: 347: I2C_buffer.byte[0x22] = eeprom_read(23);
  5271  0658  3017               	movlw	23
  5272  0659  2685  3185         	fcall	_eeprom_read
  5273  065B  0021               	movlb	1	; select bank1
  5274  065C  00C2               	movwf	(_I2C_buffer^(0+128)+34)	;volatile
  5275                           
  5276                           ;main.c: 349: I2C_buffer.byte[0x23] = eeprom_read(24);
  5277  065D  3018               	movlw	24
  5278  065E  2685  3185         	fcall	_eeprom_read
  5279  0660  0021               	movlb	1	; select bank1
  5280  0661  00C3               	movwf	(_I2C_buffer^(0+128)+35)	;volatile
  5281                           
  5282                           ;main.c: 350: I2C_buffer.byte[0x24] = eeprom_read(25);
  5283  0662  3019               	movlw	25
  5284  0663  2685  3185         	fcall	_eeprom_read
  5285  0665  0021               	movlb	1	; select bank1
  5286  0666  00C4               	movwf	(_I2C_buffer^(0+128)+36)	;volatile
  5287                           
  5288                           ;main.c: 351: I2C_buffer.byte[0x25] = eeprom_read(26);
  5289  0667  301A               	movlw	26
  5290  0668  2685  3185         	fcall	_eeprom_read
  5291  066A  0021               	movlb	1	; select bank1
  5292  066B  00C5               	movwf	(_I2C_buffer^(0+128)+37)	;volatile
  5293                           
  5294                           ;main.c: 352: I2C_buffer.byte[0x26] = eeprom_read(27);
  5295  066C  301B               	movlw	27
  5296  066D  2685  3185         	fcall	_eeprom_read
  5297  066F  0021               	movlb	1	; select bank1
  5298  0670  00C6               	movwf	(_I2C_buffer^(0+128)+38)	;volatile
  5299                           
  5300                           ;main.c: 354: I2C_buffer.byte[0x27] = eeprom_read(28);
  5301  0671  301C               	movlw	28
  5302  0672  2685  3185         	fcall	_eeprom_read
  5303  0674  0021               	movlb	1	; select bank1
  5304  0675  00C7               	movwf	(_I2C_buffer^(0+128)+39)	;volatile
  5305                           
  5306                           ;main.c: 355: I2C_buffer.byte[0x28] = eeprom_read(29);
  5307  0676  301D               	movlw	29
  5308  0677  2685  3185         	fcall	_eeprom_read
  5309  0679  0021               	movlb	1	; select bank1
  5310  067A  00C8               	movwf	(_I2C_buffer^(0+128)+40)	;volatile
  5311                           
  5312                           ;main.c: 356: I2C_buffer.byte[0x29] = eeprom_read(30);
  5313  067B  301E               	movlw	30
  5314  067C  2685  3185         	fcall	_eeprom_read
  5315  067E  0021               	movlb	1	; select bank1
  5316  067F  00C9               	movwf	(_I2C_buffer^(0+128)+41)	;volatile
  5317                           
  5318                           ;main.c: 357: I2C_buffer.byte[0x2A] = eeprom_read(31);
  5319  0680  301F               	movlw	31
  5320  0681  2685               	fcall	_eeprom_read
  5321  0682  0021               	movlb	1	; select bank1
  5322  0683  00CA               	movwf	(_I2C_buffer^(0+128)+42)	;volatile
  5323  0684  0008               	return
  5324  0685                     __end_of_init_I2C_buffer:	
  5325  0685                     __ptext7:	
  5326 ;; *************** function _eeprom_read *****************
  5327 ;; Defined at:
  5328 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eeread.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  addr            1    wreg     unsigned char 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  addr            1    2[BANK0 ] unsigned char 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      unsigned char 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 1F/1
  5339 ;;		On exit  : 1F/3
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5342 ;;      Params:         0       0       0       0
  5343 ;;      Locals:         0       1       0       0
  5344 ;;      Temps:          0       0       0       0
  5345 ;;      Totals:         0       1       0       0
  5346 ;;Total ram usage:        1 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    2
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_init_I2C_buffer
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _eeprom_read
  5358  0685                     _eeprom_read:	
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5362                           ;eeprom_read@addr stored from wreg
  5363  0685  0020               	movlb	0	; select bank0
  5364  0686  00A2               	movwf	eeprom_read@addr
  5365  0687  2E89               	goto	l293
  5366  0688                     u2581:	
  5367  0688  0020               	movlb	0	; select bank0
  5368  0689                     l293:	
  5369                           ;__eeread.c: 8: do
  5370                           
  5371  0689  0064               	clrwdt	;# 
  5372                           
  5373                           ;__eeread.c: 12: while(EECON1bits.WR);
  5374  068A  0023               	movlb	3	; select bank3
  5375  068B  1895               	btfsc	21,1	;volsfr
  5376  068C  2E88               	goto	u2581
  5377                           
  5378                           ;__eeread.c: 18: return ( EEADR = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  5379  068D  0020               	movlb	0	; select bank0
  5380  068E  0822               	movf	eeprom_read@addr,w
  5381  068F  0023               	movlb	3	; select bank3
  5382  0690  0091               	movwf	17	;volatile
  5383  0691  0192               	clrf	18	;volatile
  5384  0692  303F               	movlw	63
  5385  0693  0595               	andwf	21,f	;volsfr
  5386  0694  1415               	bsf	21,0	;volsfr
  5387  0695  0813               	movf	19,w	;volatile
  5388  0696  0008               	return
  5389  0697                     __end_of_eeprom_read:	
  5390                           
  5391                           	psect	text14
  5392  0491                     __ptext14:	
  5393 ;; *************** function ___fladd *****************
  5394 ;; Defined at:
  5395 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  b               4   35[BANK0 ] long 
  5398 ;;  a               4   39[BANK0 ] long 
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;  grs             1   54[BANK0 ] unsigned char 
  5401 ;;  bexp            1   53[BANK0 ] unsigned char 
  5402 ;;  aexp            1   52[BANK0 ] unsigned char 
  5403 ;;  signs           1   51[BANK0 ] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  4   35[BANK0 ] unsigned char 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0
  5408 ;; Tracked objects:
  5409 ;;		On entry : 1F/0
  5410 ;;		On exit  : 1F/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5413 ;;      Params:         0       8       0       0
  5414 ;;      Locals:         0       4       0       0
  5415 ;;      Temps:          0       8       0       0
  5416 ;;      Totals:         0      20       0       0
  5417 ;;Total ram usage:       20 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    2
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_calculate_pidA
  5424 ;;		_calculate_pidM
  5425 ;;		___flsub
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function ___fladd
  5431  0491                     ___fladd:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  5435  0491  0846               	movf	___fladd@b+3,w
  5436  0492  00D3               	movwf	___fladd@signs
  5437  0493  3080               	movlw	128
  5438  0494  05D3               	andwf	___fladd@signs,f
  5439  0495  3546               	lslf	___fladd@b+3,w
  5440  0496  00D5               	movwf	___fladd@bexp
  5441  0497  1BC5               	btfsc	___fladd@b+2,7
  5442  0498  1455               	bsf	___fladd@bexp,0
  5443  0499  0855               	movf	___fladd@bexp,w
  5444  049A  1903               	btfsc	3,2
  5445  049B  2CA4               	goto	l614
  5446  049C  0F55               	incfsz	___fladd@bexp,w
  5447  049D  2CA2               	goto	l615
  5448  049E  01C3               	clrf	___fladd@b
  5449  049F  01C4               	clrf	___fladd@b+1
  5450  04A0  01C5               	clrf	___fladd@b+2
  5451  04A1  01C6               	clrf	___fladd@b+3
  5452  04A2                     l615:	
  5453  04A2  17C5               	bsf	___fladd@b+2,7
  5454  04A3  2CA7               	goto	L6
  5455  04A4                     l614:	
  5456  04A4  01C3               	clrf	___fladd@b
  5457  04A5  01C4               	clrf	___fladd@b+1
  5458  04A6  01C5               	clrf	___fladd@b+2
  5459  04A7                     L6:	
  5460  04A7  01C6               	clrf	___fladd@b+3
  5461  04A8  084A               	movf	___fladd@a+3,w
  5462  04A9  00D4               	movwf	___fladd@aexp
  5463  04AA  3080               	movlw	128
  5464  04AB  05D4               	andwf	___fladd@aexp,f
  5465  04AC  0854               	movf	___fladd@aexp,w
  5466  04AD  0653               	xorwf	___fladd@signs,w
  5467  04AE  1D03               	btfss	3,2
  5468  04AF  1753               	bsf	___fladd@signs,6
  5469  04B0  354A               	lslf	___fladd@a+3,w
  5470  04B1  00D4               	movwf	___fladd@aexp
  5471  04B2  1BC9               	btfsc	___fladd@a+2,7
  5472  04B3  1454               	bsf	___fladd@aexp,0
  5473  04B4  0854               	movf	___fladd@aexp,w
  5474  04B5  1903               	btfsc	3,2
  5475  04B6  2CBF               	goto	l619
  5476  04B7  0F54               	incfsz	___fladd@aexp,w
  5477  04B8  2CBD               	goto	l620
  5478  04B9  01C7               	clrf	___fladd@a
  5479  04BA  01C8               	clrf	___fladd@a+1
  5480  04BB  01C9               	clrf	___fladd@a+2
  5481  04BC  01CA               	clrf	___fladd@a+3
  5482  04BD                     l620:	
  5483  04BD  17C9               	bsf	___fladd@a+2,7
  5484  04BE  2CC2               	goto	L7
  5485  04BF                     l619:	
  5486  04BF  01C7               	clrf	___fladd@a
  5487  04C0  01C8               	clrf	___fladd@a+1
  5488  04C1  01C9               	clrf	___fladd@a+2
  5489  04C2                     L7:	
  5490  04C2  01CA               	clrf	___fladd@a+3
  5491  04C3  0855               	movf	___fladd@bexp,w
  5492  04C4  0254               	subwf	___fladd@aexp,w
  5493  04C5  1803               	skipnc
  5494  04C6  2CE9               	goto	l3110
  5495  04C7  1F53               	btfss	___fladd@signs,6
  5496  04C8  2CCB               	goto	l3080
  5497  04C9  3080               	movlw	128
  5498  04CA  06D3               	xorwf	___fladd@signs,f
  5499  04CB                     l3080:	
  5500  04CB  0855               	movf	___fladd@bexp,w
  5501  04CC  00D6               	movwf	___fladd@grs
  5502  04CD  0854               	movf	___fladd@aexp,w
  5503  04CE  00D5               	movwf	___fladd@bexp
  5504  04CF  0856               	movf	___fladd@grs,w
  5505  04D0  00D4               	movwf	___fladd@aexp
  5506  04D1  0843               	movf	___fladd@b,w
  5507  04D2  00D6               	movwf	___fladd@grs
  5508  04D3  0847               	movf	___fladd@a,w
  5509  04D4  00C3               	movwf	___fladd@b
  5510  04D5  0856               	movf	___fladd@grs,w
  5511  04D6  00C7               	movwf	___fladd@a
  5512  04D7  0844               	movf	___fladd@b+1,w
  5513  04D8  00D6               	movwf	___fladd@grs
  5514  04D9  0848               	movf	___fladd@a+1,w
  5515  04DA  00C4               	movwf	___fladd@b+1
  5516  04DB  0856               	movf	___fladd@grs,w
  5517  04DC  00C8               	movwf	___fladd@a+1
  5518  04DD  0845               	movf	___fladd@b+2,w
  5519  04DE  00D6               	movwf	___fladd@grs
  5520  04DF  0849               	movf	___fladd@a+2,w
  5521  04E0  00C5               	movwf	___fladd@b+2
  5522  04E1  0856               	movf	___fladd@grs,w
  5523  04E2  00C9               	movwf	___fladd@a+2
  5524  04E3  0846               	movf	___fladd@b+3,w
  5525  04E4  00D6               	movwf	___fladd@grs
  5526  04E5  084A               	movf	___fladd@a+3,w
  5527  04E6  00C6               	movwf	___fladd@b+3
  5528  04E7  0856               	movf	___fladd@grs,w
  5529  04E8  00CA               	movwf	___fladd@a+3
  5530  04E9                     l3110:	
  5531  04E9  01D6               	clrf	___fladd@grs
  5532  04EA  0854               	movf	___fladd@aexp,w
  5533  04EB  00CB               	movwf	??___fladd
  5534  04EC  01CC               	clrf	??___fladd+1
  5535  04ED  084C               	movf	??___fladd+1,w
  5536  04EE  00CE               	movwf	??___fladd+3
  5537  04EF  0855               	movf	___fladd@bexp,w
  5538  04F0  024B               	subwf	??___fladd,w
  5539  04F1  00CD               	movwf	??___fladd+2
  5540  04F2  1C03               	skipc
  5541  04F3  03CE               	decf	??___fladd+3,f
  5542  04F4  084E               	movf	??___fladd+3,w
  5543  04F5  3A80               	xorlw	128
  5544  04F6  00CF               	movwf	??___fladd+4
  5545  04F7  3080               	movlw	128
  5546  04F8  024F               	subwf	??___fladd+4,w
  5547  04F9  1D03               	skipz
  5548  04FA  2CFD               	goto	u3335
  5549  04FB  301A               	movlw	26
  5550  04FC  024D               	subwf	??___fladd+2,w
  5551  04FD                     u3335:	
  5552  04FD  1C03               	skipc
  5553  04FE  2D1F               	goto	l3124
  5554  04FF  0020               	movlb	0	; select bank0
  5555  0500  0846               	movf	___fladd@b+3,w
  5556  0501  0445               	iorwf	___fladd@b+2,w
  5557  0502  0444               	iorwf	___fladd@b+1,w
  5558  0503  0443               	iorwf	___fladd@b,w
  5559  0504  1903               	btfsc	3,2
  5560  0505  2D08               	goto	u3340
  5561  0506  3001               	movlw	1
  5562  0507  2D09               	goto	u3350
  5563  0508                     u3340:	
  5564  0508  3000               	movlw	0
  5565  0509                     u3350:	
  5566  0509  00D6               	movwf	___fladd@grs
  5567  050A  01C3               	clrf	___fladd@b
  5568  050B  01C4               	clrf	___fladd@b+1
  5569  050C  01C5               	clrf	___fladd@b+2
  5570  050D  01C6               	clrf	___fladd@b+3
  5571  050E  0854               	movf	___fladd@aexp,w
  5572  050F  00D5               	movwf	___fladd@bexp
  5573  0510  2D24               	goto	l625
  5574  0511                     l627:	
  5575  0511  1C56               	btfss	___fladd@grs,0
  5576  0512  2D17               	goto	l628
  5577  0513  3656               	lsrf	___fladd@grs,w
  5578  0514  3801               	iorlw	1
  5579  0515  00D6               	movwf	___fladd@grs
  5580  0516  2D18               	goto	l629
  5581  0517                     l628:	
  5582  0517  36D6               	lsrf	___fladd@grs,f
  5583  0518                     l629:	
  5584  0518  1843               	btfsc	___fladd@b,0
  5585  0519  17D6               	bsf	___fladd@grs,7
  5586  051A  37C6               	asrf	___fladd@b+3,f
  5587  051B  0CC5               	rrf	___fladd@b+2,f
  5588  051C  0CC4               	rrf	___fladd@b+1,f
  5589  051D  0CC3               	rrf	___fladd@b,f
  5590  051E  0AD5               	incf	___fladd@bexp,f
  5591  051F                     l3124:	
  5592  051F  0020               	movlb	0	; select bank0
  5593  0520  0854               	movf	___fladd@aexp,w
  5594  0521  0255               	subwf	___fladd@bexp,w
  5595  0522  1C03               	skipc
  5596  0523  2D11               	goto	l627
  5597  0524                     l625:	
  5598  0524  1B53               	btfsc	___fladd@signs,6
  5599  0525  2D47               	goto	l3142
  5600  0526  0855               	movf	___fladd@bexp,w
  5601  0527  1D03               	btfss	3,2
  5602  0528  2D2E               	goto	l3130
  5603  0529  01C3               	clrf	?___fladd
  5604  052A  01C4               	clrf	?___fladd+1
  5605  052B  01C5               	clrf	?___fladd+2
  5606  052C  01C6               	clrf	?___fladd+3
  5607  052D  0008               	return
  5608  052E                     l3130:	
  5609  052E  0847               	movf	___fladd@a,w
  5610  052F  07C3               	addwf	___fladd@b,f
  5611  0530  0848               	movf	___fladd@a+1,w
  5612  0531  3DC4               	addwfc	___fladd@b+1,f
  5613  0532  0849               	movf	___fladd@a+2,w
  5614  0533  3DC5               	addwfc	___fladd@b+2,f
  5615  0534  084A               	movf	___fladd@a+3,w
  5616  0535  3DC6               	addwfc	___fladd@b+3,f
  5617  0536  1C46               	btfss	___fladd@b+3,0
  5618  0537  2DAF               	goto	l3172
  5619  0538  1C56               	btfss	___fladd@grs,0
  5620  0539  2D3E               	goto	l636
  5621  053A  3656               	lsrf	___fladd@grs,w
  5622  053B  3801               	iorlw	1
  5623  053C  00D6               	movwf	___fladd@grs
  5624  053D  2D3F               	goto	l637
  5625  053E                     l636:	
  5626  053E  36D6               	lsrf	___fladd@grs,f
  5627  053F                     l637:	
  5628  053F  1843               	btfsc	___fladd@b,0
  5629  0540  17D6               	bsf	___fladd@grs,7
  5630  0541  37C6               	asrf	___fladd@b+3,f
  5631  0542  0CC5               	rrf	___fladd@b+2,f
  5632  0543  0CC4               	rrf	___fladd@b+1,f
  5633  0544  0CC3               	rrf	___fladd@b,f
  5634  0545  0AD5               	incf	___fladd@bexp,f
  5635  0546  2DAF               	goto	l3172
  5636  0547                     l3142:	
  5637  0547  0846               	movf	___fladd@b+3,w
  5638  0548  3A80               	xorlw	128
  5639  0549  00CB               	movwf	??___fladd
  5640  054A  084A               	movf	___fladd@a+3,w
  5641  054B  3A80               	xorlw	128
  5642  054C  024B               	subwf	??___fladd,w
  5643  054D  1D03               	skipz
  5644  054E  2D59               	goto	u3443
  5645  054F  0849               	movf	___fladd@a+2,w
  5646  0550  0245               	subwf	___fladd@b+2,w
  5647  0551  1D03               	skipz
  5648  0552  2D59               	goto	u3443
  5649  0553  0848               	movf	___fladd@a+1,w
  5650  0554  0244               	subwf	___fladd@b+1,w
  5651  0555  1D03               	skipz
  5652  0556  2D59               	goto	u3443
  5653  0557  0847               	movf	___fladd@a,w
  5654  0558  0243               	subwf	___fladd@b,w
  5655  0559                     u3443:	
  5656  0559  1803               	skipnc
  5657  055A  2D88               	goto	l3152
  5658  055B  30FF               	movlw	255
  5659  055C  00CB               	movwf	??___fladd
  5660  055D  00CC               	movwf	??___fladd+1
  5661  055E  00CD               	movwf	??___fladd+2
  5662  055F  00CE               	movwf	??___fladd+3
  5663  0560  0843               	movf	___fladd@b,w
  5664  0561  0247               	subwf	___fladd@a,w
  5665  0562  00CF               	movwf	??___fladd+4
  5666  0563  0844               	movf	___fladd@b+1,w
  5667  0564  3B48               	subwfb	___fladd@a+1,w
  5668  0565  00D0               	movwf	??___fladd+5
  5669  0566  0845               	movf	___fladd@b+2,w
  5670  0567  3B49               	subwfb	___fladd@a+2,w
  5671  0568  00D1               	movwf	??___fladd+6
  5672  0569  0846               	movf	___fladd@b+3,w
  5673  056A  3B4A               	subwfb	___fladd@a+3,w
  5674  056B  00D2               	movwf	??___fladd+7
  5675  056C  084F               	movf	??___fladd+4,w
  5676  056D  07CB               	addwf	??___fladd,f
  5677  056E  0850               	movf	??___fladd+5,w
  5678  056F  3DCC               	addwfc	??___fladd+1,f
  5679  0570  0851               	movf	??___fladd+6,w
  5680  0571  3DCD               	addwfc	??___fladd+2,f
  5681  0572  0852               	movf	??___fladd+7,w
  5682  0573  3DCE               	addwfc	??___fladd+3,f
  5683  0574  084E               	movf	??___fladd+3,w
  5684  0575  00C6               	movwf	___fladd@b+3
  5685  0576  084D               	movf	??___fladd+2,w
  5686  0577  00C5               	movwf	___fladd@b+2
  5687  0578  084C               	movf	??___fladd+1,w
  5688  0579  00C4               	movwf	___fladd@b+1
  5689  057A  084B               	movf	??___fladd,w
  5690  057B  00C3               	movwf	___fladd@b
  5691  057C  3080               	movlw	128
  5692  057D  06D3               	xorwf	___fladd@signs,f
  5693  057E  09D6               	comf	___fladd@grs,f
  5694  057F  0FD6               	incfsz	___fladd@grs,f
  5695  0580  2D90               	goto	l642
  5696  0581  3001               	movlw	1
  5697  0582  07C3               	addwf	___fladd@b,f
  5698  0583  3000               	movlw	0
  5699  0584  3DC4               	addwfc	___fladd@b+1,f
  5700  0585  3DC5               	addwfc	___fladd@b+2,f
  5701  0586  3DC6               	addwfc	___fladd@b+3,f
  5702  0587  2D90               	goto	l642
  5703  0588                     l3152:	
  5704  0588  0847               	movf	___fladd@a,w
  5705  0589  02C3               	subwf	___fladd@b,f
  5706  058A  0848               	movf	___fladd@a+1,w
  5707  058B  3BC4               	subwfb	___fladd@b+1,f
  5708  058C  0849               	movf	___fladd@a+2,w
  5709  058D  3BC5               	subwfb	___fladd@b+2,f
  5710  058E  084A               	movf	___fladd@a+3,w
  5711  058F  3BC6               	subwfb	___fladd@b+3,f
  5712  0590                     l642:	
  5713  0590  0846               	movf	___fladd@b+3,w
  5714  0591  0445               	iorwf	___fladd@b+2,w
  5715  0592  0444               	iorwf	___fladd@b+1,w
  5716  0593  0443               	iorwf	___fladd@b,w
  5717  0594  1D03               	skipz
  5718  0595  2DAD               	goto	l3170
  5719  0596  0856               	movf	___fladd@grs,w
  5720  0597  1D03               	btfss	3,2
  5721  0598  2DAD               	goto	l3170
  5722  0599  01C3               	clrf	?___fladd
  5723  059A  01C4               	clrf	?___fladd+1
  5724  059B  01C5               	clrf	?___fladd+2
  5725  059C  01C6               	clrf	?___fladd+3
  5726  059D  0008               	return
  5727  059E                     l3158:	
  5728  059E  35C3               	lslf	___fladd@b,f
  5729  059F  0DC4               	rlf	___fladd@b+1,f
  5730  05A0  0DC5               	rlf	___fladd@b+2,f
  5731  05A1  0DC6               	rlf	___fladd@b+3,f
  5732  05A2  1BD6               	btfsc	___fladd@grs,7
  5733  05A3  1443               	bsf	___fladd@b,0
  5734  05A4  1C56               	btfss	___fladd@grs,0
  5735  05A5  2DA9               	goto	l647
  5736  05A6  1403               	setc
  5737  05A7  0DD6               	rlf	___fladd@grs,f
  5738  05A8  2DAA               	goto	l3166
  5739  05A9                     l647:	
  5740  05A9  35D6               	lslf	___fladd@grs,f
  5741  05AA                     l3166:	
  5742  05AA  0855               	movf	___fladd@bexp,w
  5743  05AB  1D03               	btfss	3,2
  5744  05AC  03D5               	decf	___fladd@bexp,f
  5745  05AD                     l3170:	
  5746  05AD  1FC5               	btfss	___fladd@b+2,7
  5747  05AE  2D9E               	goto	l3158
  5748  05AF                     l3172:	
  5749  05AF  01D4               	clrf	___fladd@aexp
  5750  05B0  1FD6               	btfss	___fladd@grs,7
  5751  05B1  2DBA               	goto	l3182
  5752  05B2  0856               	movf	___fladd@grs,w
  5753  05B3  397F               	andlw	127
  5754  05B4  1903               	btfsc	3,2
  5755  05B5  1843               	btfsc	___fladd@b,0
  5756  05B6  2DB8               	goto	l3178
  5757  05B7  2DBA               	goto	l3182
  5758  05B8                     l3178:	
  5759  05B8  01D4               	clrf	___fladd@aexp
  5760  05B9  0AD4               	incf	___fladd@aexp,f
  5761  05BA                     l3182:	
  5762  05BA  0854               	movf	___fladd@aexp,w
  5763  05BB  1903               	btfsc	3,2
  5764  05BC  2DCB               	goto	l3194
  5765  05BD  3001               	movlw	1
  5766  05BE  07C3               	addwf	___fladd@b,f
  5767  05BF  3000               	movlw	0
  5768  05C0  3DC4               	addwfc	___fladd@b+1,f
  5769  05C1  3DC5               	addwfc	___fladd@b+2,f
  5770  05C2  3DC6               	addwfc	___fladd@b+3,f
  5771  05C3  1C46               	btfss	___fladd@b+3,0
  5772  05C4  2DCB               	goto	l3194
  5773  05C5  37C6               	asrf	___fladd@b+3,f
  5774  05C6  0CC5               	rrf	___fladd@b+2,f
  5775  05C7  0CC4               	rrf	___fladd@b+1,f
  5776  05C8  0CC3               	rrf	___fladd@b,f
  5777  05C9  0F55               	incfsz	___fladd@bexp,w
  5778  05CA  0AD5               	incf	___fladd@bexp,f
  5779  05CB                     l3194:	
  5780  05CB  0A55               	incf	___fladd@bexp,w
  5781  05CC  1D03               	btfss	3,2
  5782  05CD  0855               	movf	___fladd@bexp,w
  5783  05CE  1D03               	btfss	3,2
  5784  05CF  2DD7               	goto	l3202
  5785  05D0  01C3               	clrf	___fladd@b
  5786  05D1  01C4               	clrf	___fladd@b+1
  5787  05D2  01C5               	clrf	___fladd@b+2
  5788  05D3  01C6               	clrf	___fladd@b+3
  5789  05D4  0855               	movf	___fladd@bexp,w
  5790  05D5  1903               	btfsc	3,2
  5791  05D6  01D3               	clrf	___fladd@signs
  5792  05D7                     l3202:	
  5793  05D7  1C55               	btfss	___fladd@bexp,0
  5794  05D8  2DDB               	goto	l662
  5795  05D9  17C5               	bsf	___fladd@b+2,7
  5796  05DA  2DDC               	goto	l3206
  5797  05DB                     l662:	
  5798  05DB  13C5               	bcf	___fladd@b+2,7
  5799  05DC                     l3206:	
  5800  05DC  3655               	lsrf	___fladd@bexp,w
  5801  05DD  00C6               	movwf	___fladd@b+3
  5802  05DE  1BD3               	btfsc	___fladd@signs,7
  5803  05DF  17C6               	bsf	___fladd@b+3,7
  5804  05E0  0008               	return
  5805  05E1                     __end_of___fladd:	
  5806                           
  5807                           	psect	intentry
  5808  0004                     __pintentry:	
  5809 ;; *************** function _isr *****************
  5810 ;; Defined at:
  5811 ;;		line 93 in file "main.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 1F/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5825 ;;      Params:         0       0       0       0
  5826 ;;      Locals:         0       0       0       0
  5827 ;;      Temps:          0       2       0       0
  5828 ;;      Totals:         0       2       0       0
  5829 ;;Total ram usage:        2 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    1
  5832 ;; This function calls:
  5833 ;;		___lwdiv
  5834 ;;		i1___wmul
  5835 ;; This function is called by:
  5836 ;;		Interrupt level 1
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840  0004                     _isr:	
  5841                           
  5842                           ;incstack = 0
  5843  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5844                           
  5845                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5846  0005  3180               	pagesel	$
  5847                           
  5848                           ;main.c: 95: if (INTCONbits.IOCIF == 1 && IOCAFbits.IOCAF4 == 1)
  5849  0006  1C0B               	btfss	11,0	;volatile
  5850  0007  2821               	goto	i1l3628
  5851  0008  0027               	movlb	7	; select bank7
  5852  0009  1E13               	btfss	19,4	;volatile
  5853  000A  2821               	goto	i1l3628
  5854                           
  5855                           ;main.c: 96: {;main.c: 97: INTCONbits.IOCIE = 0;
  5856  000B  118B               	bcf	11,3	;volatile
  5857                           
  5858                           ;main.c: 98: counter++;
  5859  000C  0021               	movlb	1	; select bank1
  5860  000D  0ACF               	incf	_counter^(0+128),f
  5861  000E  1903               	skipnz
  5862  000F  0AD0               	incf	(_counter+1)^(0+128),f
  5863                           
  5864                           ;main.c: 99: if (LATAbits.LATA0 == 0) {
  5865  0010  0022               	movlb	2	; select bank2
  5866  0011  180C               	btfsc	12,0	;volatile
  5867  0012  2817               	goto	i1l3622
  5868                           
  5869                           ;main.c: 100: I2C_buffer.data.DISTANCE--;
  5870  0013  30FF               	movlw	255
  5871  0014  0021               	movlb	1	; select bank1
  5872  0015  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5873  0016  281B               	goto	L10
  5874  0017                     i1l3622:	
  5875                           ;main.c: 101: } else {
  5876                           
  5877                           
  5878                           ;main.c: 102: I2C_buffer.data.DISTANCE++;
  5879  0017  3001               	movlw	1
  5880  0018  0021               	movlb	1	; select bank1
  5881  0019  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5882  001A  3000               	movlw	0
  5883  001B                     L10:	
  5884  001B  3DB0               	addwfc	((_I2C_buffer+1)^(0+128)+15),f	;volatile
  5885  001C  3DB1               	addwfc	((_I2C_buffer+2)^(0+128)+15),f	;volatile
  5886  001D  3DB2               	addwfc	((_I2C_buffer+3)^(0+128)+15),f	;volatile
  5887                           
  5888                           ;main.c: 103: };main.c: 104: IOCAFbits.IOCAF4 = 0;
  5889  001E  0027               	movlb	7	; select bank7
  5890  001F  1213               	bcf	19,4	;volatile
  5891                           
  5892                           ;main.c: 105: INTCONbits.IOCIE = 1;
  5893  0020  158B               	bsf	11,3	;volatile
  5894  0021                     i1l3628:	
  5895                           
  5896                           ;main.c: 106: };main.c: 108: if (PIR1bits.TMR1IF == 1)
  5897  0021  0020               	movlb	0	; select bank0
  5898  0022  1C11               	btfss	17,0	;volatile
  5899  0023  285C               	goto	i1l3646
  5900                           
  5901                           ;main.c: 109: {;main.c: 110: INTCONbits.IOCIE = 0;
  5902  0024  118B               	bcf	11,3	;volatile
  5903                           
  5904                           ;main.c: 111: T1CONbits.TMR1ON = 0;
  5905  0025  1018               	bcf	24,0	;volatile
  5906                           
  5907                           ;main.c: 112: I2C_buffer.data.RPM = (counter * 300) / I2C_buffer.data.GEAR_RATIO;
  5908  0026  0021               	movlb	1	; select bank1
  5909  0027  0828               	movf	((_I2C_buffer+1)^(0+128)+7),w	;volatile
  5910  0028  00F7               	movwf	___lwdiv@divisor+1
  5911  0029  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  5912  002A  00F6               	movwf	___lwdiv@divisor
  5913  002B  0850               	movf	(_counter+1)^(0+128),w
  5914  002C  00F1               	movwf	i1___wmul@multiplier+1
  5915  002D  084F               	movf	_counter^(0+128),w
  5916  002E  00F0               	movwf	i1___wmul@multiplier
  5917  002F  302C               	movlw	44
  5918  0030  00F2               	movwf	i1___wmul@multiplicand
  5919  0031  3001               	movlw	1
  5920  0032  00F3               	movwf	i1___wmul@multiplicand+1
  5921  0033  3186  26BC  3180   	fcall	i1___wmul
  5922  0036  0871               	movf	?i1___wmul+1,w
  5923  0037  00F9               	movwf	___lwdiv@dividend+1
  5924  0038  0870               	movf	?i1___wmul,w
  5925  0039  00F8               	movwf	___lwdiv@dividend
  5926  003A  3186  2697  3180   	fcall	___lwdiv
  5927  003D  0877               	movf	?___lwdiv+1,w
  5928  003E  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5929  003F  0876               	movf	?___lwdiv,w
  5930  0040  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5931                           
  5932                           ;main.c: 113: counter = 0;
  5933  0041  01CF               	clrf	_counter^(0+128)
  5934  0042  01D0               	clrf	(_counter+1)^(0+128)
  5935                           
  5936                           ;main.c: 114: if (LATAbits.LATA0 == 0) {
  5937  0043  0022               	movlb	2	; select bank2
  5938  0044  180C               	btfsc	12,0	;volatile
  5939  0045  2858               	goto	i1l3640
  5940                           
  5941                           ;main.c: 115: I2C_buffer.data.RPM = I2C_buffer.data.RPM *-1;
  5942  0046  0021               	movlb	1	; select bank1
  5943  0047  092B               	comf	(_I2C_buffer^(0+128)+11),w	;volatile
  5944  0048  0020               	movlb	0	; select bank0
  5945  0049  00A0               	movwf	??_isr
  5946  004A  0021               	movlb	1	; select bank1
  5947  004B  092C               	comf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  5948  004C  0020               	movlb	0	; select bank0
  5949  004D  00A1               	movwf	??_isr+1
  5950  004E  0AA0               	incf	??_isr,f
  5951  004F  1903               	skipnz
  5952  0050  0AA1               	incf	??_isr+1,f
  5953  0051  0820               	movf	??_isr,w
  5954  0052  0021               	movlb	1	; select bank1
  5955  0053  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5956  0054  0020               	movlb	0	; select bank0
  5957  0055  0821               	movf	??_isr+1,w
  5958  0056  0021               	movlb	1	; select bank1
  5959  0057  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5960  0058                     i1l3640:	
  5961                           
  5962                           ;main.c: 116: };main.c: 117: INTCONbits.IOCIE = 1;
  5963  0058  158B               	bsf	11,3	;volatile
  5964                           
  5965                           ;main.c: 118: PIR1bits.TMR1IF = 0;
  5966  0059  0020               	movlb	0	; select bank0
  5967  005A  1011               	bcf	17,0	;volatile
  5968                           
  5969                           ;main.c: 119: T1CONbits.TMR1ON = 1;
  5970  005B  1418               	bsf	24,0	;volatile
  5971  005C                     i1l3646:	
  5972                           
  5973                           ;main.c: 120: };main.c: 122: static unsigned char junk = 0;;main.c: 124: if (PIR1bits.SS
      +                          P1IF)
  5974  005C  1D91               	btfss	17,3	;volatile
  5975  005D  28B1               	goto	i1l3706
  5976                           
  5977                           ;main.c: 125: {;main.c: 126: INTCONbits.IOCIE = 0;
  5978  005E  118B               	bcf	11,3	;volatile
  5979                           
  5980                           ;main.c: 127: PIE1bits.TMR1IE = 0;
  5981  005F  0021               	movlb	1	; select bank1
  5982  0060  1011               	bcf	17,0	;volatile
  5983                           
  5984                           ;main.c: 128: if (SSP1STATbits.R_nW)
  5985  0061  0024               	movlb	4	; select bank4
  5986  0062  1D14               	btfss	20,2	;volatile
  5987  0063  2880               	goto	i1l3666
  5988                           
  5989                           ;main.c: 129: {;main.c: 130: if (!SSP1STATbits.D_nA)
  5990  0064  1A94               	btfsc	20,5	;volatile
  5991  0065  2872               	goto	i1l3658
  5992                           
  5993                           ;main.c: 131: {;main.c: 132: SSP1BUF = I2C_buffer.byte[index_i2c++];
  5994  0066  0021               	movlb	1	; select bank1
  5995  0067  0851               	movf	_index_i2c^(0+128),w
  5996  0068  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5997  0069  0086               	movwf	6
  5998  006A  0187               	clrf	7
  5999  006B  0801               	movf	1,w
  6000  006C  0024               	movlb	4	; select bank4
  6001  006D  0091               	movwf	17	;volatile
  6002  006E  0021               	movlb	1	; select bank1
  6003  006F  0AD1               	incf	_index_i2c^(0+128),f
  6004                           
  6005                           ;main.c: 133: SSP1CON1bits.CKP = 1;
  6006  0070  0024               	movlb	4	; select bank4
  6007  0071  1615               	bsf	21,4	;volatile
  6008  0072                     i1l3658:	
  6009                           
  6010                           ;main.c: 134: };main.c: 135: if (SSP1STATbits.D_nA)
  6011  0072  1E94               	btfss	20,5	;volatile
  6012  0073  2880               	goto	i1l3666
  6013                           
  6014                           ;main.c: 136: {;main.c: 137: SSP1BUF = I2C_buffer.byte[index_i2c++];
  6015  0074  0021               	movlb	1	; select bank1
  6016  0075  0851               	movf	_index_i2c^(0+128),w
  6017  0076  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  6018  0077  0086               	movwf	6
  6019  0078  0187               	clrf	7
  6020  0079  0801               	movf	1,w
  6021  007A  0024               	movlb	4	; select bank4
  6022  007B  0091               	movwf	17	;volatile
  6023  007C  0021               	movlb	1	; select bank1
  6024  007D  0AD1               	incf	_index_i2c^(0+128),f
  6025                           
  6026                           ;main.c: 138: SSP1CON1bits.CKP = 1;
  6027  007E  0024               	movlb	4	; select bank4
  6028  007F  1615               	bsf	21,4	;volatile
  6029  0080                     i1l3666:	
  6030                           
  6031                           ;main.c: 139: };main.c: 140: };main.c: 141: if (!SSP1STATbits.R_nW)
  6032  0080  1914               	btfsc	20,2	;volatile
  6033  0081  28AC               	goto	i1l3700
  6034                           
  6035                           ;main.c: 142: {;main.c: 143: if (!SSP1STATbits.D_nA)
  6036  0082  1A94               	btfsc	20,5	;volatile
  6037  0083  288A               	goto	i1l3676
  6038                           
  6039                           ;main.c: 144: {;main.c: 145: first_i2c = 1;
  6040  0084  0021               	movlb	1	; select bank1
  6041  0085  01EF               	clrf	_first_i2c^(0+128)
  6042  0086  0AEF               	incf	_first_i2c^(0+128),f
  6043                           
  6044                           ;main.c: 146: junk = SSP1BUF;
  6045  0087  0024               	movlb	4	; select bank4
  6046  0088  0811               	movf	17,w	;volatile
  6047                           
  6048                           ;main.c: 147: SSP1CON1bits.CKP = 1;
  6049  0089  1615               	bsf	21,4	;volatile
  6050  008A                     i1l3676:	
  6051                           
  6052                           ;main.c: 148: };main.c: 149: if (SSP1STATbits.D_nA)
  6053  008A  1E94               	btfss	20,5	;volatile
  6054  008B  28AC               	goto	i1l3700
  6055                           
  6056                           ;main.c: 150: {;main.c: 151: if (first_i2c) {
  6057  008C  0021               	movlb	1	; select bank1
  6058  008D  086F               	movf	_first_i2c^(0+128),w
  6059  008E  1903               	btfsc	3,2
  6060  008F  2896               	goto	i1l3684
  6061                           
  6062                           ;main.c: 152: index_i2c = SSP1BUF;
  6063  0090  0024               	movlb	4	; select bank4
  6064  0091  0811               	movf	17,w	;volatile
  6065  0092  0021               	movlb	1	; select bank1
  6066  0093  00D1               	movwf	_index_i2c^(0+128)
  6067                           
  6068                           ;main.c: 153: first_i2c = 0;
  6069  0094  01EF               	clrf	_first_i2c^(0+128)
  6070                           
  6071                           ;main.c: 154: }
  6072  0095  28A6               	goto	i1l3692
  6073  0096                     i1l3684:	
  6074                           
  6075                           ;main.c: 156: else {;main.c: 157: if (index_i2c < RX_ELMNTS)
  6076  0096  302B               	movlw	43
  6077  0097  0251               	subwf	_index_i2c^(0+128),w
  6078  0098  1803               	skipnc
  6079  0099  28A4               	goto	i1l3690
  6080                           
  6081                           ;main.c: 158: {;main.c: 159: I2C_buffer.byte[index_i2c++] = SSP1BUF;
  6082  009A  0851               	movf	_index_i2c^(0+128),w
  6083  009B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  6084  009C  0086               	movwf	6
  6085  009D  0187               	clrf	7
  6086  009E  0024               	movlb	4	; select bank4
  6087  009F  0811               	movf	17,w	;volatile
  6088  00A0  0081               	movwf	1
  6089  00A1  0021               	movlb	1	; select bank1
  6090  00A2  0AD1               	incf	_index_i2c^(0+128),f
  6091                           
  6092                           ;main.c: 160: } else {
  6093  00A3  28A6               	goto	i1l3692
  6094  00A4                     i1l3690:	
  6095                           
  6096                           ;main.c: 161: junk = SSP1BUF;
  6097  00A4  0024               	movlb	4	; select bank4
  6098  00A5  0811               	movf	17,w	;volatile
  6099  00A6                     i1l3692:	
  6100                           
  6101                           ;main.c: 162: };main.c: 163: };main.c: 164: if (SSP1CON1bits.WCOL)
  6102  00A6  0024               	movlb	4	; select bank4
  6103  00A7  1F95               	btfss	21,7	;volatile
  6104  00A8  28AB               	goto	i1l3698
  6105                           
  6106                           ;main.c: 165: {;main.c: 166: SSP1CON1bits.WCOL = 0;
  6107  00A9  1395               	bcf	21,7	;volatile
  6108                           
  6109                           ;main.c: 167: junk = SSP1BUF;
  6110  00AA  0811               	movf	17,w	;volatile
  6111  00AB                     i1l3698:	
  6112                           
  6113                           ;main.c: 168: };main.c: 169: SSP1CON1bits.CKP = 1;
  6114  00AB  1615               	bsf	21,4	;volatile
  6115  00AC                     i1l3700:	
  6116                           
  6117                           ;main.c: 170: };main.c: 171: };main.c: 172: PIR1bits.SSP1IF = 0;
  6118  00AC  0020               	movlb	0	; select bank0
  6119  00AD  1191               	bcf	17,3	;volatile
  6120                           
  6121                           ;main.c: 173: INTCONbits.IOCIE = 1;
  6122  00AE  158B               	bsf	11,3	;volatile
  6123                           
  6124                           ;main.c: 174: PIE1bits.TMR1IE = 1;
  6125  00AF  0021               	movlb	1	; select bank1
  6126  00B0  1411               	bsf	17,0	;volatile
  6127  00B1                     i1l3706:	
  6128                           
  6129                           ;main.c: 175: };main.c: 177: if (PIR2bits.BCL1IF)
  6130  00B1  0020               	movlb	0	; select bank0
  6131  00B2  1D92               	btfss	18,3	;volatile
  6132  00B3  28BC               	goto	i1l121
  6133                           
  6134                           ;main.c: 178: {;main.c: 179: junk = SSP1BUF;
  6135  00B4  0024               	movlb	4	; select bank4
  6136  00B5  0811               	movf	17,w	;volatile
  6137                           
  6138                           ;main.c: 180: PIR2bits.BCL1IF = 0;
  6139  00B6  0020               	movlb	0	; select bank0
  6140  00B7  1192               	bcf	18,3	;volatile
  6141                           
  6142                           ;main.c: 181: SSP1CON1bits.CKP = 1;
  6143  00B8  0024               	movlb	4	; select bank4
  6144  00B9  1615               	bsf	21,4	;volatile
  6145                           
  6146                           ;main.c: 182: PIR1bits.SSP1IF = 0;
  6147  00BA  0020               	movlb	0	; select bank0
  6148  00BB  1191               	bcf	17,3	;volatile
  6149  00BC                     i1l121:	
  6150  00BC  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6151  00BD  0009               	retfie
  6152  00BE                     __end_of_isr:	
  6153                           
  6154                           	psect	text20
  6155  06BC                     __ptext20:	
  6156 ;; *************** function i1___wmul *****************
  6157 ;; Defined at:
  6158 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  multiplier      2    0[COMMON] unsigned int 
  6161 ;;  multiplicand    2    2[COMMON] unsigned int 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  __wmul          2    4[COMMON] unsigned int 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  2    0[COMMON] unsigned int 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0
  6168 ;; Tracked objects:
  6169 ;;		On entry : 1F/1
  6170 ;;		On exit  : 1F/1
  6171 ;;		Unchanged: 1F/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6173 ;;      Params:         4       0       0       0
  6174 ;;      Locals:         2       0       0       0
  6175 ;;      Temps:          0       0       0       0
  6176 ;;      Totals:         6       0       0       0
  6177 ;;Total ram usage:        6 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_isr
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function i1___wmul
  6188  06BC                     i1___wmul:	
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6192  06BC  01F4               	clrf	i1___wmul@product
  6193  06BD  01F5               	clrf	i1___wmul@product+1
  6194  06BE                     i1l3596:	
  6195  06BE  1C70               	btfss	i1___wmul@multiplier,0
  6196  06BF  2EC4               	goto	i1l3600
  6197  06C0  0872               	movf	i1___wmul@multiplicand,w
  6198  06C1  07F4               	addwf	i1___wmul@product,f
  6199  06C2  0873               	movf	i1___wmul@multiplicand+1,w
  6200  06C3  3DF5               	addwfc	i1___wmul@product+1,f
  6201  06C4                     i1l3600:	
  6202  06C4  35F2               	lslf	i1___wmul@multiplicand,f
  6203  06C5  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6204  06C6  36F1               	lsrf	i1___wmul@multiplier+1,f
  6205  06C7  0CF0               	rrf	i1___wmul@multiplier,f
  6206  06C8  0870               	movf	i1___wmul@multiplier,w
  6207  06C9  0471               	iorwf	i1___wmul@multiplier+1,w
  6208  06CA  1D03               	btfss	3,2
  6209  06CB  2EBE               	goto	i1l3596
  6210  06CC  0875               	movf	i1___wmul@product+1,w
  6211  06CD  00F1               	movwf	?i1___wmul+1
  6212  06CE  0874               	movf	i1___wmul@product,w
  6213  06CF  00F0               	movwf	?i1___wmul
  6214  06D0  0008               	return
  6215  06D1                     __end_ofi1___wmul:	
  6216                           
  6217                           	psect	text21
  6218  0697                     __ptext21:	
  6219 ;; *************** function ___lwdiv *****************
  6220 ;; Defined at:
  6221 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  divisor         2    6[COMMON] unsigned int 
  6224 ;;  dividend        2    8[COMMON] unsigned int 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  quotient        2   11[COMMON] unsigned int 
  6227 ;;  counter         1   10[COMMON] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  2    6[COMMON] unsigned int 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0
  6232 ;; Tracked objects:
  6233 ;;		On entry : 1F/1
  6234 ;;		On exit  : 1F/1
  6235 ;;		Unchanged: 1F/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6237 ;;      Params:         4       0       0       0
  6238 ;;      Locals:         3       0       0       0
  6239 ;;      Temps:          0       0       0       0
  6240 ;;      Totals:         7       0       0       0
  6241 ;;Total ram usage:        7 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; This function calls:
  6244 ;;		Nothing
  6245 ;; This function is called by:
  6246 ;;		_isr
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function ___lwdiv
  6252  0697                     ___lwdiv:	
  6253                           
  6254                           ;incstack = 0
  6255                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6256  0697  01FB               	clrf	___lwdiv@quotient
  6257  0698  01FC               	clrf	___lwdiv@quotient+1
  6258  0699  0876               	movf	___lwdiv@divisor,w
  6259  069A  0477               	iorwf	___lwdiv@divisor+1,w
  6260  069B  1903               	btfsc	3,2
  6261  069C  2EB7               	goto	i1l3590
  6262  069D  01FA               	clrf	___lwdiv@counter
  6263  069E                     L11:	
  6264  069E  0AFA               	incf	___lwdiv@counter,f
  6265  069F  1BF7               	btfsc	___lwdiv@divisor+1,7
  6266  06A0  2EA4               	goto	i1l3578
  6267  06A1  35F6               	lslf	___lwdiv@divisor,f
  6268  06A2  0DF7               	rlf	___lwdiv@divisor+1,f
  6269  06A3  2E9E               	goto	L11
  6270  06A4                     i1l3578:	
  6271  06A4  35FB               	lslf	___lwdiv@quotient,f
  6272  06A5  0DFC               	rlf	___lwdiv@quotient+1,f
  6273  06A6  0877               	movf	___lwdiv@divisor+1,w
  6274  06A7  0279               	subwf	___lwdiv@dividend+1,w
  6275  06A8  1D03               	skipz
  6276  06A9  2EAC               	goto	u428_25
  6277  06AA  0876               	movf	___lwdiv@divisor,w
  6278  06AB  0278               	subwf	___lwdiv@dividend,w
  6279  06AC                     u428_25:	
  6280  06AC  1C03               	skipc
  6281  06AD  2EB3               	goto	i1l3586
  6282  06AE  0876               	movf	___lwdiv@divisor,w
  6283  06AF  02F8               	subwf	___lwdiv@dividend,f
  6284  06B0  0877               	movf	___lwdiv@divisor+1,w
  6285  06B1  3BF9               	subwfb	___lwdiv@dividend+1,f
  6286  06B2  147B               	bsf	___lwdiv@quotient,0
  6287  06B3                     i1l3586:	
  6288  06B3  36F7               	lsrf	___lwdiv@divisor+1,f
  6289  06B4  0CF6               	rrf	___lwdiv@divisor,f
  6290  06B5  0BFA               	decfsz	___lwdiv@counter,f
  6291  06B6  2EA4               	goto	i1l3578
  6292  06B7                     i1l3590:	
  6293  06B7  087C               	movf	___lwdiv@quotient+1,w
  6294  06B8  00F7               	movwf	?___lwdiv+1
  6295  06B9  087B               	movf	___lwdiv@quotient,w
  6296  06BA  00F6               	movwf	?___lwdiv
  6297  06BB  0008               	return
  6298  06BC                     __end_of___lwdiv:	
  6299  007E                     btemp	set	126	;btemp
  6300  007E                     int$flags	set	126
  6301  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     75      80
    BANK1            80     29      80
    BANK2            80      0      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwdiv
    ___lwdiv->i1___wmul

Critical Paths under _main in BANK0

    _main->_pre_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA
    _M_control->___fltol
    _init_I2C_buffer->_eeprom_read
    _calculate_pidA->___flsub
    ___xxtofl->_abs
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->__Umul8_16
    ___flge->___xxtofl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calculate_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   61344
                                             24 BANK1      5     5      0
                          _M_control
                           _PWM_Init
                       _PWM_set_duty
                                _abs
                     _calculate_pidA
                     _calculate_pidM
                       _eeprom_write
                    _init_I2C_buffer
                           _pre_pidM
 ---------------------------------------------------------------------------------
 (1) _pre_pidM                                             4     2      2   19483
                                             71 BANK0      4     2      2
                                _abs (ARG)
                     _calculate_pidA (ARG)
                     _calculate_pidM
 ---------------------------------------------------------------------------------
 (2) _calculate_pidM                                      14    12      2   18999
                                             69 BANK0      2     0      2
                                             12 BANK1     12    12      0
                          _M_control
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                                _abs (ARG)
                     _calculate_pidA (ARG)
 ---------------------------------------------------------------------------------
 (3) _M_control                                            3     1      2    2089
                                             12 BANK0      3     1      2
                       _PWM_set_duty
                            ___fltol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     426
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _PWM_set_duty                                         4     2      2     453
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_I2C_buffer                                      0     0      0      22
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1    2400
                                              2 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _calculate_pidA                                      18    14      4   17224
                                             63 BANK0      6     2      4
                                              0 BANK1     12    12      0
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     674
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1047
                                              6 BANK0     14    10      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     517
                                              2 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4602
                                             55 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4177
                                             35 BANK0     20    12      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    4673
                                             10 BANK0     25    17      8
                          __Umul8_16
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            8     5      3    1419
                                              2 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     986
                                             20 BANK0     12     4      8
                           ___xxtofl (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0     627
                                              0 BANK0      2     2      0
                            ___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     206
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     421
                                              6 COMMON     7     3      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _M_control
     _PWM_set_duty
     ___fltol (ARG)
     ___wmul (ARG)
   _PWM_Init
   _PWM_set_duty
   _abs
   _calculate_pidA
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _abs
   _calculate_pidM
     _M_control
       _PWM_set_duty
       ___fltol (ARG)
       ___wmul (ARG)
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _abs (ARG)
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
   _eeprom_write
   _init_I2C_buffer
     _eeprom_read
   _pre_pidM
     _abs (ARG)
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
     _calculate_pidM (ARG)
       _M_control
         _PWM_set_duty
         ___fltol (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs (ARG)
       _calculate_pidA (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flge
           ___xxtofl (ARG)
             _abs (ARG)
           _abs (ARG)
         ___flmul
           __Umul8_16
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
           ___flmul (ARG)
             __Umul8_16
         ___fltol
         ___xxtofl
           _abs (ARG)
         _abs

 _isr (ROOT)
   ___lwdiv
     i1___wmul (ARG)
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      BE       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     1D      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      10      10       20.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      BE      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Sep 21 18:39:17 2018

                       pc 0002         calculate_pidA@pid 00DA               __CFG_CP$OFF 0000  
       calculate_pidA@set 005F         calculate_pidM@pid 00E6         calculate_pidM@set 0065  
     ___wmul@multiplicand 0024          i1___wmul@product 0074       __Umul8_16@word_mpld 0028  
                     l160 0890                       l137 0DAF                       l313 0E2B  
                     l138 0E13                       l147 0F1A                       l503 0F82  
                     l505 0FB0                       l620 04BD                       l293 0689  
                     l614 04A4                       l711 029C                       l615 04A2  
                     l712 029A                       l625 0524                       l642 0590  
                     l707 0286                       l627 0511                       l619 04BF  
                     l708 0284                       l636 053E                       l628 0517  
                     l637 053F                       l629 0518                       l662 05DB  
                     l647 05A9                       l736 0E9B                       l729 03EA  
                     l765 0439                       l749 0ECD                       _PR2 001B  
            __CFG_CPD$OFF 0000                       _abs 0BEC                       _isr 0004  
            __CFG_BORV$LO 0000                       wreg 0009              ___flmul@aexp 0037  
            ___flmul@bexp 0038              ___flmul@sign 0036              ___flmul@temp 0041  
            ___flmul@prod 003D                      S3986 06D1              __CFG_LVP$OFF 0000  
     calculate_pidA@error 00D6              ___fltol@exp1 002B                      ?_abs 0022  
                    l3020 0FED                      l3110 04E9                      l3014 0F41  
                    l3024 0FF3                      l3202 05D7                      l3130 052E  
                    l3220 0401                      l3124 051F                      l3206 05DC  
                    l3142 0547                      l3302 044D                      l3232 0411  
                    l3152 0588                      l3080 04CB                      l3304 0452  
                    l3250 0429                      l3226 0409                      l3170 05AD  
                    l3330 0482                      l3322 0475                      l3244 0421  
                    l3420 038F                      l3172 05AF                      l3238 0419  
                    l3430 03A4                      l3182 05BA                      l3166 05AA  
                    l3158 059E                      l3318 046E                      l3502 0EE2  
                    l3256 0431                      l3440 03B6                      l3328 0479  
                    l3264 0E47                      l3290 0F99                      l3450 03DC  
                    l3426 03A2                      l3194 05CB                      l3178 05B8  
                    l3274 0E66                      l3506 00C0                      l3284 0F71  
                    l3444 03C9                      l3372 02AA                      l3356 028A  
                    l3268 0E51                      l3524 0237                      l3368 02A0  
                    l3472 0EA6                      l3528 025C                      l3800 08C5  
                    l3490 0EC2                      l3802 08D5                      l3484 0EBD  
                    l3476 0EA8                      l3468 0E93                      l3564 0F32  
                    l3812 090A                      l3478 0EB2                      l3558 0F1D  
                    l3902 0A59                      l3488 0ECB                      l3824 092B  
                    l3728 084D                      l3834 0945                      l3836 0949  
                    l3924 0ADE                      l3942 0B0C                      l3854 099B  
                    l3790 08B0                      l3926 0AE8                      l3856 09A5  
                    l3784 0895                      l3928 0AF2                      l3938 0B08  
                    l3890 0A44                      l3866 09C0                      l3786 089B  
                    l3868 09D0                      l3788 08A5                      l3878 0A05  
                    ?_isr 0070              __CFG_WDTE$ON 0000           ?_calculate_pidA 005F  
         ?_calculate_pidM 0065                      u3215 0F4A                      u4025 03BF  
                    u4035 03D3                      u3340 0508                      u4204 0EFC  
                    u3350 0509                      u3335 04FD                      u4215 0F05  
                    u3443 0559                      u4235 0F16                      u2581 0688  
                    u4190 0EFA                      u4603 0987                      u3805 045B  
                    u3725 0E5B                      u4480 084B                      u4713 0A97  
                    u4553 0900                      u4723 0AC5                      u4807 0F28  
                    u4735 0AD3                      u4663 09FB                      u4683 0A40  
                    u4767 087A                      u4777 088B                      u4787 0AEC  
                    u4797 0BE4                      _WPUA 020C            ??_eeprom_write 0023  
            __CFG_WRT$OFF 0000                      abs@a 0022       calculate_pidM@error 00E2  
                    _main 0839                      _lset 00CD                      fsr0h 0005  
                    fsr1h 0007                      indf0 0000                      fsr0l 0004  
                    indf1 0001                      fsr1l 0006                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 00BE             __CFG_IESO$OFF 0000  
                   ??_abs 0024                     ??_isr 0020             __CFG_PLLEN$ON 0000  
   __size_of_PWM_set_duty 001F             ___fltol@sign1 002A           __end_of___fladd 05E1  
                   ?_main 0070                     _EEADR 0191           __end_of___flmul 03F5  
         __end_of___flsub 0FEB           __end_of___fltol 0491                     _T1CON 0018  
                   _T2CON 001C           __end_of___lwdiv 06BC                     i1l121 00BC  
                   _TRISA 008C             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
          __pbitbssCOMMON 03E8          __end_of_PWM_Init 0FCE          __end_ofi1___wmul 06D1  
                   status 0003       i1___wmul@multiplier 0070                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000              _PWM_set_duty 0F41           __initialization 081C  
            __end_of_main 0BEC                    ??_main 00EA        __size_of_M_control 0037  
                  _EEDATA 0193                    _CCPR1L 0291                    _EECON1 0195  
                  _EECON2 0196                    _ANSELA 018C                    i1l3600 06C4  
                  i1l3700 00AC                    i1l3622 0017                    i1l3640 0058  
                  i1l3706 00B1                    i1l3628 0021                    i1l3590 06B7  
                  i1l3646 005C                    i1l3586 06B3                    i1l3578 06A4  
                  i1l3690 00A4                    i1l3658 0072                    i1l3666 0080  
                  i1l3596 06BE                    i1l3692 00A6                    i1l3684 0096  
                  i1l3676 008A                    i1l3698 00AB                    _INTCON 000B  
                  u428_25 06AC                    _OSCCON 0099          __end_of___xxtofl 0EEB  
            _accumulatorA 0124              _accumulatorM 012C      __size_of_eeprom_read 0012  
                  ___flge 0F60                 ??___fladd 004B                    ___wmul 0FEB  
          __CFG_STVREN$ON 0000                 ??___flmul 0032                 ??___flsub 005F  
               ??___fltol 0026                 ??___lwdiv 007A      __end_of_eeprom_write 0E47  
                  _stable 00CB  __size_of_init_I2C_buffer 00A4          __end_of_pre_pidM 0F41  
      __size_of__Umul8_16 0049                ___flge@ff1 0034                ___flge@ff2 0038  
            ___xxtofl@arg 0030              ___xxtofl@exp 002F              ___xxtofl@val 0026  
 __end_of__initialization 0836           eeprom_read@addr 0022                ___fltol@f1 0022  
          __pcstackCOMMON 0070              __pidataBANK1 0000         __end_of_M_control 0E7E  
               ?_PWM_Init 0070                 ?i1___wmul 0070            _OPTION_REGbits 0095  
        ??_calculate_pidA 0063          ??_calculate_pidM 0067         eeprom_write@value 0022  
              __pbssBANK0 006B                __pbssBANK1 00A0                __pbssBANK2 0120  
       __end_of__Umul8_16 043E                __pmaintext 0839                   ?___flge 0034  
                 ?___wmul 0022                __pintentry 0004                   _CCP1CON 0293  
              ??_PWM_Init 0022                ??i1___wmul 0074       _calculate_pidA$1318 00D2  
               ?___xxtofl 0026       _calculate_pidM$1319 00DE                   _SSP1ADD 0212  
                 _SSP1BUF 0211         ??_init_I2C_buffer 0023          PWM_set_duty@duty 0022  
               ?_pre_pidM 0067     __size_of_eeprom_write 001D           __size_of___flge 0062  
                 ___fladd 0491                   ___flmul 0273                   ___flsub 0FCE  
                 ___fltol 043E           __size_of___wmul 0015                   ___lwdiv 0697  
              _lasterrorA 0120                _lasterrorM 0128                   __ptext1 0EEB  
                 __ptext2 00C0                   __ptext3 0E47                   __ptext4 0FEB  
                 __ptext5 0F41                   __ptext6 05E1                   __ptext7 0685  
                 __ptext8 0E2A                   __ptext9 0BFA               pre_pidM@set 0067  
               _T1CONbits 0018                   _counter 00CF              __size_of_abs 000E  
            __size_of_isr 00BA                ??___xxtofl 002A                 _IOCAFbits 0393  
               _IOCANbits 0392                   clrloop0 06E2      end_of_initialization 0836  
            _eeprom_write 0E2A                ??_pre_pidM 0069     i1___wmul@multiplicand 0072  
               _PORTAbits 000C               ___fladd@grs 0056          __CFG_FOSC$INTOSC 0000  
           ___xxtofl@sign 002E               ___flmul@grs 0039             ??_eeprom_read 0022  
              _zero_cross 0378            __end_of___flge 0FC2            __end_of___wmul 1000  
               _M_control 0E47             __pbitbssBANK0 0378         __size_of_PWM_Init 000C  
     start_initialization 081C         __size_ofi1___wmul 0015               __end_of_abs 0BFA  
             __end_of_isr 00BE              _loadDistance 03E8                  ??___flge 003C  
                ??___wmul 0026       __end_of_eeprom_read 0697                 __Umul8_16 03F5  
             __pdataBANK1 00EF                ?_M_control 002C           _init_I2C_buffer 05E1  
               ___fladd@a 0047                 ___fladd@b 0043                 ___flmul@a 002E  
               ___flmul@b 002A                 ___flsub@a 0057                 ___flsub@b 005B  
               ___latbits 0001             __pcstackBANK0 0020             __pcstackBANK1 00D2  
       __size_of___xxtofl 006D          eeprom_write@addr 0023             ?_PWM_set_duty 0022  
        ___lwdiv@dividend 0078                  ?___fladd 0043                  ?___flmul 002A  
                ?___flsub 0057                  ?___fltol 0022         __size_of_pre_pidM 0056  
              ?__Umul8_16 0022                  ?___lwdiv 0076                 __pswtext1 06D1  
               _first_i2c 00EF                 _index_i2c 00D1          ___lwdiv@quotient 007B  
          ___wmul@product 0026                  _LATAbits 010C   __size_of_calculate_pidA 0230  
 __size_of_calculate_pidM 01B3                 clear_ram0 06E1               _eeprom_read 0685  
                _PIE1bits 0091                  _PIE2bits 0092            ??_PWM_set_duty 0024  
             _auxDistance 006B                  _PIR1bits 0011                  _PIR2bits 0012  
 __end_of_init_I2C_buffer 0685                  _SSP1CON1 0215                  _SSP1STAT 0214  
             ??_M_control 002E                  _PWM_Init 0FC2         ___wmul@multiplier 0022  
                i1___wmul 06BC                _I2C_buffer 00A0                _EECON1bits 0195  
              _APFCONbits 011D               ??__Umul8_16 0025          __size_of___fladd 0150  
        __size_of___flmul 0182          __size_of___flsub 001D          __size_of___fltol 0053  
        __size_of___lwdiv 0025                  ___xxtofl 0E7E           ___lwdiv@divisor 0076  
         ___lwdiv@counter 007A                  __ptext10 0BEC                  __ptext11 0E7E  
                __ptext20 06BC                  __ptext12 043E                  __ptext21 0697  
                __ptext13 0FCE                  __ptext14 0491                  __ptext15 0273  
                __ptext16 03F5                  __ptext17 0F60                  __ptext18 0FC2  
            _SSP1CON1bits 0215              _SSP1CON2bits 0216              _SSP1CON3bits 0217  
           __size_of_main 03B3                  _pre_pidM 0EEB          ?_init_I2C_buffer 0070  
                int$flags 007E              _SSP1STATbits 0214                _INTCONbits 000B  
    __end_of_PWM_set_duty 0F60                  intlevel1 0000            _calculate_pidA 0BFA  
          _calculate_pidM 00C0         __CFG_CLKOUTEN$OFF 0000    __Umul8_16@multiplicand 0022  
           ___fladd@signs 0053    __end_of_calculate_pidA 0E2A    __end_of_calculate_pidM 0273  
           ?_eeprom_write 0022              ___fladd@aexp 0054              ___fladd@bexp 0055  
            M_control@ctr 002C                _STATUSbits 0003      __Umul8_16@multiplier 0027  
            ?_eeprom_read 0070         __Umul8_16@product 0025  
