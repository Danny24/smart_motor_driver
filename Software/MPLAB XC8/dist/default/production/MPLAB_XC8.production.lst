

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Sep 17 14:07:19 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	text20,local,class=CODE,merge=1,delta=2
    24                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	pa_nodes0,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.00
    29                           ; Generated 27/05/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC12F1840 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  008C                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0095                     	;# 
    92  0096                     	;# 
    93  0097                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  010C                     	;# 
   103  0111                     	;# 
   104  0112                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011B                     	;# 
   112  011D                     	;# 
   113  011D                     	;# 
   114  018C                     	;# 
   115  0191                     	;# 
   116  0191                     	;# 
   117  0192                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0194                     	;# 
   122  0195                     	;# 
   123  0196                     	;# 
   124  0197                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019E                     	;# 
   135  019F                     	;# 
   136  020C                     	;# 
   137  0211                     	;# 
   138  0211                     	;# 
   139  0212                     	;# 
   140  0212                     	;# 
   141  0213                     	;# 
   142  0213                     	;# 
   143  0214                     	;# 
   144  0214                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0215                     	;# 
   148  0216                     	;# 
   149  0216                     	;# 
   150  0217                     	;# 
   151  0217                     	;# 
   152  0291                     	;# 
   153  0291                     	;# 
   154  0292                     	;# 
   155  0293                     	;# 
   156  0294                     	;# 
   157  0295                     	;# 
   158  0295                     	;# 
   159  0296                     	;# 
   160  0391                     	;# 
   161  0392                     	;# 
   162  0393                     	;# 
   163  039A                     	;# 
   164  039C                     	;# 
   165  039D                     	;# 
   166  039E                     	;# 
   167  039F                     	;# 
   168  0FE4                     	;# 
   169  0FE5                     	;# 
   170  0FE6                     	;# 
   171  0FE7                     	;# 
   172  0FE8                     	;# 
   173  0FE9                     	;# 
   174  0FEA                     	;# 
   175  0FEB                     	;# 
   176  0FED                     	;# 
   177  0FEE                     	;# 
   178  0FEF                     	;# 
   179                           
   180                           	psect	eeprom_data
   181  0000  0024 0001 0000 0000 0000 0000 00FF 00FF 	db	36,1,0,0,0,0,255,255	;# 
   182  0008  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   183  0010  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   184  0018  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  0011                     	;# 
   199  0012                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  008C                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0095                     	;# 
   215  0096                     	;# 
   216  0097                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009A                     	;# 
   220  009B                     	;# 
   221  009B                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  010C                     	;# 
   226  0111                     	;# 
   227  0112                     	;# 
   228  0115                     	;# 
   229  0116                     	;# 
   230  0117                     	;# 
   231  0118                     	;# 
   232  0119                     	;# 
   233  011A                     	;# 
   234  011B                     	;# 
   235  011D                     	;# 
   236  011D                     	;# 
   237  018C                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0193                     	;# 
   244  0194                     	;# 
   245  0195                     	;# 
   246  0196                     	;# 
   247  0197                     	;# 
   248  0199                     	;# 
   249  019A                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019C                     	;# 
   255  019C                     	;# 
   256  019D                     	;# 
   257  019E                     	;# 
   258  019F                     	;# 
   259  020C                     	;# 
   260  0211                     	;# 
   261  0211                     	;# 
   262  0212                     	;# 
   263  0212                     	;# 
   264  0213                     	;# 
   265  0213                     	;# 
   266  0214                     	;# 
   267  0214                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0215                     	;# 
   271  0216                     	;# 
   272  0216                     	;# 
   273  0217                     	;# 
   274  0217                     	;# 
   275  0291                     	;# 
   276  0291                     	;# 
   277  0292                     	;# 
   278  0293                     	;# 
   279  0294                     	;# 
   280  0295                     	;# 
   281  0295                     	;# 
   282  0296                     	;# 
   283  0391                     	;# 
   284  0392                     	;# 
   285  0393                     	;# 
   286  039A                     	;# 
   287  039C                     	;# 
   288  039D                     	;# 
   289  039E                     	;# 
   290  039F                     	;# 
   291  0FE4                     	;# 
   292  0FE5                     	;# 
   293  0FE6                     	;# 
   294  0FE7                     	;# 
   295  0FE8                     	;# 
   296  0FE9                     	;# 
   297  0FEA                     	;# 
   298  0FEB                     	;# 
   299  0FED                     	;# 
   300  0FEE                     	;# 
   301  0FEF                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0015                     	;# 
   318  0016                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001C                     	;# 
   326  001E                     	;# 
   327  001F                     	;# 
   328  008C                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0095                     	;# 
   332  0096                     	;# 
   333  0097                     	;# 
   334  0098                     	;# 
   335  0099                     	;# 
   336  009A                     	;# 
   337  009B                     	;# 
   338  009B                     	;# 
   339  009C                     	;# 
   340  009D                     	;# 
   341  009E                     	;# 
   342  010C                     	;# 
   343  0111                     	;# 
   344  0112                     	;# 
   345  0115                     	;# 
   346  0116                     	;# 
   347  0117                     	;# 
   348  0118                     	;# 
   349  0119                     	;# 
   350  011A                     	;# 
   351  011B                     	;# 
   352  011D                     	;# 
   353  011D                     	;# 
   354  018C                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0197                     	;# 
   365  0199                     	;# 
   366  019A                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019C                     	;# 
   372  019C                     	;# 
   373  019D                     	;# 
   374  019E                     	;# 
   375  019F                     	;# 
   376  020C                     	;# 
   377  0211                     	;# 
   378  0211                     	;# 
   379  0212                     	;# 
   380  0212                     	;# 
   381  0213                     	;# 
   382  0213                     	;# 
   383  0214                     	;# 
   384  0214                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0215                     	;# 
   388  0216                     	;# 
   389  0216                     	;# 
   390  0217                     	;# 
   391  0217                     	;# 
   392  0291                     	;# 
   393  0291                     	;# 
   394  0292                     	;# 
   395  0293                     	;# 
   396  0294                     	;# 
   397  0295                     	;# 
   398  0295                     	;# 
   399  0296                     	;# 
   400  0391                     	;# 
   401  0392                     	;# 
   402  0393                     	;# 
   403  039A                     	;# 
   404  039C                     	;# 
   405  039D                     	;# 
   406  039E                     	;# 
   407  039F                     	;# 
   408  0FE4                     	;# 
   409  0FE5                     	;# 
   410  0FE6                     	;# 
   411  0FE7                     	;# 
   412  0FE8                     	;# 
   413  0FE9                     	;# 
   414  0FEA                     	;# 
   415  0FEB                     	;# 
   416  0FED                     	;# 
   417  0FEE                     	;# 
   418  0FEF                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0008                     	;# 
   428  0009                     	;# 
   429  000A                     	;# 
   430  000B                     	;# 
   431  000C                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001C                     	;# 
   443  001E                     	;# 
   444  001F                     	;# 
   445  008C                     	;# 
   446  0091                     	;# 
   447  0092                     	;# 
   448  0095                     	;# 
   449  0096                     	;# 
   450  0097                     	;# 
   451  0098                     	;# 
   452  0099                     	;# 
   453  009A                     	;# 
   454  009B                     	;# 
   455  009B                     	;# 
   456  009C                     	;# 
   457  009D                     	;# 
   458  009E                     	;# 
   459  010C                     	;# 
   460  0111                     	;# 
   461  0112                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011D                     	;# 
   471  018C                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0194                     	;# 
   479  0195                     	;# 
   480  0196                     	;# 
   481  0197                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  0211                     	;# 
   495  0211                     	;# 
   496  0212                     	;# 
   497  0212                     	;# 
   498  0213                     	;# 
   499  0213                     	;# 
   500  0214                     	;# 
   501  0214                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0216                     	;# 
   506  0216                     	;# 
   507  0217                     	;# 
   508  0217                     	;# 
   509  0291                     	;# 
   510  0291                     	;# 
   511  0292                     	;# 
   512  0293                     	;# 
   513  0294                     	;# 
   514  0295                     	;# 
   515  0295                     	;# 
   516  0296                     	;# 
   517  0391                     	;# 
   518  0392                     	;# 
   519  0393                     	;# 
   520  039A                     	;# 
   521  039C                     	;# 
   522  039D                     	;# 
   523  039E                     	;# 
   524  039F                     	;# 
   525  0FE4                     	;# 
   526  0FE5                     	;# 
   527  0FE6                     	;# 
   528  0FE7                     	;# 
   529  0FE8                     	;# 
   530  0FE9                     	;# 
   531  0FEA                     	;# 
   532  0FEB                     	;# 
   533  0FED                     	;# 
   534  0FEE                     	;# 
   535  0FEF                     	;# 
   536                           
   537                           	psect	idataBANK1
   538  0000                     __pidataBANK1:	
   539  0003                     _STATUSbits	set	3
   540  000C                     _PORTAbits	set	12
   541  0018                     _T1CON	set	24
   542  000B                     _INTCON	set	11
   543  001C                     _T2CON	set	28
   544  001B                     _PR2	set	27
   545  0012                     _PIR2bits	set	18
   546  0018                     _T1CONbits	set	24
   547  0011                     _PIR1bits	set	17
   548  000B                     _INTCONbits	set	11
   549  0092                     _PIE2bits	set	146
   550  0095                     _OPTION_REGbits	set	149
   551  008C                     _TRISA	set	140
   552  0099                     _OSCCON	set	153
   553  0091                     _PIE1bits	set	145
   554  011D                     _APFCONbits	set	285
   555  010C                     _LATAbits	set	268
   556  0191                     _EEADR	set	401
   557  0196                     _EECON2	set	406
   558  0193                     _EEDATA	set	403
   559  0195                     _EECON1	set	405
   560  0195                     _EECON1bits	set	405
   561  018C                     _ANSELA	set	396
   562  0212                     _SSP1ADD	set	530
   563  0217                     _SSP1CON3bits	set	535
   564  0216                     _SSP1CON2bits	set	534
   565  0215                     _SSP1CON1	set	533
   566  0214                     _SSP1STAT	set	532
   567  020C                     _WPUA	set	524
   568  0215                     _SSP1CON1bits	set	533
   569  0211                     _SSP1BUF	set	529
   570  0214                     _SSP1STATbits	set	532
   571  0291                     _CCPR1L	set	657
   572  0293                     _CCP1CON	set	659
   573  0392                     _IOCANbits	set	914
   574  0393                     _IOCAFbits	set	915
   575                           
   576                           ; #config settings
   577  0000                     
   578                           	psect	cinit
   579  00C0                     start_initialization:	
   580  00C0                     __initialization:	
   581                           
   582                           ; Initialize objects allocated to BANK1
   583  00C0  0021               	movlb	1	; select bank1
   584                           
   585                           ;initializer for _first_i2c
   586  00C1  3001               	movlw	1
   587  00C2  00ED               	movwf	__pdataBANK1& (0+127)
   588                           
   589                           ; Clear objects allocated to BITCOMMON
   590  00C3  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   591                           
   592                           ; Clear objects allocated to BITBANK0
   593  00C4  0020               	movlb	0	; select bank0
   594  00C5  30A0               	movlw	low __pbssBANK1
   595  00C6  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   596                           
   597                           ; Clear objects allocated to BANK0
   598  00C7  01EB               	clrf	__pbssBANK0& (0+127)
   599  00C8  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   600  00C9  01ED               	clrf	(__pbssBANK0+2)& (0+127)
   601  00CA  01EE               	clrf	(__pbssBANK0+3)& (0+127)
   602                           
   603                           ; Clear objects allocated to BANK1
   604  00CB  0084               	movwf	4
   605  00CC  3000               	movlw	high __pbssBANK1
   606  00CD  0085               	movwf	5
   607  00CE  3030               	movlw	48
   608  00CF  3186  26AC  3180   	fcall	clear_ram0
   609                           
   610                           ; Clear objects allocated to BANK2
   611  00D2  3020               	movlw	low __pbssBANK2
   612  00D3  0084               	movwf	4
   613  00D4  3001               	movlw	high __pbssBANK2
   614  00D5  0085               	movwf	5
   615  00D6  3010               	movlw	16
   616  00D7  3186  26AC         	fcall	clear_ram0
   617  00D9                     end_of_initialization:	
   618                           ;End of C runtime variable initialization code
   619                           
   620  00D9                     __end_of__initialization:	
   621  00D9  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   622  00DA  0020               	movlb	0
   623  00DB  3188  2806         	ljmp	_main	;jump to C main() function
   624                           
   625                           	psect	bitbssCOMMON
   626  03E8                     __pbitbssCOMMON:	
   627  03E8                     _loadDistance:	
   628  03E8                     	ds	1
   629                           
   630                           	psect	bitbssBANK0
   631  0378                     __pbitbssBANK0:	
   632  0378                     _zero_cross:	
   633  0378                     	ds	1
   634                           
   635                           	psect	bssBANK0
   636  006B                     __pbssBANK0:	
   637  006B                     _auxDistance:	
   638  006B                     	ds	4
   639                           
   640                           	psect	bssBANK1
   641  00A0                     __pbssBANK1:	
   642  00A0                     _I2C_buffer:	
   643  00A0                     	ds	43
   644  00CB                     _lset:	
   645  00CB                     	ds	2
   646  00CD                     _counter:	
   647  00CD                     	ds	2
   648  00CF                     _index_i2c:	
   649  00CF                     	ds	1
   650                           
   651                           	psect	dataBANK1
   652  00ED                     __pdataBANK1:	
   653  00ED                     _first_i2c:	
   654  00ED                     	ds	1
   655                           
   656                           	psect	bssBANK2
   657  0120                     __pbssBANK2:	
   658  0120                     _lasterrorA:	
   659  0120                     	ds	4
   660  0124                     _accumulatorA:	
   661  0124                     	ds	4
   662  0128                     _lasterrorM:	
   663  0128                     	ds	4
   664  012C                     _accumulatorM:	
   665  012C                     	ds	4
   666                           
   667                           	psect	clrtext
   668  06AC                     clear_ram0:	
   669                           ;	Called with FSR0 containing the base address, and
   670                           ;	WREG with the size to clear
   671                           
   672  06AC  0064               	clrwdt	;clear the watchdog before getting into this loop
   673  06AD                     clrloop0:	
   674  06AD  0180               	clrf	0	;clear RAM location pointed to by FSR
   675  06AE  3101               	addfsr 0,1
   676  06AF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   677  06B0  2EAD               	goto	clrloop0	;have we reached the end yet?
   678  06B1  3400               	retlw	0	;all done for this memory range, return
   679                           
   680                           	psect	cstackBANK1
   681  00D0                     __pcstackBANK1:	
   682  00D0                     _calculate_pidA$1317:	
   683                           
   684                           ; 4 bytes @ 0x0
   685  00D0                     	ds	4
   686  00D4                     calculate_pidA@error:	
   687                           
   688                           ; 4 bytes @ 0x4
   689  00D4                     	ds	4
   690  00D8                     calculate_pidA@pid:	
   691                           
   692                           ; 4 bytes @ 0x8
   693  00D8                     	ds	4
   694  00DC                     _calculate_pidM$1318:	
   695                           
   696                           ; 4 bytes @ 0xC
   697  00DC                     	ds	4
   698  00E0                     calculate_pidM@error:	
   699                           
   700                           ; 4 bytes @ 0x10
   701  00E0                     	ds	4
   702  00E4                     calculate_pidM@pid:	
   703                           
   704                           ; 4 bytes @ 0x14
   705  00E4                     	ds	4
   706  00E8                     ??_main:	
   707                           
   708                           ; 1 bytes @ 0x18
   709  00E8                     	ds	5
   710                           
   711                           	psect	cstackCOMMON
   712  0070                     __pcstackCOMMON:	
   713  0070                     ?_eeprom_read:	
   714  0070                     ?_isr:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_init_I2C_buffer:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_main:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_PWM_Init:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?i1___wmul:	
   727                           ; 2 bytes @ 0x0
   728                           
   729  0070                     i1___wmul@multiplier:	
   730                           ; 2 bytes @ 0x0
   731                           
   732                           
   733                           ; 2 bytes @ 0x0
   734  0070                     	ds	2
   735  0072                     i1___wmul@multiplicand:	
   736                           
   737                           ; 2 bytes @ 0x2
   738  0072                     	ds	2
   739  0074                     ??i1___wmul:	
   740  0074                     i1___wmul@product:	
   741                           ; 1 bytes @ 0x4
   742                           
   743                           
   744                           ; 2 bytes @ 0x4
   745  0074                     	ds	2
   746  0076                     ?___lwdiv:	
   747  0076                     ___lwdiv@divisor:	
   748                           ; 2 bytes @ 0x6
   749                           
   750                           
   751                           ; 2 bytes @ 0x6
   752  0076                     	ds	2
   753  0078                     ___lwdiv@dividend:	
   754                           
   755                           ; 2 bytes @ 0x8
   756  0078                     	ds	2
   757  007A                     ??___lwdiv:	
   758  007A                     ___lwdiv@counter:	
   759                           ; 1 bytes @ 0xA
   760                           
   761                           
   762                           ; 1 bytes @ 0xA
   763  007A                     	ds	1
   764  007B                     ___lwdiv@quotient:	
   765                           
   766                           ; 2 bytes @ 0xB
   767  007B                     	ds	2
   768                           
   769                           	psect	cstackBANK0
   770  0020                     __pcstackBANK0:	
   771  0020                     ??_isr:	
   772                           
   773                           ; 1 bytes @ 0x0
   774  0020                     	ds	2
   775  0022                     ??_eeprom_read:	
   776  0022                     ?_eeprom_write:	
   777                           ; 1 bytes @ 0x2
   778                           
   779  0022                     ??_PWM_Init:	
   780                           ; 1 bytes @ 0x2
   781                           
   782  0022                     ?_abs:	
   783                           ; 1 bytes @ 0x2
   784                           
   785  0022                     ?__Umul8_16:	
   786                           ; 2 bytes @ 0x2
   787                           
   788  0022                     ?_PWM_set_duty:	
   789                           ; 2 bytes @ 0x2
   790                           
   791  0022                     ?___wmul:	
   792                           ; 2 bytes @ 0x2
   793                           
   794  0022                     ?___fltol:	
   795                           ; 2 bytes @ 0x2
   796                           
   797  0022                     eeprom_read@addr:	
   798                           ; 4 bytes @ 0x2
   799                           
   800  0022                     eeprom_write@value:	
   801                           ; 1 bytes @ 0x2
   802                           
   803  0022                     __Umul8_16@multiplicand:	
   804                           ; 1 bytes @ 0x2
   805                           
   806  0022                     PWM_set_duty@duty:	
   807                           ; 1 bytes @ 0x2
   808                           
   809  0022                     ___wmul@multiplier:	
   810                           ; 2 bytes @ 0x2
   811                           
   812  0022                     abs@a:	
   813                           ; 2 bytes @ 0x2
   814                           
   815  0022                     ___fltol@f1:	
   816                           ; 2 bytes @ 0x2
   817                           
   818                           
   819                           ; 4 bytes @ 0x2
   820  0022                     	ds	1
   821  0023                     ??_eeprom_write:	
   822  0023                     ??_init_I2C_buffer:	
   823                           ; 1 bytes @ 0x3
   824                           
   825  0023                     eeprom_write@addr:	
   826                           ; 1 bytes @ 0x3
   827                           
   828                           
   829                           ; 1 bytes @ 0x3
   830  0023                     	ds	1
   831  0024                     ??_abs:	
   832  0024                     ??_PWM_set_duty:	
   833                           ; 1 bytes @ 0x4
   834                           
   835  0024                     ___wmul@multiplicand:	
   836                           ; 1 bytes @ 0x4
   837                           
   838                           
   839                           ; 2 bytes @ 0x4
   840  0024                     	ds	1
   841  0025                     ??__Umul8_16:	
   842  0025                     __Umul8_16@product:	
   843                           ; 1 bytes @ 0x5
   844                           
   845                           
   846                           ; 2 bytes @ 0x5
   847  0025                     	ds	1
   848  0026                     ??___wmul:	
   849  0026                     ??___fltol:	
   850                           ; 1 bytes @ 0x6
   851                           
   852  0026                     ?___xxtofl:	
   853                           ; 1 bytes @ 0x6
   854                           
   855  0026                     ___wmul@product:	
   856                           ; 4 bytes @ 0x6
   857                           
   858  0026                     ___xxtofl@val:	
   859                           ; 2 bytes @ 0x6
   860                           
   861                           
   862                           ; 4 bytes @ 0x6
   863  0026                     	ds	1
   864  0027                     __Umul8_16@multiplier:	
   865                           
   866                           ; 1 bytes @ 0x7
   867  0027                     	ds	1
   868  0028                     __Umul8_16@word_mpld:	
   869                           
   870                           ; 2 bytes @ 0x8
   871  0028                     	ds	2
   872  002A                     ??___xxtofl:	
   873  002A                     ?___flmul:	
   874                           ; 1 bytes @ 0xA
   875                           
   876  002A                     ___fltol@sign1:	
   877                           ; 4 bytes @ 0xA
   878                           
   879  002A                     ___flmul@b:	
   880                           ; 1 bytes @ 0xA
   881                           
   882                           
   883                           ; 4 bytes @ 0xA
   884  002A                     	ds	1
   885  002B                     ___fltol@exp1:	
   886                           
   887                           ; 1 bytes @ 0xB
   888  002B                     	ds	1
   889  002C                     ?_M_control:	
   890  002C                     M_control@ctr:	
   891                           ; 1 bytes @ 0xC
   892                           
   893                           
   894                           ; 2 bytes @ 0xC
   895  002C                     	ds	2
   896  002E                     ??_M_control:	
   897  002E                     ___xxtofl@sign:	
   898                           ; 1 bytes @ 0xE
   899                           
   900  002E                     ___flmul@a:	
   901                           ; 1 bytes @ 0xE
   902                           
   903                           
   904                           ; 4 bytes @ 0xE
   905  002E                     	ds	1
   906  002F                     ___xxtofl@exp:	
   907                           
   908                           ; 1 bytes @ 0xF
   909  002F                     	ds	1
   910  0030                     ___xxtofl@arg:	
   911                           
   912                           ; 4 bytes @ 0x10
   913  0030                     	ds	2
   914  0032                     ??___flmul:	
   915                           
   916                           ; 1 bytes @ 0x12
   917  0032                     	ds	2
   918  0034                     ?___flge:	
   919  0034                     ___flge@ff1:	
   920                           ; 1 bit 
   921                           
   922                           
   923                           ; 4 bytes @ 0x14
   924  0034                     	ds	2
   925  0036                     ___flmul@sign:	
   926                           
   927                           ; 1 bytes @ 0x16
   928  0036                     	ds	1
   929  0037                     ___flmul@aexp:	
   930                           
   931                           ; 1 bytes @ 0x17
   932  0037                     	ds	1
   933  0038                     ___flmul@bexp:	
   934  0038                     ___flge@ff2:	
   935                           ; 1 bytes @ 0x18
   936                           
   937                           
   938                           ; 4 bytes @ 0x18
   939  0038                     	ds	1
   940  0039                     ___flmul@grs:	
   941                           
   942                           ; 4 bytes @ 0x19
   943  0039                     	ds	3
   944  003C                     ??___flge:	
   945                           
   946                           ; 1 bytes @ 0x1C
   947  003C                     	ds	1
   948  003D                     ___flmul@prod:	
   949                           
   950                           ; 4 bytes @ 0x1D
   951  003D                     	ds	4
   952  0041                     ___flmul@temp:	
   953                           
   954                           ; 2 bytes @ 0x21
   955  0041                     	ds	2
   956  0043                     ?___fladd:	
   957  0043                     ___fladd@b:	
   958                           ; 4 bytes @ 0x23
   959                           
   960                           
   961                           ; 4 bytes @ 0x23
   962  0043                     	ds	4
   963  0047                     ___fladd@a:	
   964                           
   965                           ; 4 bytes @ 0x27
   966  0047                     	ds	4
   967  004B                     ??___fladd:	
   968                           
   969                           ; 1 bytes @ 0x2B
   970  004B                     	ds	8
   971  0053                     ___fladd@signs:	
   972                           
   973                           ; 1 bytes @ 0x33
   974  0053                     	ds	1
   975  0054                     ___fladd@aexp:	
   976                           
   977                           ; 1 bytes @ 0x34
   978  0054                     	ds	1
   979  0055                     ___fladd@bexp:	
   980                           
   981                           ; 1 bytes @ 0x35
   982  0055                     	ds	1
   983  0056                     ___fladd@grs:	
   984                           
   985                           ; 1 bytes @ 0x36
   986  0056                     	ds	1
   987  0057                     ?___flsub:	
   988  0057                     ___flsub@a:	
   989                           ; 4 bytes @ 0x37
   990                           
   991                           
   992                           ; 4 bytes @ 0x37
   993  0057                     	ds	4
   994  005B                     ___flsub@b:	
   995                           
   996                           ; 4 bytes @ 0x3B
   997  005B                     	ds	4
   998  005F                     ??___flsub:	
   999  005F                     ?_calculate_pidA:	
  1000                           ; 1 bytes @ 0x3F
  1001                           
  1002  005F                     calculate_pidA@set:	
  1003                           ; 2 bytes @ 0x3F
  1004                           
  1005                           
  1006                           ; 4 bytes @ 0x3F
  1007  005F                     	ds	4
  1008  0063                     ??_calculate_pidA:	
  1009                           
  1010                           ; 1 bytes @ 0x43
  1011  0063                     	ds	2
  1012  0065                     ?_calculate_pidM:	
  1013  0065                     calculate_pidM@set:	
  1014                           ; 1 bytes @ 0x45
  1015                           
  1016                           
  1017                           ; 2 bytes @ 0x45
  1018  0065                     	ds	2
  1019  0067                     ??_calculate_pidM:	
  1020  0067                     ?_pre_pidM:	
  1021                           ; 1 bytes @ 0x47
  1022                           
  1023  0067                     pre_pidM@set:	
  1024                           ; 1 bytes @ 0x47
  1025                           
  1026                           
  1027                           ; 2 bytes @ 0x47
  1028  0067                     	ds	2
  1029  0069                     ??_pre_pidM:	
  1030                           
  1031                           ; 1 bytes @ 0x49
  1032  0069                     	ds	2
  1033                           
  1034                           	psect	maintext
  1035  0806                     __pmaintext:	
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 360 in file "main.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : B1F/0
  1052 ;;		On exit  : 1F/1
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1055 ;;      Params:         0       0       0       0
  1056 ;;      Locals:         0       0       0       0
  1057 ;;      Temps:          0       0       5       0
  1058 ;;      Totals:         0       0       5       0
  1059 ;;Total ram usage:        5 bytes
  1060 ;; Hardware stack levels required when called:    6
  1061 ;; This function calls:
  1062 ;;		_M_control
  1063 ;;		_PWM_Init
  1064 ;;		_PWM_set_duty
  1065 ;;		_abs
  1066 ;;		_calculate_pidA
  1067 ;;		_calculate_pidM
  1068 ;;		_eeprom_write
  1069 ;;		_init_I2C_buffer
  1070 ;;		_pre_pidM
  1071 ;; This function is called by:
  1072 ;;		Startup code after reset
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           
  1077                           ;psect for function _main
  1078  0806                     _main:	
  1079                           
  1080                           ;main.c: 361: OSCCON = 0b11110000;
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1084  0806  30F0               	movlw	240
  1085  0807  0021               	movlb	1	; select bank1
  1086  0808  0099               	movwf	25	;volatile
  1087                           
  1088                           ;main.c: 362: init_I2C_buffer();
  1089  0809  3185  25AC  3188   	fcall	_init_I2C_buffer
  1090                           
  1091                           ;main.c: 363: TRISA = 0b00011110;
  1092  080C  301E               	movlw	30
  1093  080D  008C               	movwf	12	;volatile
  1094                           
  1095                           ;main.c: 364: ANSELA = 0b00000000;
  1096  080E  0023               	movlb	3	; select bank3
  1097  080F  018C               	clrf	12	;volatile
  1098                           
  1099                           ;main.c: 365: WPUA = 0b00011110;
  1100  0810  0024               	movlb	4	; select bank4
  1101  0811  008C               	movwf	12	;volatile
  1102                           
  1103                           ;main.c: 366: OPTION_REGbits.nWPUEN = (char) !(I2C_buffer.data.IOWPU & 0x01);
  1104  0812  0021               	movlb	1	; select bank1
  1105  0813  1823               	btfsc	(_I2C_buffer^(0+128)+3),0	;volatile
  1106  0814  2818               	goto	u4440
  1107  0815  0021               	movlb	1	; select bank1
  1108  0816  1795               	bsf	21,7	;volatile
  1109  0817  281A               	goto	l3686
  1110  0818                     u4440:	
  1111  0818  0021               	movlb	1	; select bank1
  1112  0819  1395               	bcf	21,7	;volatile
  1113  081A                     l3686:	
  1114                           
  1115                           ;main.c: 367: APFCONbits.CCP1SEL = 1;
  1116  081A  0022               	movlb	2	; select bank2
  1117  081B  141D               	bsf	29,0	;volatile
  1118                           
  1119                           ;main.c: 368: LATAbits.LATA0 = 0;
  1120  081C  100C               	bcf	12,0	;volatile
  1121                           
  1122                           ;main.c: 369: SSP1STAT = 0b10000000;
  1123  081D  3080               	movlw	128
  1124  081E  0024               	movlb	4	; select bank4
  1125  081F  0094               	movwf	20	;volatile
  1126                           
  1127                           ;main.c: 370: SSP1CON1 = 0b00110110;
  1128  0820  3036               	movlw	54
  1129  0821  0095               	movwf	21	;volatile
  1130                           
  1131                           ;main.c: 371: SSP1CON2bits.SEN = 1;
  1132  0822  1416               	bsf	22,0	;volatile
  1133                           
  1134                           ;main.c: 372: SSP1CON3bits.BOEN = 1;
  1135  0823  1617               	bsf	23,4	;volatile
  1136                           
  1137                           ;main.c: 373: SSP1CON3bits.SDAHT = 1;
  1138  0824  1597               	bsf	23,3	;volatile
  1139                           
  1140                           ;main.c: 374: SSP1CON3bits.SBCDE = 1;
  1141  0825  1517               	bsf	23,2	;volatile
  1142                           
  1143                           ;main.c: 375: SSP1ADD = (char) (I2C_buffer.data.ADDRESS << 1);
  1144  0826  0021               	movlb	1	; select bank1
  1145  0827  3521               	lslf	(_I2C_buffer^(0+128)+1),w	;volatile
  1146  0828  0024               	movlb	4	; select bank4
  1147  0829  0092               	movwf	18	;volatile
  1148                           
  1149                           ;main.c: 376: PIR1bits.SSP1IF = 0;
  1150  082A  0020               	movlb	0	; select bank0
  1151  082B  1191               	bcf	17,3	;volatile
  1152                           
  1153                           ;main.c: 377: PIR2bits.BCL1IF = 0;
  1154  082C  1192               	bcf	18,3	;volatile
  1155                           
  1156                           ;main.c: 378: PIE2bits.BCL1IE = 1;
  1157  082D  0021               	movlb	1	; select bank1
  1158  082E  1592               	bsf	18,3	;volatile
  1159                           
  1160                           ;main.c: 379: PIE1bits.SSP1IE = 1;
  1161  082F  1591               	bsf	17,3	;volatile
  1162                           
  1163                           ;main.c: 380: INTCONbits.PEIE = 1;
  1164  0830  170B               	bsf	11,6	;volatile
  1165                           
  1166                           ;main.c: 381: PWM_Init();
  1167  0831  276F  3188         	fcall	_PWM_Init
  1168                           
  1169                           ;main.c: 382: PWM_set_duty(0);
  1170  0833  01A2               	clrf	PWM_set_duty@duty
  1171  0834  01A3               	clrf	PWM_set_duty@duty+1
  1172  0835  26EE  3188         	fcall	_PWM_set_duty
  1173                           
  1174                           ;main.c: 383: IOCANbits.IOCAN4 = 1;
  1175  0837  0027               	movlb	7	; select bank7
  1176  0838  1612               	bsf	18,4	;volatile
  1177                           
  1178                           ;main.c: 384: INTCON = 0b01001000;
  1179  0839  3048               	movlw	72
  1180  083A  008B               	movwf	11	;volatile
  1181                           
  1182                           ;main.c: 385: T1CON = 0b00110100;
  1183  083B  3034               	movlw	52
  1184  083C  0020               	movlb	0	; select bank0
  1185  083D  0098               	movwf	24	;volatile
  1186                           
  1187                           ;main.c: 386: PIE1bits.TMR1IE = 1;
  1188  083E  0021               	movlb	1	; select bank1
  1189  083F  1411               	bsf	17,0	;volatile
  1190                           
  1191                           ;main.c: 387: T1CONbits.TMR1ON = 1;
  1192  0840  0020               	movlb	0	; select bank0
  1193  0841  1418               	bsf	24,0	;volatile
  1194                           
  1195                           ;main.c: 388: INTCONbits.GIE = 1;
  1196  0842  178B               	bsf	11,7	;volatile
  1197                           
  1198                           ;main.c: 390: _delay((unsigned long)((5)*(32000000/4000.0)));
  1199  0843  3034               	movlw	52
  1200  0844  0021               	movlb	1	; select bank1
  1201  0845  00E8               	movwf	??_main^(0+128)
  1202  0846  30F1               	movlw	241
  1203  0847                     u4707:	
  1204  0847  0B89               	decfsz	9,f
  1205  0848  2847               	goto	u4707
  1206  0849  0BE8               	decfsz	??_main^(0+128),f
  1207  084A  2847               	goto	u4707
  1208  084B  3200               	nop2
  1209                           
  1210                           ;main.c: 392: if (PORTAbits.RA3 == 0) {
  1211  084C  0020               	movlb	0	; select bank0
  1212  084D  198C               	btfsc	12,3	;volatile
  1213  084E  2854               	goto	l158
  1214                           
  1215                           ;main.c: 393: eeprom_write(0, 0x24);
  1216  084F  3024               	movlw	36
  1217  0850  00A2               	movwf	eeprom_write@value
  1218  0851  3000               	movlw	0
  1219  0852  2399  3188         	fcall	_eeprom_write
  1220  0854                     l158:	
  1221                           ;main.c: 394: };main.c: 396: while (1) {
  1222                           
  1223  0854  0064               	clrwdt	;# 
  1224                           
  1225                           ;main.c: 398: if (I2C_buffer.data.START_STOP == 1) {
  1226  0855  0021               	movlb	1	; select bank1
  1227  0856  0B22               	decfsz	(_I2C_buffer^(0+128)+2),w	;volatile
  1228  0857  2A9F               	goto	l3868
  1229  0858  2A8B               	goto	l3864
  1230  0859                     l3740:	
  1231                           
  1232                           ;main.c: 401: M_control(0);
  1233  0859  0020               	movlb	0	; select bank0
  1234  085A  01AC               	clrf	M_control@ctr
  1235  085B  01AD               	clrf	M_control@ctr+1
  1236  085C  23B6  3188         	fcall	_M_control
  1237                           
  1238                           ;main.c: 402: break;
  1239  085E  2A95               	goto	l3866
  1240  085F                     l3742:	
  1241                           
  1242                           ;main.c: 404: M_control(I2C_buffer.data.SPEED);
  1243  085F  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1244  0860  0020               	movlb	0	; select bank0
  1245  0861  00AD               	movwf	M_control@ctr+1
  1246  0862  0021               	movlb	1	; select bank1
  1247  0863  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1248  0864  0020               	movlb	0	; select bank0
  1249  0865  00AC               	movwf	M_control@ctr
  1250  0866  23B6  3188         	fcall	_M_control
  1251                           
  1252                           ;main.c: 405: break;
  1253  0868  2A95               	goto	l3866
  1254  0869                     l3744:	
  1255                           
  1256                           ;main.c: 407: calculate_pidM(I2C_buffer.data.SPEED);
  1257  0869  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1258  086A  0020               	movlb	0	; select bank0
  1259  086B  00E6               	movwf	calculate_pidM@set+1
  1260  086C  0021               	movlb	1	; select bank1
  1261  086D  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1262  086E  0020               	movlb	0	; select bank0
  1263  086F  00E5               	movwf	calculate_pidM@set
  1264  0870  3180  20DD  3188   	fcall	_calculate_pidM
  1265                           
  1266                           ;main.c: 408: break;
  1267  0873  2A95               	goto	l3866
  1268  0874                     l3746:	
  1269                           
  1270                           ;main.c: 410: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1271  0874  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1272  0875  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1273  0876  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1274  0877  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1275  0878  1D03               	btfss	3,2
  1276  0879  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1277  087A  2889               	goto	l3756
  1278  087B  300F               	movlw	15
  1279                           
  1280                           ;main.c: 411: loadDistance = 1;
  1281  087C  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1282                           
  1283                           ;main.c: 412: auxDistance = I2C_buffer.data.DISTANCE;
  1284  087D  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1285  087E  0086               	movwf	6
  1286  087F  0187               	clrf	7
  1287  0880  3F40               	moviw [0]fsr1
  1288  0881  0020               	movlb	0	; select bank0
  1289  0882  00EB               	movwf	_auxDistance
  1290  0883  3F41               	moviw [1]fsr1
  1291  0884  00EC               	movwf	_auxDistance+1
  1292  0885  3F42               	moviw [2]fsr1
  1293  0886  00ED               	movwf	_auxDistance+2
  1294  0887  3F43               	moviw [3]fsr1
  1295  0888  2A0D               	goto	L1
  1296  0889                     l3756:	
  1297                           ;main.c: 414: } else {
  1298                           
  1299                           ;main.c: 413: I2C_buffer.data.DISTANCE = 0;
  1300                           
  1301                           
  1302                           ;main.c: 415: if (auxDistance > 0) {
  1303  0889  0020               	movlb	0	; select bank0
  1304  088A  1BEE               	btfsc	_auxDistance+3,7
  1305  088B  28CE               	goto	l3768
  1306  088C  086E               	movf	_auxDistance+3,w
  1307  088D  1D03               	btfss	3,2
  1308  088E  2899               	goto	l3758
  1309  088F  086D               	movf	_auxDistance+2,w
  1310  0890  1D03               	btfss	3,2
  1311  0891  2899               	goto	l3758
  1312  0892  086C               	movf	_auxDistance+1,w
  1313  0893  1D03               	btfss	3,2
  1314  0894  2899               	goto	l3758
  1315  0895  3001               	movlw	1
  1316  0896  026B               	subwf	_auxDistance,w
  1317  0897  1C03               	btfss	3,0
  1318  0898  28CE               	goto	l3768
  1319  0899                     l3758:	
  1320                           
  1321                           ;main.c: 416: calculate_pidM(abs(I2C_buffer.data.SPEED));
  1322  0899  0021               	movlb	1	; select bank1
  1323  089A  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1324  089B  0020               	movlb	0	; select bank0
  1325  089C  00A3               	movwf	abs@a+1
  1326  089D  0021               	movlb	1	; select bank1
  1327  089E  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1328  089F  0020               	movlb	0	; select bank0
  1329  08A0  00A2               	movwf	abs@a
  1330  08A1  268A               	fcall	_abs
  1331  08A2  0823               	movf	?_abs+1,w
  1332  08A3  00E6               	movwf	calculate_pidM@set+1
  1333  08A4  0822               	movf	?_abs,w
  1334  08A5  00E5               	movwf	calculate_pidM@set
  1335  08A6  3180  20DD  3188   	fcall	_calculate_pidM
  1336                           
  1337                           ;main.c: 417: if (auxDistance <= I2C_buffer.data.DISTANCE) {
  1338  08A9  0021               	movlb	1	; select bank1
  1339  08AA  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1340  08AB  3A80               	xorlw	128
  1341  08AC  00E8               	movwf	??_main^(0+128)
  1342  08AD  0020               	movlb	0	; select bank0
  1343  08AE  086E               	movf	_auxDistance+3,w
  1344  08AF  3A80               	xorlw	128
  1345  08B0  0021               	movlb	1	; select bank1
  1346  08B1  0268               	subwf	??_main^(0+128),w
  1347  08B2  1D03               	skipz
  1348  08B3  28C4               	goto	u4513
  1349  08B4  0020               	movlb	0	; select bank0
  1350  08B5  086D               	movf	_auxDistance+2,w
  1351  08B6  0021               	movlb	1	; select bank1
  1352  08B7  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1353  08B8  1D03               	skipz
  1354  08B9  28C4               	goto	u4513
  1355  08BA  0020               	movlb	0	; select bank0
  1356  08BB  086C               	movf	_auxDistance+1,w
  1357  08BC  0021               	movlb	1	; select bank1
  1358  08BD  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1359  08BE  1D03               	skipz
  1360  08BF  28C4               	goto	u4513
  1361  08C0  0020               	movlb	0	; select bank0
  1362  08C1  086B               	movf	_auxDistance,w
  1363  08C2  0021               	movlb	1	; select bank1
  1364  08C3  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1365  08C4                     u4513:	
  1366  08C4  1C03               	skipc
  1367  08C5  28CE               	goto	l3768
  1368                           
  1369                           ;main.c: 418: loadDistance = 0;
  1370  08C6  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1371                           
  1372                           ;main.c: 419: M_control(0);
  1373  08C7  0020               	movlb	0	; select bank0
  1374  08C8  01AC               	clrf	M_control@ctr
  1375  08C9  01AD               	clrf	M_control@ctr+1
  1376  08CA  23B6  3188         	fcall	_M_control
  1377                           
  1378                           ;main.c: 420: I2C_buffer.data.START_STOP = 0;
  1379  08CC  0021               	movlb	1	; select bank1
  1380  08CD  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1381  08CE                     l3768:	
  1382                           
  1383                           ;main.c: 421: };main.c: 422: };main.c: 423: if (auxDistance < 0) {
  1384  08CE  0020               	movlb	0	; select bank0
  1385  08CF  1FEE               	btfss	_auxDistance+3,7
  1386  08D0  2A95               	goto	l3866
  1387                           
  1388                           ;main.c: 424: calculate_pidM(abs(I2C_buffer.data.SPEED)*-1);
  1389  08D1  0021               	movlb	1	; select bank1
  1390  08D2  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1391  08D3  0020               	movlb	0	; select bank0
  1392  08D4  00A3               	movwf	abs@a+1
  1393  08D5  0021               	movlb	1	; select bank1
  1394  08D6  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1395  08D7  0020               	movlb	0	; select bank0
  1396  08D8  00A2               	movwf	abs@a
  1397  08D9  268A               	fcall	_abs
  1398  08DA  0922               	comf	?_abs,w
  1399  08DB  0021               	movlb	1	; select bank1
  1400  08DC  00E8               	movwf	??_main^(0+128)
  1401  08DD  0020               	movlb	0	; select bank0
  1402  08DE  0923               	comf	?_abs+1,w
  1403  08DF  0021               	movlb	1	; select bank1
  1404  08E0  00E9               	movwf	(??_main^(0+128)+1)
  1405  08E1  0AE8               	incf	??_main^(0+128),f
  1406  08E2  1903               	skipnz
  1407  08E3  0AE9               	incf	(??_main^(0+128)+1),f
  1408  08E4  0868               	movf	??_main^(0+128),w
  1409  08E5  0020               	movlb	0	; select bank0
  1410  08E6  00E5               	movwf	calculate_pidM@set
  1411  08E7  0021               	movlb	1	; select bank1
  1412  08E8  0869               	movf	(??_main+1)^(0+128),w
  1413  08E9  0020               	movlb	0	; select bank0
  1414  08EA  00E6               	movwf	calculate_pidM@set+1
  1415  08EB  3180  20DD  3188   	fcall	_calculate_pidM
  1416  08EE  29DA               	goto	L4
  1417  08EF                     l3780:	
  1418                           ;main.c: 429: };main.c: 430: };main.c: 431: };main.c: 432: break;
  1419                           
  1420                           ;main.c: 428: I2C_buffer.data.START_STOP = 0;
  1421                           
  1422                           ;main.c: 427: M_control(0);
  1423                           
  1424                           ;main.c: 426: loadDistance = 0;
  1425                           
  1426                           ;main.c: 425: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1427                           
  1428                           
  1429                           ;main.c: 434: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1430  08EF  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1431  08F0  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1432  08F1  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1433  08F2  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1434  08F3  1D03               	btfss	3,2
  1435  08F4  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1436  08F5  2904               	goto	l3790
  1437  08F6  300F               	movlw	15
  1438                           
  1439                           ;main.c: 435: loadDistance = 1;
  1440  08F7  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1441                           
  1442                           ;main.c: 436: auxDistance = I2C_buffer.data.DISTANCE;
  1443  08F8  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1444  08F9  0086               	movwf	6
  1445  08FA  0187               	clrf	7
  1446  08FB  3F40               	moviw [0]fsr1
  1447  08FC  0020               	movlb	0	; select bank0
  1448  08FD  00EB               	movwf	_auxDistance
  1449  08FE  3F41               	moviw [1]fsr1
  1450  08FF  00EC               	movwf	_auxDistance+1
  1451  0900  3F42               	moviw [2]fsr1
  1452  0901  00ED               	movwf	_auxDistance+2
  1453  0902  3F43               	moviw [3]fsr1
  1454  0903  2A0D               	goto	L1
  1455  0904                     l3790:	
  1456                           ;main.c: 438: } else {
  1457                           
  1458                           ;main.c: 437: I2C_buffer.data.DISTANCE = 0;
  1459                           
  1460                           
  1461                           ;main.c: 439: calculate_pidM(calculate_pidA(auxDistance));
  1462  0904  0020               	movlb	0	; select bank0
  1463  0905  086E               	movf	_auxDistance+3,w
  1464  0906  00E2               	movwf	calculate_pidA@set+3
  1465  0907  086D               	movf	_auxDistance+2,w
  1466  0908  00E1               	movwf	calculate_pidA@set+2
  1467  0909  086C               	movf	_auxDistance+1,w
  1468  090A  00E0               	movwf	calculate_pidA@set+1
  1469  090B  086B               	movf	_auxDistance,w
  1470  090C  00DF               	movwf	calculate_pidA@set
  1471  090D  23ED               	fcall	_calculate_pidA
  1472  090E  0860               	movf	?_calculate_pidA+1,w
  1473  090F  00E6               	movwf	calculate_pidM@set+1
  1474  0910  085F               	movf	?_calculate_pidA,w
  1475  0911  00E5               	movwf	calculate_pidM@set
  1476  0912  3180  20DD  3188   	fcall	_calculate_pidM
  1477                           
  1478                           ;main.c: 440: if (auxDistance>= I2C_buffer.data.DISTANCE - 5 && auxDistance <= I2C_buffe
      +                          r.data.DISTANCE + 5) {
  1479  0915  30FB               	movlw	251
  1480  0916  0021               	movlb	1	; select bank1
  1481  0917  00E8               	movwf	??_main^(0+128)
  1482  0918  30FF               	movlw	255
  1483  0919  00E9               	movwf	(??_main^(0+128)+1)
  1484  091A  00EA               	movwf	(??_main^(0+128)+2)
  1485  091B  00EB               	movwf	(??_main^(0+128)+3)
  1486  091C  30AF               	movlw	((low (_I2C_buffer| 0))& (0+255)+15)
  1487  091D  0086               	movwf	6
  1488  091E  0187               	clrf	7
  1489  091F  3F40               	moviw [0]fsr1
  1490  0920  07E8               	addwf	??_main^(0+128),f
  1491  0921  3F41               	moviw [1]fsr1
  1492  0922  3DE9               	addwfc	(??_main^(0+128)+1),f
  1493  0923  3F42               	moviw [2]fsr1
  1494  0924  3DEA               	addwfc	(??_main^(0+128)+2),f
  1495  0925  3F43               	moviw [3]fsr1
  1496  0926  3DEB               	addwfc	(??_main^(0+128)+3),f
  1497  0927  0020               	movlb	0	; select bank0
  1498  0928  086E               	movf	_auxDistance+3,w
  1499  0929  3A80               	xorlw	128
  1500  092A  0021               	movlb	1	; select bank1
  1501  092B  00EC               	movwf	(??_main+4)^(0+128)
  1502  092C  086B               	movf	(??_main+3)^(0+128),w
  1503  092D  3A80               	xorlw	128
  1504  092E  026C               	subwf	(??_main+4)^(0+128),w
  1505  092F  0020               	movlb	0	; select bank0
  1506  0930  1D03               	skipz
  1507  0931  2942               	goto	u4563
  1508  0932  0021               	movlb	1	; select bank1
  1509  0933  086A               	movf	(??_main+2)^(0+128),w
  1510  0934  0020               	movlb	0	; select bank0
  1511  0935  026D               	subwf	_auxDistance+2,w
  1512  0936  1D03               	skipz
  1513  0937  2942               	goto	u4563
  1514  0938  0021               	movlb	1	; select bank1
  1515  0939  0869               	movf	(??_main+1)^(0+128),w
  1516  093A  0020               	movlb	0	; select bank0
  1517  093B  026C               	subwf	_auxDistance+1,w
  1518  093C  1D03               	skipz
  1519  093D  2942               	goto	u4563
  1520  093E  0021               	movlb	1	; select bank1
  1521  093F  0868               	movf	??_main^(0+128),w
  1522  0940  0020               	movlb	0	; select bank0
  1523  0941  026B               	subwf	_auxDistance,w
  1524  0942                     u4563:	
  1525  0942  1C03               	skipc
  1526  0943  2A95               	goto	l3866
  1527  0944  3005               	movlw	5
  1528  0945  0021               	movlb	1	; select bank1
  1529  0946  00E8               	movwf	??_main^(0+128)
  1530  0947  300F               	movlw	15
  1531  0948  01E9               	clrf	(??_main^(0+128)+1)
  1532  0949  01EA               	clrf	(??_main^(0+128)+2)
  1533  094A  01EB               	clrf	(??_main^(0+128)+3)
  1534  094B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1535  094C  0086               	movwf	6
  1536  094D  0187               	clrf	7
  1537  094E  3F40               	moviw [0]fsr1
  1538  094F  07E8               	addwf	??_main^(0+128),f
  1539  0950  3F41               	moviw [1]fsr1
  1540  0951  3DE9               	addwfc	(??_main^(0+128)+1),f
  1541  0952  3F42               	moviw [2]fsr1
  1542  0953  3DEA               	addwfc	(??_main^(0+128)+2),f
  1543  0954  3F43               	moviw [3]fsr1
  1544  0955  2A65               	goto	L3
  1545  0956                     l3802:	
  1546                           ;main.c: 443: I2C_buffer.data.START_STOP = 0;
  1547                           
  1548                           ;main.c: 442: M_control(0);
  1549                           
  1550                           ;main.c: 441: loadDistance = 0;
  1551                           
  1552                           
  1553                           ;main.c: 448: pre_pidM(I2C_buffer.data.SPEED);
  1554  0956  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1555  0957  0020               	movlb	0	; select bank0
  1556  0958  00E8               	movwf	pre_pidM@set+1
  1557  0959  0021               	movlb	1	; select bank1
  1558  095A  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1559  095B  0020               	movlb	0	; select bank0
  1560  095C  00E7               	movwf	pre_pidM@set
  1561  095D  2698  3188         	fcall	_pre_pidM
  1562                           
  1563                           ;main.c: 449: break;
  1564  095F  2A95               	goto	l3866
  1565  0960                     l3804:	
  1566                           
  1567                           ;main.c: 451: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1568  0960  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1569  0961  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1570  0962  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1571  0963  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1572  0964  1D03               	btfss	3,2
  1573  0965  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1574  0966  2975               	goto	l3814
  1575  0967  300F               	movlw	15
  1576                           
  1577                           ;main.c: 452: loadDistance = 1;
  1578  0968  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1579                           
  1580                           ;main.c: 453: auxDistance = I2C_buffer.data.DISTANCE;
  1581  0969  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1582  096A  0086               	movwf	6
  1583  096B  0187               	clrf	7
  1584  096C  3F40               	moviw [0]fsr1
  1585  096D  0020               	movlb	0	; select bank0
  1586  096E  00EB               	movwf	_auxDistance
  1587  096F  3F41               	moviw [1]fsr1
  1588  0970  00EC               	movwf	_auxDistance+1
  1589  0971  3F42               	moviw [2]fsr1
  1590  0972  00ED               	movwf	_auxDistance+2
  1591  0973  3F43               	moviw [3]fsr1
  1592  0974  2A0D               	goto	L1
  1593  0975                     l3814:	
  1594                           ;main.c: 455: } else {
  1595                           
  1596                           ;main.c: 454: I2C_buffer.data.DISTANCE = 0;
  1597                           
  1598                           
  1599                           ;main.c: 456: if (auxDistance > 0) {
  1600  0975  0020               	movlb	0	; select bank0
  1601  0976  1BEE               	btfsc	_auxDistance+3,7
  1602  0977  29BA               	goto	l3826
  1603  0978  086E               	movf	_auxDistance+3,w
  1604  0979  1D03               	btfss	3,2
  1605  097A  2985               	goto	l3816
  1606  097B  086D               	movf	_auxDistance+2,w
  1607  097C  1D03               	btfss	3,2
  1608  097D  2985               	goto	l3816
  1609  097E  086C               	movf	_auxDistance+1,w
  1610  097F  1D03               	btfss	3,2
  1611  0980  2985               	goto	l3816
  1612  0981  3001               	movlw	1
  1613  0982  026B               	subwf	_auxDistance,w
  1614  0983  1C03               	btfss	3,0
  1615  0984  29BA               	goto	l3826
  1616  0985                     l3816:	
  1617                           
  1618                           ;main.c: 457: pre_pidM(abs(I2C_buffer.data.SPEED));
  1619  0985  0021               	movlb	1	; select bank1
  1620  0986  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1621  0987  0020               	movlb	0	; select bank0
  1622  0988  00A3               	movwf	abs@a+1
  1623  0989  0021               	movlb	1	; select bank1
  1624  098A  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1625  098B  0020               	movlb	0	; select bank0
  1626  098C  00A2               	movwf	abs@a
  1627  098D  268A  3188         	fcall	_abs
  1628  098F  0823               	movf	?_abs+1,w
  1629  0990  00E8               	movwf	pre_pidM@set+1
  1630  0991  0822               	movf	?_abs,w
  1631  0992  00E7               	movwf	pre_pidM@set
  1632  0993  2698  3188         	fcall	_pre_pidM
  1633                           
  1634                           ;main.c: 458: if (auxDistance <= I2C_buffer.data.DISTANCE) {
  1635  0995  0021               	movlb	1	; select bank1
  1636  0996  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1637  0997  3A80               	xorlw	128
  1638  0998  00E8               	movwf	??_main^(0+128)
  1639  0999  0020               	movlb	0	; select bank0
  1640  099A  086E               	movf	_auxDistance+3,w
  1641  099B  3A80               	xorlw	128
  1642  099C  0021               	movlb	1	; select bank1
  1643  099D  0268               	subwf	??_main^(0+128),w
  1644  099E  1D03               	skipz
  1645  099F  29B0               	goto	u4613
  1646  09A0  0020               	movlb	0	; select bank0
  1647  09A1  086D               	movf	_auxDistance+2,w
  1648  09A2  0021               	movlb	1	; select bank1
  1649  09A3  0231               	subwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1650  09A4  1D03               	skipz
  1651  09A5  29B0               	goto	u4613
  1652  09A6  0020               	movlb	0	; select bank0
  1653  09A7  086C               	movf	_auxDistance+1,w
  1654  09A8  0021               	movlb	1	; select bank1
  1655  09A9  0230               	subwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1656  09AA  1D03               	skipz
  1657  09AB  29B0               	goto	u4613
  1658  09AC  0020               	movlb	0	; select bank0
  1659  09AD  086B               	movf	_auxDistance,w
  1660  09AE  0021               	movlb	1	; select bank1
  1661  09AF  022F               	subwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1662  09B0                     u4613:	
  1663  09B0  1C03               	skipc
  1664  09B1  29BA               	goto	l3826
  1665                           
  1666                           ;main.c: 459: loadDistance = 0;
  1667  09B2  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1668                           
  1669                           ;main.c: 460: M_control(0);
  1670  09B3  0020               	movlb	0	; select bank0
  1671  09B4  01AC               	clrf	M_control@ctr
  1672  09B5  01AD               	clrf	M_control@ctr+1
  1673  09B6  23B6  3188         	fcall	_M_control
  1674                           
  1675                           ;main.c: 461: I2C_buffer.data.START_STOP = 0;
  1676  09B8  0021               	movlb	1	; select bank1
  1677  09B9  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1678  09BA                     l3826:	
  1679                           
  1680                           ;main.c: 462: };main.c: 463: };main.c: 464: if (auxDistance < 0) {
  1681  09BA  0020               	movlb	0	; select bank0
  1682  09BB  1FEE               	btfss	_auxDistance+3,7
  1683  09BC  2A95               	goto	l3866
  1684                           
  1685                           ;main.c: 465: pre_pidM(abs(I2C_buffer.data.SPEED)*-1);
  1686  09BD  0021               	movlb	1	; select bank1
  1687  09BE  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  1688  09BF  0020               	movlb	0	; select bank0
  1689  09C0  00A3               	movwf	abs@a+1
  1690  09C1  0021               	movlb	1	; select bank1
  1691  09C2  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  1692  09C3  0020               	movlb	0	; select bank0
  1693  09C4  00A2               	movwf	abs@a
  1694  09C5  268A  3188         	fcall	_abs
  1695  09C7  0922               	comf	?_abs,w
  1696  09C8  0021               	movlb	1	; select bank1
  1697  09C9  00E8               	movwf	??_main^(0+128)
  1698  09CA  0020               	movlb	0	; select bank0
  1699  09CB  0923               	comf	?_abs+1,w
  1700  09CC  0021               	movlb	1	; select bank1
  1701  09CD  00E9               	movwf	(??_main^(0+128)+1)
  1702  09CE  0AE8               	incf	??_main^(0+128),f
  1703  09CF  1903               	skipnz
  1704  09D0  0AE9               	incf	(??_main^(0+128)+1),f
  1705  09D1  0868               	movf	??_main^(0+128),w
  1706  09D2  0020               	movlb	0	; select bank0
  1707  09D3  00E7               	movwf	pre_pidM@set
  1708  09D4  0021               	movlb	1	; select bank1
  1709  09D5  0869               	movf	(??_main+1)^(0+128),w
  1710  09D6  0020               	movlb	0	; select bank0
  1711  09D7  00E8               	movwf	pre_pidM@set+1
  1712  09D8  2698  3188         	fcall	_pre_pidM
  1713  09DA                     L4:	
  1714                           
  1715                           ;main.c: 466: if (auxDistance >= I2C_buffer.data.DISTANCE) {
  1716  09DA  0020               	movlb	0	; select bank0
  1717  09DB  086E               	movf	_auxDistance+3,w
  1718  09DC  3A80               	xorlw	128
  1719  09DD  0021               	movlb	1	; select bank1
  1720  09DE  00E8               	movwf	??_main^(0+128)
  1721  09DF  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1722  09E0  3A80               	xorlw	128
  1723  09E1  0268               	subwf	??_main^(0+128),w
  1724  09E2  0020               	movlb	0	; select bank0
  1725  09E3  1D03               	skipz
  1726  09E4  29F5               	goto	u4633
  1727  09E5  0021               	movlb	1	; select bank1
  1728  09E6  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1729  09E7  0020               	movlb	0	; select bank0
  1730  09E8  026D               	subwf	_auxDistance+2,w
  1731  09E9  1D03               	skipz
  1732  09EA  29F5               	goto	u4633
  1733  09EB  0021               	movlb	1	; select bank1
  1734  09EC  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1735  09ED  0020               	movlb	0	; select bank0
  1736  09EE  026C               	subwf	_auxDistance+1,w
  1737  09EF  1D03               	skipz
  1738  09F0  29F5               	goto	u4633
  1739  09F1  0021               	movlb	1	; select bank1
  1740  09F2  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  1741  09F3  0020               	movlb	0	; select bank0
  1742  09F4  026B               	subwf	_auxDistance,w
  1743  09F5                     u4633:	
  1744  09F5  1C03               	skipc
  1745  09F6  2A95               	goto	l3866
  1746                           
  1747                           ;main.c: 467: loadDistance = 0;
  1748  09F7  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1749  09F8  2A84               	goto	L2
  1750  09F9                     l3838:	
  1751                           ;main.c: 469: I2C_buffer.data.START_STOP = 0;
  1752                           
  1753                           ;main.c: 468: M_control(0);
  1754                           
  1755                           
  1756                           ;main.c: 475: if (I2C_buffer.data.DISTANCE != 0 && loadDistance == 0) {
  1757  09F9  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  1758  09FA  0431               	iorwf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  1759  09FB  0430               	iorwf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  1760  09FC  042F               	iorwf	(_I2C_buffer^(0+128)+15),w	;volatile
  1761  09FD  1D03               	btfss	3,2
  1762  09FE  187D               	btfsc	_loadDistance/(0+8),_loadDistance& (0+7)
  1763  09FF  2A14               	goto	l3848
  1764  0A00  300F               	movlw	15
  1765                           
  1766                           ;main.c: 476: loadDistance = 1;
  1767  0A01  147D               	bsf	_loadDistance/(0+8),_loadDistance& (0+7)
  1768                           
  1769                           ;main.c: 477: auxDistance = I2C_buffer.data.DISTANCE;
  1770  0A02  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1771  0A03  0086               	movwf	6
  1772  0A04  0187               	clrf	7
  1773  0A05  3F40               	moviw [0]fsr1
  1774  0A06  0020               	movlb	0	; select bank0
  1775  0A07  00EB               	movwf	_auxDistance
  1776  0A08  3F41               	moviw [1]fsr1
  1777  0A09  00EC               	movwf	_auxDistance+1
  1778  0A0A  3F42               	moviw [2]fsr1
  1779  0A0B  00ED               	movwf	_auxDistance+2
  1780  0A0C  3F43               	moviw [3]fsr1
  1781  0A0D                     L1:	
  1782  0A0D  00EE               	movwf	_auxDistance+3
  1783                           
  1784                           ;main.c: 478: I2C_buffer.data.DISTANCE = 0;
  1785  0A0E  0021               	movlb	1	; select bank1
  1786  0A0F  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  1787  0A10  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  1788  0A11  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  1789  0A12  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  1790                           
  1791                           ;main.c: 479: } else {
  1792  0A13  2A95               	goto	l3866
  1793  0A14                     l3848:	
  1794                           
  1795                           ;main.c: 480: pre_pidM(calculate_pidA(auxDistance));
  1796  0A14  0020               	movlb	0	; select bank0
  1797  0A15  086E               	movf	_auxDistance+3,w
  1798  0A16  00E2               	movwf	calculate_pidA@set+3
  1799  0A17  086D               	movf	_auxDistance+2,w
  1800  0A18  00E1               	movwf	calculate_pidA@set+2
  1801  0A19  086C               	movf	_auxDistance+1,w
  1802  0A1A  00E0               	movwf	calculate_pidA@set+1
  1803  0A1B  086B               	movf	_auxDistance,w
  1804  0A1C  00DF               	movwf	calculate_pidA@set
  1805  0A1D  23ED  3188         	fcall	_calculate_pidA
  1806  0A1F  0860               	movf	?_calculate_pidA+1,w
  1807  0A20  00E8               	movwf	pre_pidM@set+1
  1808  0A21  085F               	movf	?_calculate_pidA,w
  1809  0A22  00E7               	movwf	pre_pidM@set
  1810  0A23  2698  3188         	fcall	_pre_pidM
  1811                           
  1812                           ;main.c: 481: if (auxDistance>= I2C_buffer.data.DISTANCE - 5 && auxDistance <= I2C_buffe
      +                          r.data.DISTANCE + 5) {
  1813  0A25  30FB               	movlw	251
  1814  0A26  0021               	movlb	1	; select bank1
  1815  0A27  00E8               	movwf	??_main^(0+128)
  1816  0A28  30FF               	movlw	255
  1817  0A29  00E9               	movwf	(??_main^(0+128)+1)
  1818  0A2A  00EA               	movwf	(??_main^(0+128)+2)
  1819  0A2B  00EB               	movwf	(??_main^(0+128)+3)
  1820  0A2C  30AF               	movlw	((low (_I2C_buffer| 0))& (0+255)+15)
  1821  0A2D  0086               	movwf	6
  1822  0A2E  0187               	clrf	7
  1823  0A2F  3F40               	moviw [0]fsr1
  1824  0A30  07E8               	addwf	??_main^(0+128),f
  1825  0A31  3F41               	moviw [1]fsr1
  1826  0A32  3DE9               	addwfc	(??_main^(0+128)+1),f
  1827  0A33  3F42               	moviw [2]fsr1
  1828  0A34  3DEA               	addwfc	(??_main^(0+128)+2),f
  1829  0A35  3F43               	moviw [3]fsr1
  1830  0A36  3DEB               	addwfc	(??_main^(0+128)+3),f
  1831  0A37  0020               	movlb	0	; select bank0
  1832  0A38  086E               	movf	_auxDistance+3,w
  1833  0A39  3A80               	xorlw	128
  1834  0A3A  0021               	movlb	1	; select bank1
  1835  0A3B  00EC               	movwf	(??_main+4)^(0+128)
  1836  0A3C  086B               	movf	(??_main+3)^(0+128),w
  1837  0A3D  3A80               	xorlw	128
  1838  0A3E  026C               	subwf	(??_main+4)^(0+128),w
  1839  0A3F  0020               	movlb	0	; select bank0
  1840  0A40  1D03               	skipz
  1841  0A41  2A52               	goto	u4663
  1842  0A42  0021               	movlb	1	; select bank1
  1843  0A43  086A               	movf	(??_main+2)^(0+128),w
  1844  0A44  0020               	movlb	0	; select bank0
  1845  0A45  026D               	subwf	_auxDistance+2,w
  1846  0A46  1D03               	skipz
  1847  0A47  2A52               	goto	u4663
  1848  0A48  0021               	movlb	1	; select bank1
  1849  0A49  0869               	movf	(??_main+1)^(0+128),w
  1850  0A4A  0020               	movlb	0	; select bank0
  1851  0A4B  026C               	subwf	_auxDistance+1,w
  1852  0A4C  1D03               	skipz
  1853  0A4D  2A52               	goto	u4663
  1854  0A4E  0021               	movlb	1	; select bank1
  1855  0A4F  0868               	movf	??_main^(0+128),w
  1856  0A50  0020               	movlb	0	; select bank0
  1857  0A51  026B               	subwf	_auxDistance,w
  1858  0A52                     u4663:	
  1859  0A52  1C03               	skipc
  1860  0A53  2A95               	goto	l3866
  1861  0A54  3005               	movlw	5
  1862  0A55  0021               	movlb	1	; select bank1
  1863  0A56  00E8               	movwf	??_main^(0+128)
  1864  0A57  300F               	movlw	15
  1865  0A58  01E9               	clrf	(??_main^(0+128)+1)
  1866  0A59  01EA               	clrf	(??_main^(0+128)+2)
  1867  0A5A  01EB               	clrf	(??_main^(0+128)+3)
  1868  0A5B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1869  0A5C  0086               	movwf	6
  1870  0A5D  0187               	clrf	7
  1871  0A5E  3F40               	moviw [0]fsr1
  1872  0A5F  07E8               	addwf	??_main^(0+128),f
  1873  0A60  3F41               	moviw [1]fsr1
  1874  0A61  3DE9               	addwfc	(??_main^(0+128)+1),f
  1875  0A62  3F42               	moviw [2]fsr1
  1876  0A63  3DEA               	addwfc	(??_main^(0+128)+2),f
  1877  0A64  3F43               	moviw [3]fsr1
  1878  0A65                     L3:	
  1879  0A65  3DEB               	addwfc	(??_main^(0+128)+3),f
  1880  0A66  086B               	movf	(??_main+3)^(0+128),w
  1881  0A67  3A80               	xorlw	128
  1882  0A68  00EC               	movwf	(??_main+4)^(0+128)
  1883  0A69  0020               	movlb	0	; select bank0
  1884  0A6A  086E               	movf	_auxDistance+3,w
  1885  0A6B  3A80               	xorlw	128
  1886  0A6C  0021               	movlb	1	; select bank1
  1887  0A6D  026C               	subwf	(??_main+4)^(0+128),w
  1888  0A6E  1D03               	skipz
  1889  0A6F  2A80               	goto	u4673
  1890  0A70  0020               	movlb	0	; select bank0
  1891  0A71  086D               	movf	_auxDistance+2,w
  1892  0A72  0021               	movlb	1	; select bank1
  1893  0A73  026A               	subwf	(??_main+2)^(0+128),w
  1894  0A74  1D03               	skipz
  1895  0A75  2A80               	goto	u4673
  1896  0A76  0020               	movlb	0	; select bank0
  1897  0A77  086C               	movf	_auxDistance+1,w
  1898  0A78  0021               	movlb	1	; select bank1
  1899  0A79  0269               	subwf	(??_main+1)^(0+128),w
  1900  0A7A  1D03               	skipz
  1901  0A7B  2A80               	goto	u4673
  1902  0A7C  0020               	movlb	0	; select bank0
  1903  0A7D  086B               	movf	_auxDistance,w
  1904  0A7E  0021               	movlb	1	; select bank1
  1905  0A7F  0268               	subwf	??_main^(0+128),w
  1906  0A80                     u4673:	
  1907  0A80  1C03               	skipc
  1908  0A81  2A95               	goto	l3866
  1909                           
  1910                           ;main.c: 482: loadDistance = 0;
  1911  0A82  107D               	bcf	_loadDistance/(0+8),_loadDistance& (0+7)
  1912                           
  1913                           ;main.c: 483: M_control(0);
  1914  0A83  0020               	movlb	0	; select bank0
  1915  0A84                     L2:	
  1916  0A84  01AC               	clrf	M_control@ctr
  1917  0A85  01AD               	clrf	M_control@ctr+1
  1918  0A86  23B6  3188         	fcall	_M_control
  1919                           
  1920                           ;main.c: 484: I2C_buffer.data.START_STOP = 0;
  1921  0A88  0021               	movlb	1	; select bank1
  1922  0A89  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  1923  0A8A  2A95               	goto	l3866
  1924  0A8B                     l3864:	
  1925  0A8B  0824               	movf	(_I2C_buffer^(0+128)+4),w	;volatile
  1926                           
  1927                           ; Switch size 1, requested type "speed"
  1928                           ; Number of cases is 8, Range of values is 0 to 7
  1929                           ; switch strategies available:
  1930                           ; Name         Instructions Cycles
  1931                           ; direct_byte           22     6 (fixed)
  1932                           ; simple_byte           25    13 (average)
  1933                           ; jumptable            260     6 (fixed)
  1934                           ;	Chosen strategy is direct_byte
  1935  0A8C  0084               	movwf	4
  1936  0A8D  3008               	movlw	8
  1937  0A8E  0204               	subwf	4,w
  1938  0A8F  1803               	skipnc
  1939  0A90  2859               	goto	l3740
  1940  0A91  3186               	movlp	high S3926
  1941  0A92  3504               	lslf	4,w
  1942  0A93  3E9C               	addlw	low S3926
  1943  0A94  0082               	movwf	2
  1944  0A95                     l3866:	
  1945                           
  1946                           ;main.c: 492: _delay((unsigned long)((5)*(32000000/4000.0)));
  1947  0A95  3034               	movlw	52
  1948  0A96  0021               	movlb	1	; select bank1
  1949  0A97  00E8               	movwf	??_main^(0+128)
  1950  0A98  30F1               	movlw	241
  1951  0A99                     u4717:	
  1952  0A99  0B89               	decfsz	9,f
  1953  0A9A  2A99               	goto	u4717
  1954  0A9B  0BE8               	decfsz	??_main^(0+128),f
  1955  0A9C  2A99               	goto	u4717
  1956  0A9D  3200               	nop2
  1957                           
  1958                           ;main.c: 493: } else {
  1959  0A9E  2AB5               	goto	l3878
  1960  0A9F                     l3868:	
  1961                           
  1962                           ;main.c: 494: M_control(0);
  1963  0A9F  0020               	movlb	0	; select bank0
  1964  0AA0  01AC               	clrf	M_control@ctr
  1965  0AA1  01AD               	clrf	M_control@ctr+1
  1966  0AA2  23B6  3188         	fcall	_M_control
  1967                           
  1968                           ;main.c: 495: accumulatorM = 0;
  1969  0AA4  0022               	movlb	2	; select bank2
  1970  0AA5  01AC               	clrf	_accumulatorM^(0+256)
  1971  0AA6  01AD               	clrf	(_accumulatorM+1)^(0+256)
  1972  0AA7  01AE               	clrf	(_accumulatorM+2)^(0+256)
  1973  0AA8  01AF               	clrf	(_accumulatorM+3)^(0+256)
  1974                           
  1975                           ;main.c: 496: lasterrorM = 0;
  1976  0AA9  01A8               	clrf	_lasterrorM^(0+256)
  1977  0AAA  01A9               	clrf	(_lasterrorM+1)^(0+256)
  1978  0AAB  01AA               	clrf	(_lasterrorM+2)^(0+256)
  1979  0AAC  01AB               	clrf	(_lasterrorM+3)^(0+256)
  1980                           
  1981                           ;main.c: 497: accumulatorA = 0;
  1982  0AAD  01A4               	clrf	_accumulatorA^(0+256)
  1983  0AAE  01A5               	clrf	(_accumulatorA+1)^(0+256)
  1984  0AAF  01A6               	clrf	(_accumulatorA+2)^(0+256)
  1985  0AB0  01A7               	clrf	(_accumulatorA+3)^(0+256)
  1986                           
  1987                           ;main.c: 498: lasterrorA = 0;
  1988  0AB1  01A0               	clrf	_lasterrorA^(0+256)
  1989  0AB2  01A1               	clrf	(_lasterrorA+1)^(0+256)
  1990  0AB3  01A2               	clrf	(_lasterrorA+2)^(0+256)
  1991  0AB4  01A3               	clrf	(_lasterrorA+3)^(0+256)
  1992  0AB5                     l3878:	
  1993                           
  1994                           ;main.c: 499: };main.c: 500: if (I2C_buffer.data.RESET == 1) {
  1995  0AB5  0021               	movlb	1	; select bank1
  1996  0AB6  0B26               	decfsz	(_I2C_buffer^(0+128)+6),w	;volatile
  1997  0AB7  2AB9               	goto	l3882
  1998  0AB8  0001               	reset	;# 
  1999  0AB9                     l3882:	
  2000                           
  2001                           ;main.c: 502: };main.c: 503: if (I2C_buffer.data.SAVE == 1) {
  2002  0AB9  0021               	movlb	1	; select bank1
  2003  0ABA  0B25               	decfsz	(_I2C_buffer^(0+128)+5),w	;volatile
  2004  0ABB  2854               	goto	l158
  2005                           
  2006                           ;main.c: 504: eeprom_write(0, I2C_buffer.data.ADDRESS);
  2007  0ABC  0821               	movf	(_I2C_buffer^(0+128)+1),w	;volatile
  2008  0ABD  0020               	movlb	0	; select bank0
  2009  0ABE  00A2               	movwf	eeprom_write@value
  2010  0ABF  3000               	movlw	0
  2011  0AC0  2399  3188         	fcall	_eeprom_write
  2012                           
  2013                           ;main.c: 505: eeprom_write(1, I2C_buffer.data.IOWPU);
  2014  0AC2  0021               	movlb	1	; select bank1
  2015  0AC3  0823               	movf	(_I2C_buffer^(0+128)+3),w	;volatile
  2016  0AC4  0020               	movlb	0	; select bank0
  2017  0AC5  00A2               	movwf	eeprom_write@value
  2018  0AC6  3001               	movlw	1
  2019  0AC7  2399  3188         	fcall	_eeprom_write
  2020                           
  2021                           ;main.c: 506: eeprom_write(2, I2C_buffer.byte[0x07]);
  2022  0AC9  0021               	movlb	1	; select bank1
  2023  0ACA  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  2024  0ACB  0020               	movlb	0	; select bank0
  2025  0ACC  00A2               	movwf	eeprom_write@value
  2026  0ACD  3002               	movlw	2
  2027  0ACE  2399  3188         	fcall	_eeprom_write
  2028                           
  2029                           ;main.c: 507: eeprom_write(3, I2C_buffer.byte[0x08]);
  2030  0AD0  0021               	movlb	1	; select bank1
  2031  0AD1  0828               	movf	(_I2C_buffer^(0+128)+8),w	;volatile
  2032  0AD2  0020               	movlb	0	; select bank0
  2033  0AD3  00A2               	movwf	eeprom_write@value
  2034  0AD4  3003               	movlw	3
  2035  0AD5  2399  3188         	fcall	_eeprom_write
  2036                           
  2037                           ;main.c: 508: eeprom_write(4, I2C_buffer.byte[0x09]);
  2038  0AD7  0021               	movlb	1	; select bank1
  2039  0AD8  0829               	movf	(_I2C_buffer^(0+128)+9),w	;volatile
  2040  0AD9  0020               	movlb	0	; select bank0
  2041  0ADA  00A2               	movwf	eeprom_write@value
  2042  0ADB  3004               	movlw	4
  2043  0ADC  2399  3188         	fcall	_eeprom_write
  2044                           
  2045                           ;main.c: 509: eeprom_write(5, I2C_buffer.byte[0x0A]);
  2046  0ADE  0021               	movlb	1	; select bank1
  2047  0ADF  082A               	movf	(_I2C_buffer^(0+128)+10),w	;volatile
  2048  0AE0  0020               	movlb	0	; select bank0
  2049  0AE1  00A2               	movwf	eeprom_write@value
  2050  0AE2  3005               	movlw	5
  2051  0AE3  2399  3188         	fcall	_eeprom_write
  2052                           
  2053                           ;main.c: 510: eeprom_write(8, I2C_buffer.byte[0x13]);
  2054  0AE5  0021               	movlb	1	; select bank1
  2055  0AE6  0833               	movf	(_I2C_buffer^(0+128)+19),w	;volatile
  2056  0AE7  0020               	movlb	0	; select bank0
  2057  0AE8  00A2               	movwf	eeprom_write@value
  2058  0AE9  3008               	movlw	8
  2059  0AEA  2399  3188         	fcall	_eeprom_write
  2060                           
  2061                           ;main.c: 511: eeprom_write(9, I2C_buffer.byte[0x14]);
  2062  0AEC  0021               	movlb	1	; select bank1
  2063  0AED  0834               	movf	(_I2C_buffer^(0+128)+20),w	;volatile
  2064  0AEE  0020               	movlb	0	; select bank0
  2065  0AEF  00A2               	movwf	eeprom_write@value
  2066  0AF0  3009               	movlw	9
  2067  0AF1  2399  3188         	fcall	_eeprom_write
  2068                           
  2069                           ;main.c: 512: eeprom_write(10, I2C_buffer.byte[0x15]);
  2070  0AF3  0021               	movlb	1	; select bank1
  2071  0AF4  0835               	movf	(_I2C_buffer^(0+128)+21),w	;volatile
  2072  0AF5  0020               	movlb	0	; select bank0
  2073  0AF6  00A2               	movwf	eeprom_write@value
  2074  0AF7  300A               	movlw	10
  2075  0AF8  2399  3188         	fcall	_eeprom_write
  2076                           
  2077                           ;main.c: 513: eeprom_write(11, I2C_buffer.byte[0x16]);
  2078  0AFA  0021               	movlb	1	; select bank1
  2079  0AFB  0836               	movf	(_I2C_buffer^(0+128)+22),w	;volatile
  2080  0AFC  0020               	movlb	0	; select bank0
  2081  0AFD  00A2               	movwf	eeprom_write@value
  2082  0AFE  300B               	movlw	11
  2083  0AFF  2399  3188         	fcall	_eeprom_write
  2084                           
  2085                           ;main.c: 514: eeprom_write(12, I2C_buffer.byte[0x17]);
  2086  0B01  0021               	movlb	1	; select bank1
  2087  0B02  0837               	movf	(_I2C_buffer^(0+128)+23),w	;volatile
  2088  0B03  0020               	movlb	0	; select bank0
  2089  0B04  00A2               	movwf	eeprom_write@value
  2090  0B05  300C               	movlw	12
  2091  0B06  2399  3188         	fcall	_eeprom_write
  2092                           
  2093                           ;main.c: 515: eeprom_write(13, I2C_buffer.byte[0x18]);
  2094  0B08  0021               	movlb	1	; select bank1
  2095  0B09  0838               	movf	(_I2C_buffer^(0+128)+24),w	;volatile
  2096  0B0A  0020               	movlb	0	; select bank0
  2097  0B0B  00A2               	movwf	eeprom_write@value
  2098  0B0C  300D               	movlw	13
  2099  0B0D  2399  3188         	fcall	_eeprom_write
  2100                           
  2101                           ;main.c: 516: eeprom_write(14, I2C_buffer.byte[0x19]);
  2102  0B0F  0021               	movlb	1	; select bank1
  2103  0B10  0839               	movf	(_I2C_buffer^(0+128)+25),w	;volatile
  2104  0B11  0020               	movlb	0	; select bank0
  2105  0B12  00A2               	movwf	eeprom_write@value
  2106  0B13  300E               	movlw	14
  2107  0B14  2399  3188         	fcall	_eeprom_write
  2108                           
  2109                           ;main.c: 517: eeprom_write(15, I2C_buffer.byte[0x1A]);
  2110  0B16  0021               	movlb	1	; select bank1
  2111  0B17  083A               	movf	(_I2C_buffer^(0+128)+26),w	;volatile
  2112  0B18  0020               	movlb	0	; select bank0
  2113  0B19  00A2               	movwf	eeprom_write@value
  2114  0B1A  300F               	movlw	15
  2115  0B1B  2399  3188         	fcall	_eeprom_write
  2116                           
  2117                           ;main.c: 518: eeprom_write(16, I2C_buffer.byte[0x1B]);
  2118  0B1D  0021               	movlb	1	; select bank1
  2119  0B1E  083B               	movf	(_I2C_buffer^(0+128)+27),w	;volatile
  2120  0B1F  0020               	movlb	0	; select bank0
  2121  0B20  00A2               	movwf	eeprom_write@value
  2122  0B21  3010               	movlw	16
  2123  0B22  2399  3188         	fcall	_eeprom_write
  2124                           
  2125                           ;main.c: 519: eeprom_write(17, I2C_buffer.byte[0x1C]);
  2126  0B24  0021               	movlb	1	; select bank1
  2127  0B25  083C               	movf	(_I2C_buffer^(0+128)+28),w	;volatile
  2128  0B26  0020               	movlb	0	; select bank0
  2129  0B27  00A2               	movwf	eeprom_write@value
  2130  0B28  3011               	movlw	17
  2131  0B29  2399  3188         	fcall	_eeprom_write
  2132                           
  2133                           ;main.c: 520: eeprom_write(18, I2C_buffer.byte[0x1D]);
  2134  0B2B  0021               	movlb	1	; select bank1
  2135  0B2C  083D               	movf	(_I2C_buffer^(0+128)+29),w	;volatile
  2136  0B2D  0020               	movlb	0	; select bank0
  2137  0B2E  00A2               	movwf	eeprom_write@value
  2138  0B2F  3012               	movlw	18
  2139  0B30  2399  3188         	fcall	_eeprom_write
  2140                           
  2141                           ;main.c: 521: eeprom_write(19, I2C_buffer.byte[0x1E]);
  2142  0B32  0021               	movlb	1	; select bank1
  2143  0B33  083E               	movf	(_I2C_buffer^(0+128)+30),w	;volatile
  2144  0B34  0020               	movlb	0	; select bank0
  2145  0B35  00A2               	movwf	eeprom_write@value
  2146  0B36  3013               	movlw	19
  2147  0B37  2399  3188         	fcall	_eeprom_write
  2148                           
  2149                           ;main.c: 522: eeprom_write(20, I2C_buffer.byte[0x1F]);
  2150  0B39  0021               	movlb	1	; select bank1
  2151  0B3A  083F               	movf	(_I2C_buffer^(0+128)+31),w	;volatile
  2152  0B3B  0020               	movlb	0	; select bank0
  2153  0B3C  00A2               	movwf	eeprom_write@value
  2154  0B3D  3014               	movlw	20
  2155  0B3E  2399  3188         	fcall	_eeprom_write
  2156                           
  2157                           ;main.c: 523: eeprom_write(21, I2C_buffer.byte[0x20]);
  2158  0B40  0021               	movlb	1	; select bank1
  2159  0B41  0840               	movf	(_I2C_buffer^(0+128)+32),w	;volatile
  2160  0B42  0020               	movlb	0	; select bank0
  2161  0B43  00A2               	movwf	eeprom_write@value
  2162  0B44  3015               	movlw	21
  2163  0B45  2399  3188         	fcall	_eeprom_write
  2164                           
  2165                           ;main.c: 524: eeprom_write(22, I2C_buffer.byte[0x21]);
  2166  0B47  0021               	movlb	1	; select bank1
  2167  0B48  0841               	movf	(_I2C_buffer^(0+128)+33),w	;volatile
  2168  0B49  0020               	movlb	0	; select bank0
  2169  0B4A  00A2               	movwf	eeprom_write@value
  2170  0B4B  3016               	movlw	22
  2171  0B4C  2399  3188         	fcall	_eeprom_write
  2172                           
  2173                           ;main.c: 525: eeprom_write(23, I2C_buffer.byte[0x22]);
  2174  0B4E  0021               	movlb	1	; select bank1
  2175  0B4F  0842               	movf	(_I2C_buffer^(0+128)+34),w	;volatile
  2176  0B50  0020               	movlb	0	; select bank0
  2177  0B51  00A2               	movwf	eeprom_write@value
  2178  0B52  3017               	movlw	23
  2179  0B53  2399  3188         	fcall	_eeprom_write
  2180                           
  2181                           ;main.c: 526: eeprom_write(24, I2C_buffer.byte[0x23]);
  2182  0B55  0021               	movlb	1	; select bank1
  2183  0B56  0843               	movf	(_I2C_buffer^(0+128)+35),w	;volatile
  2184  0B57  0020               	movlb	0	; select bank0
  2185  0B58  00A2               	movwf	eeprom_write@value
  2186  0B59  3018               	movlw	24
  2187  0B5A  2399  3188         	fcall	_eeprom_write
  2188                           
  2189                           ;main.c: 527: eeprom_write(25, I2C_buffer.byte[0x24]);
  2190  0B5C  0021               	movlb	1	; select bank1
  2191  0B5D  0844               	movf	(_I2C_buffer^(0+128)+36),w	;volatile
  2192  0B5E  0020               	movlb	0	; select bank0
  2193  0B5F  00A2               	movwf	eeprom_write@value
  2194  0B60  3019               	movlw	25
  2195  0B61  2399  3188         	fcall	_eeprom_write
  2196                           
  2197                           ;main.c: 528: eeprom_write(26, I2C_buffer.byte[0x25]);
  2198  0B63  0021               	movlb	1	; select bank1
  2199  0B64  0845               	movf	(_I2C_buffer^(0+128)+37),w	;volatile
  2200  0B65  0020               	movlb	0	; select bank0
  2201  0B66  00A2               	movwf	eeprom_write@value
  2202  0B67  301A               	movlw	26
  2203  0B68  2399  3188         	fcall	_eeprom_write
  2204                           
  2205                           ;main.c: 529: eeprom_write(27, I2C_buffer.byte[0x26]);
  2206  0B6A  0021               	movlb	1	; select bank1
  2207  0B6B  0846               	movf	(_I2C_buffer^(0+128)+38),w	;volatile
  2208  0B6C  0020               	movlb	0	; select bank0
  2209  0B6D  00A2               	movwf	eeprom_write@value
  2210  0B6E  301B               	movlw	27
  2211  0B6F  2399  3188         	fcall	_eeprom_write
  2212                           
  2213                           ;main.c: 530: eeprom_write(28, I2C_buffer.byte[0x27]);
  2214  0B71  0021               	movlb	1	; select bank1
  2215  0B72  0847               	movf	(_I2C_buffer^(0+128)+39),w	;volatile
  2216  0B73  0020               	movlb	0	; select bank0
  2217  0B74  00A2               	movwf	eeprom_write@value
  2218  0B75  301C               	movlw	28
  2219  0B76  2399  3188         	fcall	_eeprom_write
  2220                           
  2221                           ;main.c: 531: eeprom_write(29, I2C_buffer.byte[0x28]);
  2222  0B78  0021               	movlb	1	; select bank1
  2223  0B79  0848               	movf	(_I2C_buffer^(0+128)+40),w	;volatile
  2224  0B7A  0020               	movlb	0	; select bank0
  2225  0B7B  00A2               	movwf	eeprom_write@value
  2226  0B7C  301D               	movlw	29
  2227  0B7D  2399  3188         	fcall	_eeprom_write
  2228                           
  2229                           ;main.c: 532: eeprom_write(30, I2C_buffer.byte[0x29]);
  2230  0B7F  0021               	movlb	1	; select bank1
  2231  0B80  0849               	movf	(_I2C_buffer^(0+128)+41),w	;volatile
  2232  0B81  0020               	movlb	0	; select bank0
  2233  0B82  00A2               	movwf	eeprom_write@value
  2234  0B83  301E               	movlw	30
  2235  0B84  2399  3188         	fcall	_eeprom_write
  2236                           
  2237                           ;main.c: 533: eeprom_write(31, I2C_buffer.byte[0x2A]);
  2238  0B86  0021               	movlb	1	; select bank1
  2239  0B87  084A               	movf	(_I2C_buffer^(0+128)+42),w	;volatile
  2240  0B88  0020               	movlb	0	; select bank0
  2241  0B89  00A2               	movwf	eeprom_write@value
  2242  0B8A  301F               	movlw	31
  2243  0B8B  2399  3188         	fcall	_eeprom_write
  2244                           
  2245                           ;main.c: 534: _delay((unsigned long)((5)*(32000000/4000.0)));
  2246  0B8D  3034               	movlw	52
  2247  0B8E  0021               	movlb	1	; select bank1
  2248  0B8F  00E8               	movwf	??_main^(0+128)
  2249  0B90  30F1               	movlw	241
  2250  0B91                     u4727:	
  2251  0B91  0B89               	decfsz	9,f
  2252  0B92  2B91               	goto	u4727
  2253  0B93  0BE8               	decfsz	??_main^(0+128),f
  2254  0B94  2B91               	goto	u4727
  2255  0B95  3200               	nop2
  2256                           
  2257                           ;main.c: 535: I2C_buffer.data.SAVE = 0;
  2258  0B96  0021               	movlb	1	; select bank1
  2259  0B97  01A5               	clrf	(_I2C_buffer^(0+128)+5)	;volatile
  2260  0B98  2854               	goto	l158
  2261  0B99                     __end_of_main:	
  2262  0B99                     __ptext8:	
  2263 ;; *************** function _eeprom_write *****************
  2264 ;; Defined at:
  2265 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eewrite.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  addr            1    wreg     unsigned char 
  2268 ;;  value           1    2[BANK0 ] unsigned char 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;  addr            1    3[BANK0 ] unsigned char 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0
  2275 ;; Tracked objects:
  2276 ;;		On entry : 1F/0
  2277 ;;		On exit  : 1F/3
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2280 ;;      Params:         0       1       0       0
  2281 ;;      Locals:         0       1       0       0
  2282 ;;      Temps:          0       0       0       0
  2283 ;;      Totals:         0       2       0       0
  2284 ;;Total ram usage:        2 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    2
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_main
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function _eeprom_write
  2296  0B99                     _eeprom_write:	
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2300                           ;eeprom_write@addr stored from wreg
  2301  0B99  00A3               	movwf	eeprom_write@addr
  2302  0B9A                     l307:	
  2303                           ;__eewrite.c: 8: do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value
      +                          ); EECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } I
      +                          NTCONbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1;
      +                           EE
  2304                           
  2305  0B9A  0023               	movlb	3	; select bank3
  2306  0B9B  1895               	btfsc	21,1	;volsfr
  2307  0B9C  2B9A               	goto	l307
  2308  0B9D  0020               	movlb	0	; select bank0
  2309  0B9E  0823               	movf	eeprom_write@addr,w
  2310  0B9F  0023               	movlb	3	; select bank3
  2311  0BA0  0091               	movwf	17	;volatile
  2312  0BA1  0192               	clrf	18	;volatile
  2313  0BA2  0020               	movlb	0	; select bank0
  2314  0BA3  0822               	movf	eeprom_write@value,w
  2315  0BA4  0023               	movlb	3	; select bank3
  2316  0BA5  0093               	movwf	19	;volatile
  2317  0BA6  303F               	movlw	63
  2318  0BA7  0595               	andwf	21,f	;volsfr
  2319  0BA8  1003               	bcf	3,0	;volatile
  2320  0BA9  1B8B               	btfsc	11,7	;volatile
  2321  0BAA  1403               	bsf	3,0	;volatile
  2322  0BAB  138B               	bcf	11,7	;volatile
  2323  0BAC  1515               	bsf	21,2	;volsfr
  2324  0BAD  3055               	movlw	85
  2325  0BAE  0096               	movwf	22	;volsfr
  2326  0BAF  30AA               	movlw	170
  2327  0BB0  0096               	movwf	22	;volsfr
  2328  0BB1  1495               	bsf	21,1	;volsfr
  2329  0BB2  1115               	bcf	21,2	;volsfr
  2330  0BB3  1803               	btfsc	3,0	;volatile
  2331  0BB4  178B               	bsf	11,7	;volatile
  2332  0BB5  0008               	return
  2333  0BB6                     __end_of_eeprom_write:	
  2334  0BB6                     __ptext3:	
  2335 ;; *************** function _M_control *****************
  2336 ;; Defined at:
  2337 ;;		line 232 in file "main.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  ctr             2   12[BANK0 ] int 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 1F/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2351 ;;      Params:         0       2       0       0
  2352 ;;      Locals:         0       0       0       0
  2353 ;;      Temps:          0       1       0       0
  2354 ;;      Totals:         0       3       0       0
  2355 ;;Total ram usage:        3 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    3
  2358 ;; This function calls:
  2359 ;;		_PWM_set_duty
  2360 ;;		___wmul
  2361 ;; This function is called by:
  2362 ;;		_calculate_pidM
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _M_control
  2369  0BB6                     _M_control:	
  2370  0BB6                     l3222:	
  2371                           ;incstack = 0
  2372                           ; Regs used in _M_control: [wreg+status,2+status,0+pclath+cstack]
  2373                           
  2374                           
  2375                           ;main.c: 234: if (ctr == 0)
  2376  0BB6  082C               	movf	M_control@ctr,w
  2377  0BB7  042D               	iorwf	M_control@ctr+1,w
  2378  0BB8  1D03               	btfss	3,2
  2379  0BB9  2BC0               	goto	l3226
  2380                           
  2381                           ;main.c: 235: {;main.c: 236: PWM_set_duty(ctr);
  2382  0BBA  082D               	movf	M_control@ctr+1,w
  2383  0BBB  00A3               	movwf	PWM_set_duty@duty+1
  2384  0BBC  082C               	movf	M_control@ctr,w
  2385  0BBD  00A2               	movwf	PWM_set_duty@duty
  2386  0BBE  26EE  3188         	fcall	_PWM_set_duty
  2387  0BC0                     l3226:	
  2388                           
  2389                           ;main.c: 237: };main.c: 238: if (ctr > 0)
  2390  0BC0  0020               	movlb	0	; select bank0
  2391  0BC1  082D               	movf	M_control@ctr+1,w
  2392  0BC2  3A80               	xorlw	128
  2393  0BC3  00AE               	movwf	??_M_control
  2394  0BC4  3080               	movlw	128
  2395  0BC5  022E               	subwf	??_M_control,w
  2396  0BC6  1D03               	skipz
  2397  0BC7  2BCA               	goto	u3685
  2398  0BC8  3001               	movlw	1
  2399  0BC9  022C               	subwf	M_control@ctr,w
  2400  0BCA                     u3685:	
  2401  0BCA  1C03               	skipc
  2402  0BCB  2BD5               	goto	l3232
  2403                           
  2404                           ;main.c: 239: {;main.c: 240: LATAbits.LATA0 = 1;
  2405  0BCC  0022               	movlb	2	; select bank2
  2406  0BCD  140C               	bsf	12,0	;volatile
  2407                           
  2408                           ;main.c: 241: PWM_set_duty(ctr);
  2409  0BCE  0020               	movlb	0	; select bank0
  2410  0BCF  082D               	movf	M_control@ctr+1,w
  2411  0BD0  00A3               	movwf	PWM_set_duty@duty+1
  2412  0BD1  082C               	movf	M_control@ctr,w
  2413  0BD2  00A2               	movwf	PWM_set_duty@duty
  2414  0BD3  26EE  3188         	fcall	_PWM_set_duty
  2415  0BD5                     l3232:	
  2416                           
  2417                           ;main.c: 242: };main.c: 243: if (ctr < 0)
  2418  0BD5  0020               	movlb	0	; select bank0
  2419  0BD6  1FAD               	btfss	M_control@ctr+1,7
  2420  0BD7  0008               	return
  2421                           
  2422                           ;main.c: 244: {;main.c: 245: LATAbits.LATA0 = 0;
  2423  0BD8  0022               	movlb	2	; select bank2
  2424  0BD9  100C               	bcf	12,0	;volatile
  2425                           
  2426                           ;main.c: 246: ctr = ctr * -1;
  2427  0BDA  30FF               	movlw	255
  2428  0BDB  0020               	movlb	0	; select bank0
  2429  0BDC  00A2               	movwf	___wmul@multiplier
  2430  0BDD  00A3               	movwf	___wmul@multiplier+1
  2431  0BDE  082D               	movf	M_control@ctr+1,w
  2432  0BDF  00A5               	movwf	___wmul@multiplicand+1
  2433  0BE0  082C               	movf	M_control@ctr,w
  2434  0BE1  00A4               	movwf	___wmul@multiplicand
  2435  0BE2  2798  3188         	fcall	___wmul
  2436  0BE4  0823               	movf	?___wmul+1,w
  2437  0BE5  00AD               	movwf	M_control@ctr+1
  2438  0BE6  0822               	movf	?___wmul,w
  2439  0BE7  00AC               	movwf	M_control@ctr
  2440                           
  2441                           ;main.c: 247: PWM_set_duty(ctr);
  2442  0BE8  082D               	movf	M_control@ctr+1,w
  2443  0BE9  00A3               	movwf	PWM_set_duty@duty+1
  2444  0BEA  082C               	movf	M_control@ctr,w
  2445  0BEB  00A2               	movwf	PWM_set_duty@duty
  2446  0BEC  2EEE               	ljmp	l2972
  2447  0BED                     __end_of_M_control:	
  2448  0BED                     __ptext9:	
  2449 ;; *************** function _calculate_pidA *****************
  2450 ;; Defined at:
  2451 ;;		line 251 in file "main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  set             4   63[BANK0 ] long 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  pid             4    8[BANK1 ] float 
  2456 ;;  error           4    4[BANK1 ] float 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  2   63[BANK0 ] int 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 1F/0
  2463 ;;		On exit  : 1F/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2466 ;;      Params:         0       4       0       0
  2467 ;;      Locals:         0       0      12       0
  2468 ;;      Temps:          0       2       0       0
  2469 ;;      Totals:         0       6      12       0
  2470 ;;Total ram usage:       18 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    4
  2473 ;; This function calls:
  2474 ;;		___fladd
  2475 ;;		___flge
  2476 ;;		___flmul
  2477 ;;		___flsub
  2478 ;;		___fltol
  2479 ;;		___xxtofl
  2480 ;;		_abs
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           
  2487                           ;psect for function _calculate_pidA
  2488  0BED                     _calculate_pidA:	
  2489                           
  2490                           ;main.c: 254: float pid = 0;
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in _calculate_pidA: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2494  0BED  0021               	movlb	1	; select bank1
  2495  0BEE  01D8               	clrf	calculate_pidA@pid^(0+128)
  2496  0BEF  01D9               	clrf	(calculate_pidA@pid+1)^(0+128)
  2497  0BF0  01DA               	clrf	(calculate_pidA@pid+2)^(0+128)
  2498  0BF1  01DB               	clrf	(calculate_pidA@pid+3)^(0+128)
  2499                           
  2500                           ;main.c: 255: error = set - I2C_buffer.data.DISTANCE;
  2501  0BF2  0020               	movlb	0	; select bank0
  2502  0BF3  0862               	movf	calculate_pidA@set+3,w
  2503  0BF4  00A9               	movwf	___xxtofl@val+3
  2504  0BF5  0861               	movf	calculate_pidA@set+2,w
  2505  0BF6  00A8               	movwf	___xxtofl@val+2
  2506  0BF7  0860               	movf	calculate_pidA@set+1,w
  2507  0BF8  00A7               	movwf	___xxtofl@val+1
  2508  0BF9  085F               	movf	calculate_pidA@set,w
  2509  0BFA  00A6               	movwf	___xxtofl@val
  2510  0BFB  0021               	movlb	1	; select bank1
  2511  0BFC  082F               	movf	(_I2C_buffer^(0+128)+15),w	;volatile
  2512  0BFD  0020               	movlb	0	; select bank0
  2513  0BFE  02A6               	subwf	___xxtofl@val,f
  2514  0BFF  0021               	movlb	1	; select bank1
  2515  0C00  0830               	movf	((_I2C_buffer+1)^(0+128)+15),w	;volatile
  2516  0C01  0020               	movlb	0	; select bank0
  2517  0C02  3BA7               	subwfb	___xxtofl@val+1,f
  2518  0C03  0021               	movlb	1	; select bank1
  2519  0C04  0831               	movf	((_I2C_buffer+2)^(0+128)+15),w	;volatile
  2520  0C05  0020               	movlb	0	; select bank0
  2521  0C06  3BA8               	subwfb	___xxtofl@val+2,f
  2522  0C07  0021               	movlb	1	; select bank1
  2523  0C08  0832               	movf	((_I2C_buffer+3)^(0+128)+15),w	;volatile
  2524  0C09  0020               	movlb	0	; select bank0
  2525  0C0A  3BA9               	subwfb	___xxtofl@val+3,f
  2526  0C0B  3001               	movlw	1
  2527  0C0C  261D  3188         	fcall	___xxtofl
  2528  0C0E  0829               	movf	?___xxtofl+3,w
  2529  0C0F  0021               	movlb	1	; select bank1
  2530  0C10  00D7               	movwf	(calculate_pidA@error+3)^(0+128)
  2531  0C11  0020               	movlb	0	; select bank0
  2532  0C12  0828               	movf	?___xxtofl+2,w
  2533  0C13  0021               	movlb	1	; select bank1
  2534  0C14  00D6               	movwf	(calculate_pidA@error+2)^(0+128)
  2535  0C15  0020               	movlb	0	; select bank0
  2536  0C16  0827               	movf	?___xxtofl+1,w
  2537  0C17  0021               	movlb	1	; select bank1
  2538  0C18  00D5               	movwf	(calculate_pidA@error+1)^(0+128)
  2539  0C19  0020               	movlb	0	; select bank0
  2540  0C1A  0826               	movf	?___xxtofl,w
  2541  0C1B  0021               	movlb	1	; select bank1
  2542  0C1C  00D4               	movwf	calculate_pidA@error^(0+128)
  2543                           
  2544                           ;main.c: 256: pid = error * I2C_buffer.data.ATS_PID_KP;
  2545  0C1D  0857               	movf	(calculate_pidA@error+3)^(0+128),w
  2546  0C1E  0020               	movlb	0	; select bank0
  2547  0C1F  00AD               	movwf	___flmul@b+3
  2548  0C20  0021               	movlb	1	; select bank1
  2549  0C21  0856               	movf	(calculate_pidA@error+2)^(0+128),w
  2550  0C22  0020               	movlb	0	; select bank0
  2551  0C23  00AC               	movwf	___flmul@b+2
  2552  0C24  0021               	movlb	1	; select bank1
  2553  0C25  0855               	movf	(calculate_pidA@error+1)^(0+128),w
  2554  0C26  0020               	movlb	0	; select bank0
  2555  0C27  00AB               	movwf	___flmul@b+1
  2556  0C28  0021               	movlb	1	; select bank1
  2557  0C29  0854               	movf	calculate_pidA@error^(0+128),w
  2558  0C2A  0020               	movlb	0	; select bank0
  2559  0C2B  00AA               	movwf	___flmul@b
  2560  0C2C  301F               	movlw	31
  2561  0C2D  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2562  0C2E  0086               	movwf	6
  2563  0C2F  0187               	clrf	7
  2564  0C30  3F40               	moviw [0]fsr1
  2565  0C31  00AE               	movwf	___flmul@a
  2566  0C32  3F41               	moviw [1]fsr1
  2567  0C33  00AF               	movwf	___flmul@a+1
  2568  0C34  3F42               	moviw [2]fsr1
  2569  0C35  00B0               	movwf	___flmul@a+2
  2570  0C36  3F43               	moviw [3]fsr1
  2571  0C37  00B1               	movwf	___flmul@a+3
  2572  0C38  3182  2291  3188   	fcall	___flmul
  2573  0C3B  082D               	movf	?___flmul+3,w
  2574  0C3C  0021               	movlb	1	; select bank1
  2575  0C3D  00DB               	movwf	(calculate_pidA@pid+3)^(0+128)
  2576  0C3E  0020               	movlb	0	; select bank0
  2577  0C3F  082C               	movf	?___flmul+2,w
  2578  0C40  0021               	movlb	1	; select bank1
  2579  0C41  00DA               	movwf	(calculate_pidA@pid+2)^(0+128)
  2580  0C42  0020               	movlb	0	; select bank0
  2581  0C43  082B               	movf	?___flmul+1,w
  2582  0C44  0021               	movlb	1	; select bank1
  2583  0C45  00D9               	movwf	(calculate_pidA@pid+1)^(0+128)
  2584  0C46  0020               	movlb	0	; select bank0
  2585  0C47  082A               	movf	?___flmul,w
  2586  0C48  0021               	movlb	1	; select bank1
  2587  0C49  00D8               	movwf	calculate_pidA@pid^(0+128)
  2588                           
  2589                           ;main.c: 257: accumulatorA += error;
  2590  0C4A  0857               	movf	(calculate_pidA@error+3)^(0+128),w
  2591  0C4B  0020               	movlb	0	; select bank0
  2592  0C4C  00C6               	movwf	___fladd@b+3
  2593  0C4D  0021               	movlb	1	; select bank1
  2594  0C4E  0856               	movf	(calculate_pidA@error+2)^(0+128),w
  2595  0C4F  0020               	movlb	0	; select bank0
  2596  0C50  00C5               	movwf	___fladd@b+2
  2597  0C51  0021               	movlb	1	; select bank1
  2598  0C52  0855               	movf	(calculate_pidA@error+1)^(0+128),w
  2599  0C53  0020               	movlb	0	; select bank0
  2600  0C54  00C4               	movwf	___fladd@b+1
  2601  0C55  0021               	movlb	1	; select bank1
  2602  0C56  0854               	movf	calculate_pidA@error^(0+128),w
  2603  0C57  0020               	movlb	0	; select bank0
  2604  0C58  00C3               	movwf	___fladd@b
  2605  0C59  0022               	movlb	2	; select bank2
  2606  0C5A  0827               	movf	(_accumulatorA+3)^(0+256),w
  2607  0C5B  0020               	movlb	0	; select bank0
  2608  0C5C  00CA               	movwf	___fladd@a+3
  2609  0C5D  0022               	movlb	2	; select bank2
  2610  0C5E  0826               	movf	(_accumulatorA+2)^(0+256),w
  2611  0C5F  0020               	movlb	0	; select bank0
  2612  0C60  00C9               	movwf	___fladd@a+2
  2613  0C61  0022               	movlb	2	; select bank2
  2614  0C62  0825               	movf	(_accumulatorA+1)^(0+256),w
  2615  0C63  0020               	movlb	0	; select bank0
  2616  0C64  00C8               	movwf	___fladd@a+1
  2617  0C65  0022               	movlb	2	; select bank2
  2618  0C66  0824               	movf	_accumulatorA^(0+256),w
  2619  0C67  0020               	movlb	0	; select bank0
  2620  0C68  00C7               	movwf	___fladd@a
  2621  0C69  3184  245C  3188   	fcall	___fladd
  2622  0C6C  0846               	movf	?___fladd+3,w
  2623  0C6D  0022               	movlb	2	; select bank2
  2624  0C6E  00A7               	movwf	(_accumulatorA+3)^(0+256)
  2625  0C6F  0020               	movlb	0	; select bank0
  2626  0C70  0845               	movf	?___fladd+2,w
  2627  0C71  0022               	movlb	2	; select bank2
  2628  0C72  00A6               	movwf	(_accumulatorA+2)^(0+256)
  2629  0C73  0020               	movlb	0	; select bank0
  2630  0C74  0844               	movf	?___fladd+1,w
  2631  0C75  0022               	movlb	2	; select bank2
  2632  0C76  00A5               	movwf	(_accumulatorA+1)^(0+256)
  2633  0C77  0020               	movlb	0	; select bank0
  2634  0C78  0843               	movf	?___fladd,w
  2635  0C79  0022               	movlb	2	; select bank2
  2636  0C7A  00A4               	movwf	_accumulatorA^(0+256)
  2637                           
  2638                           ;main.c: 258: pid += I2C_buffer.data.ATS_PID_KI*accumulatorA;
  2639  0C7B  3027               	movlw	39
  2640  0C7C  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2641  0C7D  0086               	movwf	6
  2642  0C7E  0187               	clrf	7
  2643  0C7F  3F40               	moviw [0]fsr1
  2644  0C80  0020               	movlb	0	; select bank0
  2645  0C81  00AE               	movwf	___flmul@a
  2646  0C82  3F41               	moviw [1]fsr1
  2647  0C83  00AF               	movwf	___flmul@a+1
  2648  0C84  3F42               	moviw [2]fsr1
  2649  0C85  00B0               	movwf	___flmul@a+2
  2650  0C86  3F43               	moviw [3]fsr1
  2651  0C87  00B1               	movwf	___flmul@a+3
  2652  0C88  0022               	movlb	2	; select bank2
  2653  0C89  0827               	movf	(_accumulatorA+3)^(0+256),w
  2654  0C8A  0020               	movlb	0	; select bank0
  2655  0C8B  00AD               	movwf	___flmul@b+3
  2656  0C8C  0022               	movlb	2	; select bank2
  2657  0C8D  0826               	movf	(_accumulatorA+2)^(0+256),w
  2658  0C8E  0020               	movlb	0	; select bank0
  2659  0C8F  00AC               	movwf	___flmul@b+2
  2660  0C90  0022               	movlb	2	; select bank2
  2661  0C91  0825               	movf	(_accumulatorA+1)^(0+256),w
  2662  0C92  0020               	movlb	0	; select bank0
  2663  0C93  00AB               	movwf	___flmul@b+1
  2664  0C94  0022               	movlb	2	; select bank2
  2665  0C95  0824               	movf	_accumulatorA^(0+256),w
  2666  0C96  0020               	movlb	0	; select bank0
  2667  0C97  00AA               	movwf	___flmul@b
  2668  0C98  3182  2291  3188   	fcall	___flmul
  2669  0C9B  082D               	movf	?___flmul+3,w
  2670  0C9C  00C6               	movwf	___fladd@b+3
  2671  0C9D  082C               	movf	?___flmul+2,w
  2672  0C9E  00C5               	movwf	___fladd@b+2
  2673  0C9F  082B               	movf	?___flmul+1,w
  2674  0CA0  00C4               	movwf	___fladd@b+1
  2675  0CA1  082A               	movf	?___flmul,w
  2676  0CA2  00C3               	movwf	___fladd@b
  2677  0CA3  0021               	movlb	1	; select bank1
  2678  0CA4  085B               	movf	(calculate_pidA@pid+3)^(0+128),w
  2679  0CA5  0020               	movlb	0	; select bank0
  2680  0CA6  00CA               	movwf	___fladd@a+3
  2681  0CA7  0021               	movlb	1	; select bank1
  2682  0CA8  085A               	movf	(calculate_pidA@pid+2)^(0+128),w
  2683  0CA9  0020               	movlb	0	; select bank0
  2684  0CAA  00C9               	movwf	___fladd@a+2
  2685  0CAB  0021               	movlb	1	; select bank1
  2686  0CAC  0859               	movf	(calculate_pidA@pid+1)^(0+128),w
  2687  0CAD  0020               	movlb	0	; select bank0
  2688  0CAE  00C8               	movwf	___fladd@a+1
  2689  0CAF  0021               	movlb	1	; select bank1
  2690  0CB0  0858               	movf	calculate_pidA@pid^(0+128),w
  2691  0CB1  0020               	movlb	0	; select bank0
  2692  0CB2  00C7               	movwf	___fladd@a
  2693  0CB3  3184  245C  3188   	fcall	___fladd
  2694  0CB6  0846               	movf	?___fladd+3,w
  2695  0CB7  0021               	movlb	1	; select bank1
  2696  0CB8  00DB               	movwf	(calculate_pidA@pid+3)^(0+128)
  2697  0CB9  0020               	movlb	0	; select bank0
  2698  0CBA  0845               	movf	?___fladd+2,w
  2699  0CBB  0021               	movlb	1	; select bank1
  2700  0CBC  00DA               	movwf	(calculate_pidA@pid+2)^(0+128)
  2701  0CBD  0020               	movlb	0	; select bank0
  2702  0CBE  0844               	movf	?___fladd+1,w
  2703  0CBF  0021               	movlb	1	; select bank1
  2704  0CC0  00D9               	movwf	(calculate_pidA@pid+1)^(0+128)
  2705  0CC1  0020               	movlb	0	; select bank0
  2706  0CC2  0843               	movf	?___fladd,w
  2707  0CC3  0021               	movlb	1	; select bank1
  2708  0CC4  00D8               	movwf	calculate_pidA@pid^(0+128)
  2709                           
  2710                           ;main.c: 259: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2711  0CC5  0857               	movf	(calculate_pidA@error+3)^(0+128),w
  2712  0CC6  0020               	movlb	0	; select bank0
  2713  0CC7  00DE               	movwf	___flsub@b+3
  2714  0CC8  0021               	movlb	1	; select bank1
  2715  0CC9  0856               	movf	(calculate_pidA@error+2)^(0+128),w
  2716  0CCA  0020               	movlb	0	; select bank0
  2717  0CCB  00DD               	movwf	___flsub@b+2
  2718  0CCC  0021               	movlb	1	; select bank1
  2719  0CCD  0855               	movf	(calculate_pidA@error+1)^(0+128),w
  2720  0CCE  0020               	movlb	0	; select bank0
  2721  0CCF  00DC               	movwf	___flsub@b+1
  2722  0CD0  0021               	movlb	1	; select bank1
  2723  0CD1  0854               	movf	calculate_pidA@error^(0+128),w
  2724  0CD2  0020               	movlb	0	; select bank0
  2725  0CD3  00DB               	movwf	___flsub@b
  2726  0CD4  0022               	movlb	2	; select bank2
  2727  0CD5  0823               	movf	(_lasterrorA+3)^(0+256),w
  2728  0CD6  0020               	movlb	0	; select bank0
  2729  0CD7  00DA               	movwf	___flsub@a+3
  2730  0CD8  0022               	movlb	2	; select bank2
  2731  0CD9  0822               	movf	(_lasterrorA+2)^(0+256),w
  2732  0CDA  0020               	movlb	0	; select bank0
  2733  0CDB  00D9               	movwf	___flsub@a+2
  2734  0CDC  0022               	movlb	2	; select bank2
  2735  0CDD  0821               	movf	(_lasterrorA+1)^(0+256),w
  2736  0CDE  0020               	movlb	0	; select bank0
  2737  0CDF  00D8               	movwf	___flsub@a+1
  2738  0CE0  0022               	movlb	2	; select bank2
  2739  0CE1  0820               	movf	_lasterrorA^(0+256),w
  2740  0CE2  0020               	movlb	0	; select bank0
  2741  0CE3  00D7               	movwf	___flsub@a
  2742  0CE4  277B               	fcall	___flsub
  2743  0CE5  085A               	movf	?___flsub+3,w
  2744  0CE6  00B1               	movwf	___flmul@a+3
  2745  0CE7  0859               	movf	?___flsub+2,w
  2746  0CE8  00B0               	movwf	___flmul@a+2
  2747  0CE9  0858               	movf	?___flsub+1,w
  2748  0CEA  00AF               	movwf	___flmul@a+1
  2749  0CEB  0857               	movf	?___flsub,w
  2750  0CEC  00AE               	movwf	___flmul@a
  2751  0CED  3023               	movlw	35
  2752  0CEE  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  2753  0CEF  0086               	movwf	6
  2754  0CF0  0187               	clrf	7
  2755  0CF1  3F40               	moviw [0]fsr1
  2756  0CF2  00AA               	movwf	___flmul@b
  2757  0CF3  3F41               	moviw [1]fsr1
  2758  0CF4  00AB               	movwf	___flmul@b+1
  2759  0CF5  3F42               	moviw [2]fsr1
  2760  0CF6  00AC               	movwf	___flmul@b+2
  2761  0CF7  3F43               	moviw [3]fsr1
  2762  0CF8  00AD               	movwf	___flmul@b+3
  2763  0CF9  3182  2291  3188   	fcall	___flmul
  2764  0CFC  082D               	movf	?___flmul+3,w
  2765  0CFD  0021               	movlb	1	; select bank1
  2766  0CFE  00D3               	movwf	(_calculate_pidA$1317+3)^(0+128)
  2767  0CFF  0020               	movlb	0	; select bank0
  2768  0D00  082C               	movf	?___flmul+2,w
  2769  0D01  0021               	movlb	1	; select bank1
  2770  0D02  00D2               	movwf	(_calculate_pidA$1317+2)^(0+128)
  2771  0D03  0020               	movlb	0	; select bank0
  2772  0D04  082B               	movf	?___flmul+1,w
  2773  0D05  0021               	movlb	1	; select bank1
  2774  0D06  00D1               	movwf	(_calculate_pidA$1317+1)^(0+128)
  2775  0D07  0020               	movlb	0	; select bank0
  2776  0D08  082A               	movf	?___flmul,w
  2777  0D09  0021               	movlb	1	; select bank1
  2778  0D0A  00D0               	movwf	_calculate_pidA$1317^(0+128)
  2779                           
  2780                           ;main.c: 259: pid += I2C_buffer.data.ATS_PID_KD * (error - lasterrorA);
  2781  0D0B  0853               	movf	(_calculate_pidA$1317+3)^(0+128),w
  2782  0D0C  0020               	movlb	0	; select bank0
  2783  0D0D  00C6               	movwf	___fladd@b+3
  2784  0D0E  0021               	movlb	1	; select bank1
  2785  0D0F  0852               	movf	(_calculate_pidA$1317+2)^(0+128),w
  2786  0D10  0020               	movlb	0	; select bank0
  2787  0D11  00C5               	movwf	___fladd@b+2
  2788  0D12  0021               	movlb	1	; select bank1
  2789  0D13  0851               	movf	(_calculate_pidA$1317+1)^(0+128),w
  2790  0D14  0020               	movlb	0	; select bank0
  2791  0D15  00C4               	movwf	___fladd@b+1
  2792  0D16  0021               	movlb	1	; select bank1
  2793  0D17  0850               	movf	_calculate_pidA$1317^(0+128),w
  2794  0D18  0020               	movlb	0	; select bank0
  2795  0D19  00C3               	movwf	___fladd@b
  2796  0D1A  0021               	movlb	1	; select bank1
  2797  0D1B  085B               	movf	(calculate_pidA@pid+3)^(0+128),w
  2798  0D1C  0020               	movlb	0	; select bank0
  2799  0D1D  00CA               	movwf	___fladd@a+3
  2800  0D1E  0021               	movlb	1	; select bank1
  2801  0D1F  085A               	movf	(calculate_pidA@pid+2)^(0+128),w
  2802  0D20  0020               	movlb	0	; select bank0
  2803  0D21  00C9               	movwf	___fladd@a+2
  2804  0D22  0021               	movlb	1	; select bank1
  2805  0D23  0859               	movf	(calculate_pidA@pid+1)^(0+128),w
  2806  0D24  0020               	movlb	0	; select bank0
  2807  0D25  00C8               	movwf	___fladd@a+1
  2808  0D26  0021               	movlb	1	; select bank1
  2809  0D27  0858               	movf	calculate_pidA@pid^(0+128),w
  2810  0D28  0020               	movlb	0	; select bank0
  2811  0D29  00C7               	movwf	___fladd@a
  2812  0D2A  3184  245C  3188   	fcall	___fladd
  2813  0D2D  0846               	movf	?___fladd+3,w
  2814  0D2E  0021               	movlb	1	; select bank1
  2815  0D2F  00DB               	movwf	(calculate_pidA@pid+3)^(0+128)
  2816  0D30  0020               	movlb	0	; select bank0
  2817  0D31  0845               	movf	?___fladd+2,w
  2818  0D32  0021               	movlb	1	; select bank1
  2819  0D33  00DA               	movwf	(calculate_pidA@pid+2)^(0+128)
  2820  0D34  0020               	movlb	0	; select bank0
  2821  0D35  0844               	movf	?___fladd+1,w
  2822  0D36  0021               	movlb	1	; select bank1
  2823  0D37  00D9               	movwf	(calculate_pidA@pid+1)^(0+128)
  2824  0D38  0020               	movlb	0	; select bank0
  2825  0D39  0843               	movf	?___fladd,w
  2826  0D3A  0021               	movlb	1	; select bank1
  2827  0D3B  00D8               	movwf	calculate_pidA@pid^(0+128)
  2828                           
  2829                           ;main.c: 260: lasterrorA = error;
  2830  0D3C  0857               	movf	(calculate_pidA@error+3)^(0+128),w
  2831  0D3D  0022               	movlb	2	; select bank2
  2832  0D3E  00A3               	movwf	(_lasterrorA+3)^(0+256)
  2833  0D3F  0021               	movlb	1	; select bank1
  2834  0D40  0856               	movf	(calculate_pidA@error+2)^(0+128),w
  2835  0D41  0022               	movlb	2	; select bank2
  2836  0D42  00A2               	movwf	(_lasterrorA+2)^(0+256)
  2837  0D43  0021               	movlb	1	; select bank1
  2838  0D44  0855               	movf	(calculate_pidA@error+1)^(0+128),w
  2839  0D45  0022               	movlb	2	; select bank2
  2840  0D46  00A1               	movwf	(_lasterrorA+1)^(0+256)
  2841  0D47  0021               	movlb	1	; select bank1
  2842  0D48  0854               	movf	calculate_pidA@error^(0+128),w
  2843  0D49  0022               	movlb	2	; select bank2
  2844  0D4A  00A0               	movwf	_lasterrorA^(0+256)
  2845                           
  2846                           ;main.c: 261: if (pid >= abs(I2C_buffer.data.SPEED))
  2847  0D4B  0021               	movlb	1	; select bank1
  2848  0D4C  085B               	movf	(calculate_pidA@pid+3)^(0+128),w
  2849  0D4D  0020               	movlb	0	; select bank0
  2850  0D4E  00B7               	movwf	___flge@ff1+3
  2851  0D4F  0021               	movlb	1	; select bank1
  2852  0D50  085A               	movf	(calculate_pidA@pid+2)^(0+128),w
  2853  0D51  0020               	movlb	0	; select bank0
  2854  0D52  00B6               	movwf	___flge@ff1+2
  2855  0D53  0021               	movlb	1	; select bank1
  2856  0D54  0859               	movf	(calculate_pidA@pid+1)^(0+128),w
  2857  0D55  0020               	movlb	0	; select bank0
  2858  0D56  00B5               	movwf	___flge@ff1+1
  2859  0D57  0021               	movlb	1	; select bank1
  2860  0D58  0858               	movf	calculate_pidA@pid^(0+128),w
  2861  0D59  0020               	movlb	0	; select bank0
  2862  0D5A  00B4               	movwf	___flge@ff1
  2863  0D5B  0021               	movlb	1	; select bank1
  2864  0D5C  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2865  0D5D  0020               	movlb	0	; select bank0
  2866  0D5E  00A3               	movwf	abs@a+1
  2867  0D5F  0021               	movlb	1	; select bank1
  2868  0D60  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2869  0D61  0020               	movlb	0	; select bank0
  2870  0D62  00A2               	movwf	abs@a
  2871  0D63  268A  3188         	fcall	_abs
  2872  0D65  0822               	movf	?_abs,w
  2873  0D66  00A6               	movwf	___xxtofl@val
  2874  0D67  0823               	movf	?_abs+1,w
  2875  0D68  00A7               	movwf	___xxtofl@val+1
  2876  0D69  0D89               	rlf	9,f
  2877  0D6A  3B89               	subwfb	9,f
  2878  0D6B  0989               	comf	9,f
  2879  0D6C  00A8               	movwf	___xxtofl@val+2
  2880  0D6D  00A9               	movwf	___xxtofl@val+3
  2881  0D6E  3001               	movlw	1
  2882  0D6F  261D  3188         	fcall	___xxtofl
  2883  0D71  0829               	movf	?___xxtofl+3,w
  2884  0D72  00BB               	movwf	___flge@ff2+3
  2885  0D73  0828               	movf	?___xxtofl+2,w
  2886  0D74  00BA               	movwf	___flge@ff2+2
  2887  0D75  0827               	movf	?___xxtofl+1,w
  2888  0D76  00B9               	movwf	___flge@ff2+1
  2889  0D77  0826               	movf	?___xxtofl,w
  2890  0D78  00B8               	movwf	___flge@ff2
  2891  0D79  270D  3188         	fcall	___flge
  2892  0D7B  1C03               	btfss	3,0
  2893  0D7C  2DA2               	goto	l135
  2894                           
  2895                           ;main.c: 262: {;main.c: 263: pid = abs(I2C_buffer.data.SPEED);
  2896  0D7D  0021               	movlb	1	; select bank1
  2897  0D7E  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2898  0D7F  0020               	movlb	0	; select bank0
  2899  0D80  00A3               	movwf	abs@a+1
  2900  0D81  0021               	movlb	1	; select bank1
  2901  0D82  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2902  0D83  0020               	movlb	0	; select bank0
  2903  0D84  00A2               	movwf	abs@a
  2904  0D85  268A  3188         	fcall	_abs
  2905  0D87  0822               	movf	?_abs,w
  2906  0D88  00A6               	movwf	___xxtofl@val
  2907  0D89  0823               	movf	?_abs+1,w
  2908  0D8A  00A7               	movwf	___xxtofl@val+1
  2909  0D8B  0D89               	rlf	9,f
  2910  0D8C  3B89               	subwfb	9,f
  2911  0D8D  0989               	comf	9,f
  2912  0D8E  00A8               	movwf	___xxtofl@val+2
  2913  0D8F  00A9               	movwf	___xxtofl@val+3
  2914  0D90  3001               	movlw	1
  2915  0D91  261D  3188         	fcall	___xxtofl
  2916  0D93  0829               	movf	?___xxtofl+3,w
  2917  0D94  0021               	movlb	1	; select bank1
  2918  0D95  00DB               	movwf	(calculate_pidA@pid+3)^(0+128)
  2919  0D96  0020               	movlb	0	; select bank0
  2920  0D97  0828               	movf	?___xxtofl+2,w
  2921  0D98  0021               	movlb	1	; select bank1
  2922  0D99  00DA               	movwf	(calculate_pidA@pid+2)^(0+128)
  2923  0D9A  0020               	movlb	0	; select bank0
  2924  0D9B  0827               	movf	?___xxtofl+1,w
  2925  0D9C  0021               	movlb	1	; select bank1
  2926  0D9D  00D9               	movwf	(calculate_pidA@pid+1)^(0+128)
  2927  0D9E  0020               	movlb	0	; select bank0
  2928  0D9F  0826               	movf	?___xxtofl,w
  2929  0DA0  0021               	movlb	1	; select bank1
  2930  0DA1  00D8               	movwf	calculate_pidA@pid^(0+128)
  2931  0DA2                     l135:	
  2932                           
  2933                           ;main.c: 264: };main.c: 265: if (pid <= abs(I2C_buffer.data.SPEED)*-1) {
  2934  0DA2  0021               	movlb	1	; select bank1
  2935  0DA3  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2936  0DA4  0020               	movlb	0	; select bank0
  2937  0DA5  00A3               	movwf	abs@a+1
  2938  0DA6  0021               	movlb	1	; select bank1
  2939  0DA7  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2940  0DA8  0020               	movlb	0	; select bank0
  2941  0DA9  00A2               	movwf	abs@a
  2942  0DAA  268A  3188         	fcall	_abs
  2943  0DAC  0922               	comf	?_abs,w
  2944  0DAD  00E3               	movwf	??_calculate_pidA
  2945  0DAE  0923               	comf	?_abs+1,w
  2946  0DAF  00E4               	movwf	??_calculate_pidA+1
  2947  0DB0  0AE3               	incf	??_calculate_pidA,f
  2948  0DB1  1903               	skipnz
  2949  0DB2  0AE4               	incf	??_calculate_pidA+1,f
  2950  0DB3  0863               	movf	??_calculate_pidA,w
  2951  0DB4  00A6               	movwf	___xxtofl@val
  2952  0DB5  0864               	movf	??_calculate_pidA+1,w
  2953  0DB6  00A7               	movwf	___xxtofl@val+1
  2954  0DB7  0D89               	rlf	9,f
  2955  0DB8  3B89               	subwfb	9,f
  2956  0DB9  0989               	comf	9,f
  2957  0DBA  00A8               	movwf	___xxtofl@val+2
  2958  0DBB  00A9               	movwf	___xxtofl@val+3
  2959  0DBC  3001               	movlw	1
  2960  0DBD  261D  3188         	fcall	___xxtofl
  2961  0DBF  0829               	movf	?___xxtofl+3,w
  2962  0DC0  00B7               	movwf	___flge@ff1+3
  2963  0DC1  0828               	movf	?___xxtofl+2,w
  2964  0DC2  00B6               	movwf	___flge@ff1+2
  2965  0DC3  0827               	movf	?___xxtofl+1,w
  2966  0DC4  00B5               	movwf	___flge@ff1+1
  2967  0DC5  0826               	movf	?___xxtofl,w
  2968  0DC6  00B4               	movwf	___flge@ff1
  2969  0DC7  0021               	movlb	1	; select bank1
  2970  0DC8  085B               	movf	(calculate_pidA@pid+3)^(0+128),w
  2971  0DC9  0020               	movlb	0	; select bank0
  2972  0DCA  00BB               	movwf	___flge@ff2+3
  2973  0DCB  0021               	movlb	1	; select bank1
  2974  0DCC  085A               	movf	(calculate_pidA@pid+2)^(0+128),w
  2975  0DCD  0020               	movlb	0	; select bank0
  2976  0DCE  00BA               	movwf	___flge@ff2+2
  2977  0DCF  0021               	movlb	1	; select bank1
  2978  0DD0  0859               	movf	(calculate_pidA@pid+1)^(0+128),w
  2979  0DD1  0020               	movlb	0	; select bank0
  2980  0DD2  00B9               	movwf	___flge@ff2+1
  2981  0DD3  0021               	movlb	1	; select bank1
  2982  0DD4  0858               	movf	calculate_pidA@pid^(0+128),w
  2983  0DD5  0020               	movlb	0	; select bank0
  2984  0DD6  00B8               	movwf	___flge@ff2
  2985  0DD7  270D  3188         	fcall	___flge
  2986  0DD9  1C03               	btfss	3,0
  2987  0DDA  2E07               	goto	l136
  2988                           
  2989                           ;main.c: 266: pid = abs(I2C_buffer.data.SPEED)*-1;
  2990  0DDB  0021               	movlb	1	; select bank1
  2991  0DDC  082E               	movf	((_I2C_buffer+1)^(0+128)+13),w	;volatile
  2992  0DDD  0020               	movlb	0	; select bank0
  2993  0DDE  00A3               	movwf	abs@a+1
  2994  0DDF  0021               	movlb	1	; select bank1
  2995  0DE0  082D               	movf	(_I2C_buffer^(0+128)+13),w	;volatile
  2996  0DE1  0020               	movlb	0	; select bank0
  2997  0DE2  00A2               	movwf	abs@a
  2998  0DE3  268A  3188         	fcall	_abs
  2999  0DE5  0922               	comf	?_abs,w
  3000  0DE6  00E3               	movwf	??_calculate_pidA
  3001  0DE7  0923               	comf	?_abs+1,w
  3002  0DE8  00E4               	movwf	??_calculate_pidA+1
  3003  0DE9  0AE3               	incf	??_calculate_pidA,f
  3004  0DEA  1903               	skipnz
  3005  0DEB  0AE4               	incf	??_calculate_pidA+1,f
  3006  0DEC  0863               	movf	??_calculate_pidA,w
  3007  0DED  00A6               	movwf	___xxtofl@val
  3008  0DEE  0864               	movf	??_calculate_pidA+1,w
  3009  0DEF  00A7               	movwf	___xxtofl@val+1
  3010  0DF0  0D89               	rlf	9,f
  3011  0DF1  3B89               	subwfb	9,f
  3012  0DF2  0989               	comf	9,f
  3013  0DF3  00A8               	movwf	___xxtofl@val+2
  3014  0DF4  00A9               	movwf	___xxtofl@val+3
  3015  0DF5  3001               	movlw	1
  3016  0DF6  261D  3188         	fcall	___xxtofl
  3017  0DF8  0829               	movf	?___xxtofl+3,w
  3018  0DF9  0021               	movlb	1	; select bank1
  3019  0DFA  00DB               	movwf	(calculate_pidA@pid+3)^(0+128)
  3020  0DFB  0020               	movlb	0	; select bank0
  3021  0DFC  0828               	movf	?___xxtofl+2,w
  3022  0DFD  0021               	movlb	1	; select bank1
  3023  0DFE  00DA               	movwf	(calculate_pidA@pid+2)^(0+128)
  3024  0DFF  0020               	movlb	0	; select bank0
  3025  0E00  0827               	movf	?___xxtofl+1,w
  3026  0E01  0021               	movlb	1	; select bank1
  3027  0E02  00D9               	movwf	(calculate_pidA@pid+1)^(0+128)
  3028  0E03  0020               	movlb	0	; select bank0
  3029  0E04  0826               	movf	?___xxtofl,w
  3030  0E05  0021               	movlb	1	; select bank1
  3031  0E06  00D8               	movwf	calculate_pidA@pid^(0+128)
  3032  0E07                     l136:	
  3033                           
  3034                           ;main.c: 267: };main.c: 268: return ((int) pid);
  3035  0E07  0021               	movlb	1	; select bank1
  3036  0E08  085B               	movf	(calculate_pidA@pid+3)^(0+128),w
  3037  0E09  0020               	movlb	0	; select bank0
  3038  0E0A  00A5               	movwf	___fltol@f1+3
  3039  0E0B  0021               	movlb	1	; select bank1
  3040  0E0C  085A               	movf	(calculate_pidA@pid+2)^(0+128),w
  3041  0E0D  0020               	movlb	0	; select bank0
  3042  0E0E  00A4               	movwf	___fltol@f1+2
  3043  0E0F  0021               	movlb	1	; select bank1
  3044  0E10  0859               	movf	(calculate_pidA@pid+1)^(0+128),w
  3045  0E11  0020               	movlb	0	; select bank0
  3046  0E12  00A3               	movwf	___fltol@f1+1
  3047  0E13  0021               	movlb	1	; select bank1
  3048  0E14  0858               	movf	calculate_pidA@pid^(0+128),w
  3049  0E15  0020               	movlb	0	; select bank0
  3050  0E16  00A2               	movwf	___fltol@f1
  3051  0E17  27AD               	fcall	___fltol
  3052  0E18  0823               	movf	?___fltol+1,w
  3053  0E19  00E0               	movwf	?_calculate_pidA+1
  3054  0E1A  0822               	movf	?___fltol,w
  3055  0E1B  00DF               	movwf	?_calculate_pidA
  3056  0E1C  0008               	return
  3057  0E1D                     __end_of_calculate_pidA:	
  3058  0E1D                     __ptext11:	
  3059 ;; *************** function ___xxtofl *****************
  3060 ;; Defined at:
  3061 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\xxtofl.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  sign            1    wreg     unsigned char 
  3064 ;;  val             4    6[BANK0 ] long 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  sign            1   14[BANK0 ] unsigned char 
  3067 ;;  arg             4   16[BANK0 ] unsigned long 
  3068 ;;  exp             1   15[BANK0 ] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  4    6[BANK0 ] unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 1F/0
  3075 ;;		On exit  : 1F/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3078 ;;      Params:         0       4       0       0
  3079 ;;      Locals:         0       6       0       0
  3080 ;;      Temps:          0       4       0       0
  3081 ;;      Totals:         0      14       0       0
  3082 ;;Total ram usage:       14 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    2
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_calculate_pidA
  3089 ;;		_calculate_pidM
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           
  3094                           ;psect for function ___xxtofl
  3095  0E1D                     ___xxtofl:	
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3099                           ;___xxtofl@sign stored from wreg
  3100  0E1D  00AE               	movwf	___xxtofl@sign
  3101  0E1E  082E               	movf	___xxtofl@sign,w
  3102  0E1F  1D03               	btfss	3,2
  3103  0E20  1FA9               	btfss	___xxtofl@val+3,7
  3104  0E21  2E32               	goto	l3426
  3105  0E22  0926               	comf	___xxtofl@val,w
  3106  0E23  00B0               	movwf	___xxtofl@arg
  3107  0E24  0927               	comf	___xxtofl@val+1,w
  3108  0E25  00B1               	movwf	___xxtofl@arg+1
  3109  0E26  0928               	comf	___xxtofl@val+2,w
  3110  0E27  00B2               	movwf	___xxtofl@arg+2
  3111  0E28  0929               	comf	___xxtofl@val+3,w
  3112  0E29  00B3               	movwf	___xxtofl@arg+3
  3113  0E2A  0AB0               	incf	___xxtofl@arg,f
  3114  0E2B  1903               	skipnz
  3115  0E2C  0AB1               	incf	___xxtofl@arg+1,f
  3116  0E2D  1903               	skipnz
  3117  0E2E  0AB2               	incf	___xxtofl@arg+2,f
  3118  0E2F  1903               	skipnz
  3119  0E30  0AB3               	incf	___xxtofl@arg+3,f
  3120  0E31  2E3A               	goto	l730
  3121  0E32                     l3426:	
  3122  0E32  0829               	movf	___xxtofl@val+3,w
  3123  0E33  00B3               	movwf	___xxtofl@arg+3
  3124  0E34  0828               	movf	___xxtofl@val+2,w
  3125  0E35  00B2               	movwf	___xxtofl@arg+2
  3126  0E36  0827               	movf	___xxtofl@val+1,w
  3127  0E37  00B1               	movwf	___xxtofl@arg+1
  3128  0E38  0826               	movf	___xxtofl@val,w
  3129  0E39  00B0               	movwf	___xxtofl@arg
  3130  0E3A                     l730:	
  3131  0E3A  0829               	movf	___xxtofl@val+3,w
  3132  0E3B  0428               	iorwf	___xxtofl@val+2,w
  3133  0E3C  0427               	iorwf	___xxtofl@val+1,w
  3134  0E3D  0426               	iorwf	___xxtofl@val,w
  3135  0E3E  1D03               	skipz
  3136  0E3F  2E45               	goto	l3430
  3137  0E40  01A6               	clrf	?___xxtofl
  3138  0E41  01A7               	clrf	?___xxtofl+1
  3139  0E42  01A8               	clrf	?___xxtofl+2
  3140  0E43  01A9               	clrf	?___xxtofl+3
  3141  0E44  0008               	return
  3142  0E45                     l3430:	
  3143  0E45  3096               	movlw	150
  3144  0E46  00AF               	movwf	___xxtofl@exp
  3145  0E47                     l3434:	
  3146  0E47  30FE               	movlw	254
  3147  0E48  0533               	andwf	___xxtofl@arg+3,w
  3148  0E49  1903               	btfsc	3,2
  3149  0E4A  2E5C               	goto	l3442
  3150  0E4B  0AAF               	incf	___xxtofl@exp,f
  3151  0E4C  36B3               	lsrf	___xxtofl@arg+3,f
  3152  0E4D  0CB2               	rrf	___xxtofl@arg+2,f
  3153  0E4E  0CB1               	rrf	___xxtofl@arg+1,f
  3154  0E4F  0CB0               	rrf	___xxtofl@arg,f
  3155  0E50  2E47               	goto	l3434
  3156  0E51                     l3436:	
  3157  0E51  3001               	movlw	1
  3158  0E52  0AAF               	incf	___xxtofl@exp,f
  3159  0E53  07B0               	addwf	___xxtofl@arg,f
  3160  0E54  3000               	movlw	0
  3161  0E55  3DB1               	addwfc	___xxtofl@arg+1,f
  3162  0E56  3DB2               	addwfc	___xxtofl@arg+2,f
  3163  0E57  3DB3               	addwfc	___xxtofl@arg+3,f
  3164  0E58  36B3               	lsrf	___xxtofl@arg+3,f
  3165  0E59  0CB2               	rrf	___xxtofl@arg+2,f
  3166  0E5A  0CB1               	rrf	___xxtofl@arg+1,f
  3167  0E5B  0CB0               	rrf	___xxtofl@arg,f
  3168  0E5C                     l3442:	
  3169  0E5C  30FF               	movlw	255
  3170  0E5D  0533               	andwf	___xxtofl@arg+3,w
  3171  0E5E  1903               	btfsc	3,2
  3172  0E5F  2E6A               	goto	l3446
  3173  0E60  2E51               	goto	l3436
  3174  0E61                     l3448:	
  3175  0E61  3002               	movlw	2
  3176  0E62  022F               	subwf	___xxtofl@exp,w
  3177  0E63  1C03               	btfss	3,0
  3178  0E64  2E6C               	goto	l743
  3179  0E65  03AF               	decf	___xxtofl@exp,f
  3180  0E66  35B0               	lslf	___xxtofl@arg,f
  3181  0E67  0DB1               	rlf	___xxtofl@arg+1,f
  3182  0E68  0DB2               	rlf	___xxtofl@arg+2,f
  3183  0E69  0DB3               	rlf	___xxtofl@arg+3,f
  3184  0E6A                     l3446:	
  3185  0E6A  1FB2               	btfss	___xxtofl@arg+2,7
  3186  0E6B  2E61               	goto	l3448
  3187  0E6C                     l743:	
  3188  0E6C  1C2F               	btfss	___xxtofl@exp,0
  3189  0E6D  13B2               	bcf	___xxtofl@arg+2,7
  3190  0E6E  36AF               	lsrf	___xxtofl@exp,f
  3191  0E6F  082F               	movf	___xxtofl@exp,w
  3192  0E70  00AD               	movwf	??___xxtofl+3
  3193  0E71  01AC               	clrf	??___xxtofl+2
  3194  0E72  01AB               	clrf	??___xxtofl+1
  3195  0E73  01AA               	clrf	??___xxtofl
  3196  0E74  082A               	movf	??___xxtofl,w
  3197  0E75  04B0               	iorwf	___xxtofl@arg,f
  3198  0E76  082B               	movf	??___xxtofl+1,w
  3199  0E77  04B1               	iorwf	___xxtofl@arg+1,f
  3200  0E78  082C               	movf	??___xxtofl+2,w
  3201  0E79  04B2               	iorwf	___xxtofl@arg+2,f
  3202  0E7A  082D               	movf	??___xxtofl+3,w
  3203  0E7B  04B3               	iorwf	___xxtofl@arg+3,f
  3204  0E7C  082E               	movf	___xxtofl@sign,w
  3205  0E7D  1D03               	btfss	3,2
  3206  0E7E  1FA9               	btfss	___xxtofl@val+3,7
  3207  0E7F  2E81               	goto	l3460
  3208  0E80  17B3               	bsf	___xxtofl@arg+3,7
  3209  0E81                     l3460:	
  3210  0E81  0833               	movf	___xxtofl@arg+3,w
  3211  0E82  00A9               	movwf	?___xxtofl+3
  3212  0E83  0832               	movf	___xxtofl@arg+2,w
  3213  0E84  00A8               	movwf	?___xxtofl+2
  3214  0E85  0831               	movf	___xxtofl@arg+1,w
  3215  0E86  00A7               	movwf	?___xxtofl+1
  3216  0E87  0830               	movf	___xxtofl@arg,w
  3217  0E88  00A6               	movwf	?___xxtofl
  3218  0E89  0008               	return
  3219  0E8A                     __end_of___xxtofl:	
  3220  0E8A                     __ptext10:	
  3221 ;; *************** function _abs *****************
  3222 ;; Defined at:
  3223 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\abs.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  a               2    2[BANK0 ] int 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  2    2[BANK0 ] int 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0
  3232 ;; Tracked objects:
  3233 ;;		On entry : 1F/0
  3234 ;;		On exit  : 1F/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3237 ;;      Params:         0       2       0       0
  3238 ;;      Locals:         0       0       0       0
  3239 ;;      Temps:          0       2       0       0
  3240 ;;      Totals:         0       4       0       0
  3241 ;;Total ram usage:        4 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    2
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_calculate_pidA
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _abs
  3254  0E8A                     _abs:	
  3255                           
  3256                           ;incstack = 0
  3257                           ; Regs used in _abs: [wreg+status,2+status,0]
  3258  0E8A  1FA3               	btfss	abs@a+1,7
  3259  0E8B  0008               	return
  3260  0E8C  0922               	comf	abs@a,w
  3261  0E8D  00A4               	movwf	??_abs
  3262  0E8E  0923               	comf	abs@a+1,w
  3263  0E8F  00A5               	movwf	??_abs+1
  3264  0E90  0AA4               	incf	??_abs,f
  3265  0E91  1903               	skipnz
  3266  0E92  0AA5               	incf	??_abs+1,f
  3267  0E93  0824               	movf	??_abs,w
  3268  0E94  00A2               	movwf	?_abs
  3269  0E95  0825               	movf	??_abs+1,w
  3270  0E96  00A3               	movwf	?_abs+1
  3271  0E97  0008               	return
  3272  0E98                     __end_of_abs:	
  3273  0E98                     __ptext1:	
  3274 ;; *************** function _pre_pidM *****************
  3275 ;; Defined at:
  3276 ;;		line 291 in file "main.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  set             2   71[BANK0 ] int 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;		None
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 1F/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3290 ;;      Params:         0       2       0       0
  3291 ;;      Locals:         0       0       0       0
  3292 ;;      Temps:          0       2       0       0
  3293 ;;      Totals:         0       4       0       0
  3294 ;;Total ram usage:        4 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    5
  3297 ;; This function calls:
  3298 ;;		_calculate_pidM
  3299 ;; This function is called by:
  3300 ;;		_main
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           
  3305                           ;psect for function _pre_pidM
  3306  0E98                     _pre_pidM:	
  3307                           
  3308                           ;main.c: 293: zero_cross = ((lset^set) < 0);
  3309                           
  3310                           ;incstack = 0
  3311                           ; Regs used in _pre_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3312  0E98  0867               	movf	pre_pidM@set,w
  3313  0E99  0021               	movlb	1	; select bank1
  3314  0E9A  064B               	xorwf	_lset^(0+128),w
  3315  0E9B  0020               	movlb	0	; select bank0
  3316  0E9C  00E9               	movwf	??_pre_pidM
  3317  0E9D  0868               	movf	pre_pidM@set+1,w
  3318  0E9E  0021               	movlb	1	; select bank1
  3319  0E9F  064C               	xorwf	(_lset+1)^(0+128),w
  3320  0EA0  0020               	movlb	0	; select bank0
  3321  0EA1  00EA               	movwf	??_pre_pidM+1
  3322  0EA2  1FEA               	btfss	??_pre_pidM+1,7
  3323  0EA3  2EA7               	goto	u4150
  3324  0EA4  0020               	movlb	0	; select bank0
  3325  0EA5  146F               	bsf	_zero_cross/(0+8),_zero_cross& (0+7)
  3326  0EA6  2EA9               	goto	u4164
  3327  0EA7                     u4150:	
  3328  0EA7  0020               	movlb	0	; select bank0
  3329  0EA8  106F               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  3330  0EA9                     u4164:	
  3331                           
  3332                           ;main.c: 294: if (((zero_cross == 1) &(set <= 0) & (lset <= 0)))
  3333  0EA9  0868               	movf	pre_pidM@set+1,w
  3334  0EAA  3A80               	xorlw	128
  3335  0EAB  00E9               	movwf	??_pre_pidM
  3336  0EAC  3080               	movlw	128
  3337  0EAD  0269               	subwf	??_pre_pidM,w
  3338  0EAE  1D03               	skipz
  3339  0EAF  2EB2               	goto	u4175
  3340  0EB0  3001               	movlw	1
  3341  0EB1  0267               	subwf	pre_pidM@set,w
  3342  0EB2                     u4175:	
  3343  0EB2  1803               	skipnc
  3344  0EB3  2EC7               	goto	l145
  3345  0EB4  0020               	movlb	0	; select bank0
  3346  0EB5  1C6F               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  3347  0EB6  2EC7               	goto	l145
  3348  0EB7  0021               	movlb	1	; select bank1
  3349  0EB8  084C               	movf	(_lset+1)^(0+128),w
  3350  0EB9  3A80               	xorlw	128
  3351  0EBA  0020               	movlb	0	; select bank0
  3352  0EBB  00E9               	movwf	??_pre_pidM
  3353  0EBC  3080               	movlw	128
  3354  0EBD  0269               	subwf	??_pre_pidM,w
  3355  0EBE  1D03               	skipz
  3356  0EBF  2EC3               	goto	u4195
  3357  0EC0  3001               	movlw	1
  3358  0EC1  0021               	movlb	1	; select bank1
  3359  0EC2  024B               	subwf	_lset^(0+128),w
  3360  0EC3                     u4195:	
  3361  0EC3  1803               	skipnc
  3362  0EC4  2EC7               	goto	l145
  3363                           
  3364                           ;main.c: 295: {;main.c: 296: zero_cross = 0;
  3365  0EC5  0020               	movlb	0	; select bank0
  3366  0EC6  106F               	bcf	_zero_cross/(0+8),_zero_cross& (0+7)
  3367  0EC7                     l145:	
  3368                           
  3369                           ;main.c: 297: };main.c: 298: if (zero_cross == 1) {
  3370  0EC7  0020               	movlb	0	; select bank0
  3371  0EC8  1C6F               	btfss	_zero_cross/(0+8),_zero_cross& (0+7)
  3372  0EC9  2EDF               	goto	l3522
  3373  0ECA                     l3516:	
  3374                           
  3375                           ;main.c: 300: calculate_pidM(0);
  3376  0ECA  0020               	movlb	0	; select bank0
  3377  0ECB  01E5               	clrf	calculate_pidM@set
  3378  0ECC  01E6               	clrf	calculate_pidM@set+1
  3379  0ECD  3180  20DD  3188   	fcall	_calculate_pidM
  3380  0ED0  0064               	clrwdt	;# 
  3381                           
  3382                           ;main.c: 302: _delay((unsigned long)((5)*(32000000/4000.0)));
  3383  0ED1  3034               	movlw	52
  3384  0ED2  0020               	movlb	0	; select bank0
  3385  0ED3  00E9               	movwf	??_pre_pidM
  3386  0ED4  30F1               	movlw	241
  3387  0ED5                     u4737:	
  3388  0ED5  0B89               	decfsz	9,f
  3389  0ED6  2ED5               	goto	u4737
  3390  0ED7  0BE9               	decfsz	??_pre_pidM,f
  3391  0ED8  2ED5               	goto	u4737
  3392  0ED9  3200               	nop2
  3393                           
  3394                           ;main.c: 303: } while ((I2C_buffer.data.RPM != 0));
  3395  0EDA  0021               	movlb	1	; select bank1
  3396  0EDB  082B               	movf	(_I2C_buffer^(0+128)+11),w	;volatile
  3397  0EDC  042C               	iorwf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  3398  0EDD  1D03               	btfss	3,2
  3399  0EDE  2ECA               	goto	l3516
  3400  0EDF                     l3522:	
  3401                           
  3402                           ;main.c: 304: };main.c: 305: lset = set;
  3403  0EDF  0020               	movlb	0	; select bank0
  3404  0EE0  0868               	movf	pre_pidM@set+1,w
  3405  0EE1  0021               	movlb	1	; select bank1
  3406  0EE2  00CC               	movwf	(_lset+1)^(0+128)
  3407  0EE3  0020               	movlb	0	; select bank0
  3408  0EE4  0867               	movf	pre_pidM@set,w
  3409  0EE5  0021               	movlb	1	; select bank1
  3410  0EE6  00CB               	movwf	_lset^(0+128)
  3411                           
  3412                           ;main.c: 306: calculate_pidM(set);
  3413  0EE7  0020               	movlb	0	; select bank0
  3414  0EE8  0868               	movf	pre_pidM@set+1,w
  3415  0EE9  00E6               	movwf	calculate_pidM@set+1
  3416  0EEA  0867               	movf	pre_pidM@set,w
  3417  0EEB  00E5               	movwf	calculate_pidM@set
  3418  0EEC  3180  28DD         	ljmp	l3464
  3419  0EEE                     __end_of_pre_pidM:	
  3420  0EEE                     __ptext5:	
  3421 ;; *************** function _PWM_set_duty *****************
  3422 ;; Defined at:
  3423 ;;		line 223 in file "main.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  duty            2    2[BANK0 ] int 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  2    2[BANK0 ] int 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0
  3432 ;; Tracked objects:
  3433 ;;		On entry : 1F/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3437 ;;      Params:         0       2       0       0
  3438 ;;      Locals:         0       0       0       0
  3439 ;;      Temps:          0       2       0       0
  3440 ;;      Totals:         0       4       0       0
  3441 ;;Total ram usage:        4 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    2
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_M_control
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           
  3453                           ;psect for function _PWM_set_duty
  3454  0EEE                     _PWM_set_duty:	
  3455  0EEE                     l2972:	
  3456                           ;incstack = 0
  3457                           ; Regs used in _PWM_set_duty: [wreg+status,2+status,0]
  3458                           
  3459                           
  3460                           ;main.c: 225: if (duty < 1024) {
  3461  0EEE  0823               	movf	PWM_set_duty@duty+1,w
  3462  0EEF  3A80               	xorlw	128
  3463  0EF0  00A4               	movwf	??_PWM_set_duty
  3464  0EF1  3084               	movlw	132
  3465  0EF2  0224               	subwf	??_PWM_set_duty,w
  3466  0EF3  1D03               	skipz
  3467  0EF4  2EF7               	goto	u3175
  3468  0EF5  3000               	movlw	0
  3469  0EF6  0222               	subwf	PWM_set_duty@duty,w
  3470  0EF7                     u3175:	
  3471  0EF7  1803               	skipnc
  3472  0EF8  0008               	return
  3473                           
  3474                           ;main.c: 226: CCPR1L = (0xFF & ((unsigned int) duty >> 2));
  3475  0EF9  0020               	movlb	0	; select bank0
  3476  0EFA  0823               	movf	PWM_set_duty@duty+1,w
  3477  0EFB  00A5               	movwf	??_PWM_set_duty+1
  3478  0EFC  0822               	movf	PWM_set_duty@duty,w
  3479  0EFD  00A4               	movwf	??_PWM_set_duty
  3480  0EFE  36A5               	lsrf	??_PWM_set_duty+1,f
  3481  0EFF  0CA4               	rrf	??_PWM_set_duty,f
  3482  0F00  36A5               	lsrf	??_PWM_set_duty+1,f
  3483  0F01  0CA4               	rrf	??_PWM_set_duty,f
  3484  0F02  0824               	movf	??_PWM_set_duty,w
  3485  0F03  0025               	movlb	5	; select bank5
  3486  0F04  0091               	movwf	17	;volatile
  3487                           
  3488                           ;main.c: 227: CCP1CON = (0x0C | (0x30 & ((unsigned int) duty << 4)));
  3489  0F05  0020               	movlb	0	; select bank0
  3490  0F06  0E22               	swapf	PWM_set_duty@duty,w
  3491  0F07  39F0               	andlw	240
  3492  0F08  3930               	andlw	48
  3493  0F09  380C               	iorlw	12
  3494  0F0A  0025               	movlb	5	; select bank5
  3495  0F0B  0093               	movwf	19	;volatile
  3496  0F0C  0008               	return
  3497  0F0D                     __end_of_PWM_set_duty:	
  3498  0F0D                     __ptext17:	
  3499 ;; *************** function ___flge *****************
  3500 ;; Defined at:
  3501 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\flge.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  ff1             4   20[BANK0 ] unsigned int 
  3504 ;;  ff2             4   24[BANK0 ] unsigned int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 1F/0
  3513 ;;		On exit  : 1F/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3516 ;;      Params:         0       8       0       0
  3517 ;;      Locals:         0       0       0       0
  3518 ;;      Temps:          0       4       0       0
  3519 ;;      Totals:         0      12       0       0
  3520 ;;Total ram usage:       12 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    2
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_calculate_pidA
  3527 ;;		_calculate_pidM
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function ___flge
  3533  0F0D                     ___flge:	
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in ___flge: [wreg+status,2+status,0]
  3537  0F0D  3080               	movlw	128
  3538  0F0E  01BC               	clrf	??___flge
  3539  0F0F  01BD               	clrf	??___flge+1
  3540  0F10  0536               	andwf	___flge@ff1+2,w
  3541  0F11  00BE               	movwf	??___flge+2
  3542  0F12  307F               	movlw	127
  3543  0F13  0537               	andwf	___flge@ff1+3,w
  3544  0F14  00BF               	movwf	??___flge+3
  3545  0F15  043E               	iorwf	??___flge+2,w
  3546  0F16  043D               	iorwf	??___flge+1,w
  3547  0F17  043C               	iorwf	??___flge,w
  3548  0F18  1D03               	skipz
  3549  0F19  2F1E               	goto	l3242
  3550  0F1A  01B4               	clrf	___flge@ff1
  3551  0F1B  01B5               	clrf	___flge@ff1+1
  3552  0F1C  01B6               	clrf	___flge@ff1+2
  3553  0F1D  01B7               	clrf	___flge@ff1+3
  3554  0F1E                     l3242:	
  3555  0F1E  3080               	movlw	128
  3556  0F1F  01BC               	clrf	??___flge
  3557  0F20  01BD               	clrf	??___flge+1
  3558  0F21  053A               	andwf	___flge@ff2+2,w
  3559  0F22  00BE               	movwf	??___flge+2
  3560  0F23  307F               	movlw	127
  3561  0F24  053B               	andwf	___flge@ff2+3,w
  3562  0F25  00BF               	movwf	??___flge+3
  3563  0F26  043E               	iorwf	??___flge+2,w
  3564  0F27  043D               	iorwf	??___flge+1,w
  3565  0F28  043C               	iorwf	??___flge,w
  3566  0F29  1D03               	skipz
  3567  0F2A  2F2F               	goto	l497
  3568  0F2B  01B8               	clrf	___flge@ff2
  3569  0F2C  01B9               	clrf	___flge@ff2+1
  3570  0F2D  01BA               	clrf	___flge@ff2+2
  3571  0F2E  01BB               	clrf	___flge@ff2+3
  3572  0F2F                     l497:	
  3573  0F2F  1FB7               	btfss	___flge@ff1+3,7
  3574  0F30  2F46               	goto	l3248
  3575  0F31  3080               	movlw	128
  3576  0F32  01BC               	clrf	??___flge
  3577  0F33  01BD               	clrf	??___flge+1
  3578  0F34  01BE               	clrf	??___flge+2
  3579  0F35  00BF               	movwf	??___flge+3
  3580  0F36  0834               	movf	___flge@ff1,w
  3581  0F37  02BC               	subwf	??___flge,f
  3582  0F38  0835               	movf	___flge@ff1+1,w
  3583  0F39  3BBD               	subwfb	??___flge+1,f
  3584  0F3A  0836               	movf	___flge@ff1+2,w
  3585  0F3B  3BBE               	subwfb	??___flge+2,f
  3586  0F3C  0837               	movf	___flge@ff1+3,w
  3587  0F3D  3BBF               	subwfb	??___flge+3,f
  3588  0F3E  083F               	movf	??___flge+3,w
  3589  0F3F  00B7               	movwf	___flge@ff1+3
  3590  0F40  083E               	movf	??___flge+2,w
  3591  0F41  00B6               	movwf	___flge@ff1+2
  3592  0F42  083D               	movf	??___flge+1,w
  3593  0F43  00B5               	movwf	___flge@ff1+1
  3594  0F44  083C               	movf	??___flge,w
  3595  0F45  00B4               	movwf	___flge@ff1
  3596  0F46                     l3248:	
  3597  0F46  1FBB               	btfss	___flge@ff2+3,7
  3598  0F47  2F5D               	goto	l499
  3599  0F48  3080               	movlw	128
  3600  0F49  01BC               	clrf	??___flge
  3601  0F4A  01BD               	clrf	??___flge+1
  3602  0F4B  01BE               	clrf	??___flge+2
  3603  0F4C  00BF               	movwf	??___flge+3
  3604  0F4D  0838               	movf	___flge@ff2,w
  3605  0F4E  02BC               	subwf	??___flge,f
  3606  0F4F  0839               	movf	___flge@ff2+1,w
  3607  0F50  3BBD               	subwfb	??___flge+1,f
  3608  0F51  083A               	movf	___flge@ff2+2,w
  3609  0F52  3BBE               	subwfb	??___flge+2,f
  3610  0F53  083B               	movf	___flge@ff2+3,w
  3611  0F54  3BBF               	subwfb	??___flge+3,f
  3612  0F55  083F               	movf	??___flge+3,w
  3613  0F56  00BB               	movwf	___flge@ff2+3
  3614  0F57  083E               	movf	??___flge+2,w
  3615  0F58  00BA               	movwf	___flge@ff2+2
  3616  0F59  083D               	movf	??___flge+1,w
  3617  0F5A  00B9               	movwf	___flge@ff2+1
  3618  0F5B  083C               	movf	??___flge,w
  3619  0F5C  00B8               	movwf	___flge@ff2
  3620  0F5D                     l499:	
  3621  0F5D  3080               	movlw	128
  3622  0F5E  06B7               	xorwf	___flge@ff1+3,f
  3623  0F5F  06BB               	xorwf	___flge@ff2+3,f
  3624  0F60  083B               	movf	___flge@ff2+3,w
  3625  0F61  0237               	subwf	___flge@ff1+3,w
  3626  0F62  1D03               	skipz
  3627  0F63  0008               	return
  3628  0F64  083A               	movf	___flge@ff2+2,w
  3629  0F65  0236               	subwf	___flge@ff1+2,w
  3630  0F66  1D03               	skipz
  3631  0F67  0008               	return
  3632  0F68  0839               	movf	___flge@ff2+1,w
  3633  0F69  0235               	subwf	___flge@ff1+1,w
  3634  0F6A  1D03               	skipz
  3635  0F6B  0008               	return
  3636  0F6C  0838               	movf	___flge@ff2,w
  3637  0F6D  0234               	subwf	___flge@ff1,w
  3638  0F6E  0008               	return
  3639  0F6F                     __end_of___flge:	
  3640  0F6F                     __ptext18:	
  3641 ;; *************** function _PWM_Init *****************
  3642 ;; Defined at:
  3643 ;;		line 186 in file "main.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  2  121[None  ] int 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2
  3652 ;; Tracked objects:
  3653 ;;		On entry : 1F/1
  3654 ;;		On exit  : 1F/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3657 ;;      Params:         0       0       0       0
  3658 ;;      Locals:         0       0       0       0
  3659 ;;      Temps:          0       0       0       0
  3660 ;;      Totals:         0       0       0       0
  3661 ;;Total ram usage:        0 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    2
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _PWM_Init
  3673  0F6F                     _PWM_Init:	
  3674                           
  3675                           ;main.c: 207: PR2 = 0xFF;
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _PWM_Init: [wreg+status,2]
  3679  0F6F  30FF               	movlw	255
  3680  0F70  0020               	movlb	0	; select bank0
  3681  0F71  009B               	movwf	27	;volatile
  3682                           
  3683                           ;main.c: 208: CCP1CON = 0b00001100;
  3684  0F72  300C               	movlw	12
  3685  0F73  0025               	movlb	5	; select bank5
  3686  0F74  0093               	movwf	19	;volatile
  3687                           
  3688                           ;main.c: 209: CCPR1L = 0b00000000;
  3689  0F75  0191               	clrf	17	;volatile
  3690                           
  3691                           ;main.c: 210: PIR1bits.TMR2IF = 0;
  3692  0F76  0020               	movlb	0	; select bank0
  3693  0F77  1091               	bcf	17,1	;volatile
  3694                           
  3695                           ;main.c: 211: T2CON = 0b00000100;
  3696  0F78  3004               	movlw	4
  3697  0F79  009C               	movwf	28	;volatile
  3698  0F7A  0008               	return
  3699  0F7B                     __end_of_PWM_Init:	
  3700  0F7B                     __ptext13:	
  3701 ;; *************** function ___flsub *****************
  3702 ;; Defined at:
  3703 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  a               4   55[BANK0 ] long 
  3706 ;;  b               4   59[BANK0 ] long 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  4   55[BANK0 ] long 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0, pclath, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 1F/0
  3715 ;;		On exit  : 1F/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3718 ;;      Params:         0       8       0       0
  3719 ;;      Locals:         0       0       0       0
  3720 ;;      Temps:          0       0       0       0
  3721 ;;      Totals:         0       8       0       0
  3722 ;;Total ram usage:        8 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    3
  3725 ;; This function calls:
  3726 ;;		___fladd
  3727 ;; This function is called by:
  3728 ;;		_calculate_pidA
  3729 ;;		_calculate_pidM
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function ___flsub
  3735  0F7B                     ___flsub:	
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  3739  0F7B  3080               	movlw	128
  3740  0F7C  06DA               	xorwf	___flsub@a+3,f
  3741  0F7D  085E               	movf	___flsub@b+3,w
  3742  0F7E  00C6               	movwf	___fladd@b+3
  3743  0F7F  085D               	movf	___flsub@b+2,w
  3744  0F80  00C5               	movwf	___fladd@b+2
  3745  0F81  085C               	movf	___flsub@b+1,w
  3746  0F82  00C4               	movwf	___fladd@b+1
  3747  0F83  085B               	movf	___flsub@b,w
  3748  0F84  00C3               	movwf	___fladd@b
  3749  0F85  085A               	movf	___flsub@a+3,w
  3750  0F86  00CA               	movwf	___fladd@a+3
  3751  0F87  0859               	movf	___flsub@a+2,w
  3752  0F88  00C9               	movwf	___fladd@a+2
  3753  0F89  0858               	movf	___flsub@a+1,w
  3754  0F8A  00C8               	movwf	___fladd@a+1
  3755  0F8B  0857               	movf	___flsub@a,w
  3756  0F8C  00C7               	movwf	___fladd@a
  3757  0F8D  3184  245C         	fcall	___fladd
  3758  0F8F  0846               	movf	?___fladd+3,w
  3759  0F90  00DA               	movwf	?___flsub+3
  3760  0F91  0845               	movf	?___fladd+2,w
  3761  0F92  00D9               	movwf	?___flsub+2
  3762  0F93  0844               	movf	?___fladd+1,w
  3763  0F94  00D8               	movwf	?___flsub+1
  3764  0F95  0843               	movf	?___fladd,w
  3765  0F96  00D7               	movwf	?___flsub
  3766  0F97  0008               	return
  3767  0F98                     __end_of___flsub:	
  3768  0F98                     __ptext4:	
  3769 ;; *************** function ___wmul *****************
  3770 ;; Defined at:
  3771 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  multiplier      2    2[BANK0 ] unsigned int 
  3774 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  product         2    6[BANK0 ] unsigned int 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  2    2[BANK0 ] unsigned int 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 1F/0
  3783 ;;		On exit  : 1F/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3786 ;;      Params:         0       4       0       0
  3787 ;;      Locals:         0       2       0       0
  3788 ;;      Temps:          0       0       0       0
  3789 ;;      Totals:         0       6       0       0
  3790 ;;Total ram usage:        6 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    2
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_M_control
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           
  3801                           ;psect for function ___wmul
  3802  0F98                     ___wmul:	
  3803                           
  3804                           ;incstack = 0
  3805                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3806  0F98  01A6               	clrf	___wmul@product
  3807  0F99  01A7               	clrf	___wmul@product+1
  3808  0F9A                     l2978:	
  3809  0F9A  1C22               	btfss	___wmul@multiplier,0
  3810  0F9B  2FA0               	goto	l2982
  3811  0F9C  0824               	movf	___wmul@multiplicand,w
  3812  0F9D  07A6               	addwf	___wmul@product,f
  3813  0F9E  0825               	movf	___wmul@multiplicand+1,w
  3814  0F9F  3DA7               	addwfc	___wmul@product+1,f
  3815  0FA0                     l2982:	
  3816  0FA0  35A4               	lslf	___wmul@multiplicand,f
  3817  0FA1  0DA5               	rlf	___wmul@multiplicand+1,f
  3818  0FA2  36A3               	lsrf	___wmul@multiplier+1,f
  3819  0FA3  0CA2               	rrf	___wmul@multiplier,f
  3820  0FA4  0822               	movf	___wmul@multiplier,w
  3821  0FA5  0423               	iorwf	___wmul@multiplier+1,w
  3822  0FA6  1D03               	btfss	3,2
  3823  0FA7  2F9A               	goto	l2978
  3824  0FA8  0827               	movf	___wmul@product+1,w
  3825  0FA9  00A3               	movwf	?___wmul+1
  3826  0FAA  0826               	movf	___wmul@product,w
  3827  0FAB  00A2               	movwf	?___wmul
  3828  0FAC  0008               	return
  3829  0FAD                     __end_of___wmul:	
  3830  0FAD                     __ptext12:	
  3831 ;; *************** function ___fltol *****************
  3832 ;; Defined at:
  3833 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fltol.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  f1              4    2[BANK0 ] unsigned char 
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;  exp1            1   11[BANK0 ] unsigned char 
  3838 ;;  sign1           1   10[BANK0 ] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  4    2[BANK0 ] long 
  3841 ;; Registers used:
  3842 ;;		wreg, status,2, status,0
  3843 ;; Tracked objects:
  3844 ;;		On entry : 1F/0
  3845 ;;		On exit  : 1F/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3848 ;;      Params:         0       4       0       0
  3849 ;;      Locals:         0       2       0       0
  3850 ;;      Temps:          0       4       0       0
  3851 ;;      Totals:         0      10       0       0
  3852 ;;Total ram usage:       10 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    2
  3855 ;; This function calls:
  3856 ;;		Nothing
  3857 ;; This function is called by:
  3858 ;;		_calculate_pidA
  3859 ;;		_calculate_pidM
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           
  3864                           ;psect for function ___fltol
  3865  0FAD                     ___fltol:	
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  3869  0FAD  0822               	movf	___fltol@f1,w
  3870  0FAE  00A6               	movwf	??___fltol
  3871  0FAF  0823               	movf	___fltol@f1+1,w
  3872  0FB0  00A7               	movwf	??___fltol+1
  3873  0FB1  0824               	movf	___fltol@f1+2,w
  3874  0FB2  00A8               	movwf	??___fltol+2
  3875  0FB3  0825               	movf	___fltol@f1+3,w
  3876  0FB4  00A9               	movwf	??___fltol+3
  3877  0FB5  1003               	clrc
  3878  0FB6  0D28               	rlf	??___fltol+2,w
  3879  0FB7  0D29               	rlf	??___fltol+3,w
  3880  0FB8  00AB               	movwf	___fltol@exp1
  3881  0FB9  082B               	movf	___fltol@exp1,w
  3882  0FBA  1D03               	btfss	3,2
  3883  0FBB  2FC1               	goto	l3262
  3884  0FBC                     l3260:	
  3885  0FBC  01A2               	clrf	?___fltol
  3886  0FBD  01A3               	clrf	?___fltol+1
  3887  0FBE  01A4               	clrf	?___fltol+2
  3888  0FBF  01A5               	clrf	?___fltol+3
  3889  0FC0  0008               	return
  3890  0FC1                     l3262:	
  3891  0FC1  0822               	movf	___fltol@f1,w
  3892  0FC2  00A6               	movwf	??___fltol
  3893  0FC3  0823               	movf	___fltol@f1+1,w
  3894  0FC4  00A7               	movwf	??___fltol+1
  3895  0FC5  0824               	movf	___fltol@f1+2,w
  3896  0FC6  00A8               	movwf	??___fltol+2
  3897  0FC7  0825               	movf	___fltol@f1+3,w
  3898  0FC8  00A9               	movwf	??___fltol+3
  3899  0FC9  301F               	movlw	31
  3900  0FCA                     u3765:	
  3901  0FCA  36A9               	lsrf	??___fltol+3,f
  3902  0FCB  0CA8               	rrf	??___fltol+2,f
  3903  0FCC  0CA7               	rrf	??___fltol+1,f
  3904  0FCD  0CA6               	rrf	??___fltol,f
  3905  0FCE  0B89               	decfsz	9,f
  3906  0FCF  2FCA               	goto	u3765
  3907  0FD0  0826               	movf	??___fltol,w
  3908  0FD1  00AA               	movwf	___fltol@sign1
  3909  0FD2  3096               	movlw	150
  3910  0FD3  17A4               	bsf	___fltol@f1+2,7
  3911  0FD4  01A5               	clrf	___fltol@f1+3
  3912  0FD5  02AB               	subwf	___fltol@exp1,f
  3913  0FD6  1FAB               	btfss	___fltol@exp1,7
  3914  0FD7  2FE4               	goto	l3280
  3915  0FD8  082B               	movf	___fltol@exp1,w
  3916  0FD9  3A80               	xorlw	128
  3917  0FDA  3E97               	addlw	151
  3918  0FDB  1C03               	btfss	3,0
  3919  0FDC  2FBC               	goto	l3260
  3920  0FDD                     l3276:	
  3921  0FDD  36A5               	lsrf	___fltol@f1+3,f
  3922  0FDE  0CA4               	rrf	___fltol@f1+2,f
  3923  0FDF  0CA3               	rrf	___fltol@f1+1,f
  3924  0FE0  0CA2               	rrf	___fltol@f1,f
  3925  0FE1  0FAB               	incfsz	___fltol@exp1,f
  3926  0FE2  2FDD               	goto	l3276
  3927  0FE3  2FF1               	goto	l3288
  3928  0FE4                     l3280:	
  3929  0FE4  3020               	movlw	32
  3930  0FE5  022B               	subwf	___fltol@exp1,w
  3931  0FE6  1803               	btfsc	3,0
  3932  0FE7  2FBC               	goto	l3260
  3933  0FE8                     l3286:	
  3934  0FE8  082B               	movf	___fltol@exp1,w
  3935  0FE9  1903               	btfsc	3,2
  3936  0FEA  2FF1               	goto	l3288
  3937  0FEB  35A2               	lslf	___fltol@f1,f
  3938  0FEC  0DA3               	rlf	___fltol@f1+1,f
  3939  0FED  0DA4               	rlf	___fltol@f1+2,f
  3940  0FEE  0DA5               	rlf	___fltol@f1+3,f
  3941  0FEF  03AB               	decf	___fltol@exp1,f
  3942  0FF0  2FE8               	goto	l3286
  3943  0FF1                     l3288:	
  3944  0FF1  082A               	movf	___fltol@sign1,w
  3945  0FF2  1903               	btfsc	3,2
  3946  0FF3  0008               	return
  3947  0FF4  09A2               	comf	___fltol@f1,f
  3948  0FF5  09A3               	comf	___fltol@f1+1,f
  3949  0FF6  09A4               	comf	___fltol@f1+2,f
  3950  0FF7  09A5               	comf	___fltol@f1+3,f
  3951  0FF8  0AA2               	incf	___fltol@f1,f
  3952  0FF9  1903               	skipnz
  3953  0FFA  0AA3               	incf	___fltol@f1+1,f
  3954  0FFB  1903               	skipnz
  3955  0FFC  0AA4               	incf	___fltol@f1+2,f
  3956  0FFD  1903               	skipnz
  3957  0FFE  0AA5               	incf	___fltol@f1+3,f
  3958  0FFF  0008               	return
  3959  1000                     __end_of___fltol:	
  3960                           
  3961                           	psect	swtext1
  3962  069C                     __pswtext1:	
  3963  069C                     S3926:	
  3964  069C  3188  2859         	ljmp	l3740
  3965  069E  3188  285F         	ljmp	l3742
  3966  06A0  3188  2869         	ljmp	l3744
  3967  06A2  3188  2874         	ljmp	l3746
  3968  06A4  3188  28EF         	ljmp	l3780
  3969  06A6  3189  2956         	ljmp	l3802
  3970  06A8  3189  2960         	ljmp	l3804
  3971  06AA  3189  29F9         	ljmp	l3838
  3972                           
  3973                           	psect	text2
  3974  00DD                     __ptext2:	
  3975 ;; *************** function _calculate_pidM *****************
  3976 ;; Defined at:
  3977 ;;		line 271 in file "main.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  set             2   69[BANK0 ] int 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  pid             4   20[BANK1 ] float 
  3982 ;;  error           4   16[BANK1 ] float 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 1F/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3992 ;;      Params:         0       2       0       0
  3993 ;;      Locals:         0       0      12       0
  3994 ;;      Temps:          0       0       0       0
  3995 ;;      Totals:         0       2      12       0
  3996 ;;Total ram usage:       14 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    4
  3999 ;; This function calls:
  4000 ;;		_M_control
  4001 ;;		___fladd
  4002 ;;		___flge
  4003 ;;		___flmul
  4004 ;;		___flsub
  4005 ;;		___fltol
  4006 ;;		___xxtofl
  4007 ;; This function is called by:
  4008 ;;		_pre_pidM
  4009 ;;		_main
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function _calculate_pidM
  4015  00DD                     _calculate_pidM:	
  4016  00DD                     l3464:	
  4017                           ;incstack = 0
  4018                           ; Regs used in _calculate_pidM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4019                           
  4020                           
  4021                           ;main.c: 274: float pid = 0;
  4022  00DD  0021               	movlb	1	; select bank1
  4023  00DE  30AB               	movlw	((low (_I2C_buffer| 0))& (0+255)+11)
  4024  00DF  01E4               	clrf	calculate_pidM@pid^(0+128)
  4025  00E0  01E5               	clrf	(calculate_pidM@pid+1)^(0+128)
  4026  00E1  01E6               	clrf	(calculate_pidM@pid+2)^(0+128)
  4027  00E2  01E7               	clrf	(calculate_pidM@pid+3)^(0+128)
  4028                           
  4029                           ;main.c: 275: error = set - I2C_buffer.data.RPM;
  4030  00E3  0086               	movwf	6
  4031  00E4  0187               	clrf	7
  4032  00E5  3F40               	moviw [0]fsr1
  4033  00E6  0020               	movlb	0	; select bank0
  4034  00E7  0265               	subwf	calculate_pidM@set,w
  4035  00E8  00A6               	movwf	___xxtofl@val
  4036  00E9  3F41               	moviw [1]fsr1
  4037  00EA  3B66               	subwfb	calculate_pidM@set+1,w
  4038  00EB  00A7               	movwf	___xxtofl@val+1
  4039  00EC  01A8               	clrf	___xxtofl@val+2
  4040  00ED  1BA7               	btfsc	___xxtofl@val+1,7
  4041  00EE  03A8               	decf	___xxtofl@val+2,f
  4042  00EF  0828               	movf	___xxtofl@val+2,w
  4043  00F0  00A9               	movwf	___xxtofl@val+3
  4044  00F1  3001               	movlw	1
  4045  00F2  318E  261D  3180   	fcall	___xxtofl
  4046  00F5  0829               	movf	?___xxtofl+3,w
  4047  00F6  0021               	movlb	1	; select bank1
  4048  00F7  00E3               	movwf	(calculate_pidM@error+3)^(0+128)
  4049  00F8  0020               	movlb	0	; select bank0
  4050  00F9  0828               	movf	?___xxtofl+2,w
  4051  00FA  0021               	movlb	1	; select bank1
  4052  00FB  00E2               	movwf	(calculate_pidM@error+2)^(0+128)
  4053  00FC  0020               	movlb	0	; select bank0
  4054  00FD  0827               	movf	?___xxtofl+1,w
  4055  00FE  0021               	movlb	1	; select bank1
  4056  00FF  00E1               	movwf	(calculate_pidM@error+1)^(0+128)
  4057  0100  0020               	movlb	0	; select bank0
  4058  0101  0826               	movf	?___xxtofl,w
  4059  0102  0021               	movlb	1	; select bank1
  4060  0103  00E0               	movwf	calculate_pidM@error^(0+128)
  4061                           
  4062                           ;main.c: 276: pid = error * I2C_buffer.data.RPM_PID_KP;
  4063  0104  0863               	movf	(calculate_pidM@error+3)^(0+128),w
  4064  0105  0020               	movlb	0	; select bank0
  4065  0106  00AD               	movwf	___flmul@b+3
  4066  0107  0021               	movlb	1	; select bank1
  4067  0108  0862               	movf	(calculate_pidM@error+2)^(0+128),w
  4068  0109  0020               	movlb	0	; select bank0
  4069  010A  00AC               	movwf	___flmul@b+2
  4070  010B  0021               	movlb	1	; select bank1
  4071  010C  0861               	movf	(calculate_pidM@error+1)^(0+128),w
  4072  010D  0020               	movlb	0	; select bank0
  4073  010E  00AB               	movwf	___flmul@b+1
  4074  010F  0021               	movlb	1	; select bank1
  4075  0110  0860               	movf	calculate_pidM@error^(0+128),w
  4076  0111  0020               	movlb	0	; select bank0
  4077  0112  00AA               	movwf	___flmul@b
  4078  0113  3013               	movlw	19
  4079  0114  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  4080  0115  0086               	movwf	6
  4081  0116  0187               	clrf	7
  4082  0117  3F40               	moviw [0]fsr1
  4083  0118  00AE               	movwf	___flmul@a
  4084  0119  3F41               	moviw [1]fsr1
  4085  011A  00AF               	movwf	___flmul@a+1
  4086  011B  3F42               	moviw [2]fsr1
  4087  011C  00B0               	movwf	___flmul@a+2
  4088  011D  3F43               	moviw [3]fsr1
  4089  011E  00B1               	movwf	___flmul@a+3
  4090  011F  2291  3180         	fcall	___flmul
  4091  0121  082D               	movf	?___flmul+3,w
  4092  0122  0021               	movlb	1	; select bank1
  4093  0123  00E7               	movwf	(calculate_pidM@pid+3)^(0+128)
  4094  0124  0020               	movlb	0	; select bank0
  4095  0125  082C               	movf	?___flmul+2,w
  4096  0126  0021               	movlb	1	; select bank1
  4097  0127  00E6               	movwf	(calculate_pidM@pid+2)^(0+128)
  4098  0128  0020               	movlb	0	; select bank0
  4099  0129  082B               	movf	?___flmul+1,w
  4100  012A  0021               	movlb	1	; select bank1
  4101  012B  00E5               	movwf	(calculate_pidM@pid+1)^(0+128)
  4102  012C  0020               	movlb	0	; select bank0
  4103  012D  082A               	movf	?___flmul,w
  4104  012E  0021               	movlb	1	; select bank1
  4105  012F  00E4               	movwf	calculate_pidM@pid^(0+128)
  4106                           
  4107                           ;main.c: 277: accumulatorM += error;
  4108  0130  0863               	movf	(calculate_pidM@error+3)^(0+128),w
  4109  0131  0020               	movlb	0	; select bank0
  4110  0132  00C6               	movwf	___fladd@b+3
  4111  0133  0021               	movlb	1	; select bank1
  4112  0134  0862               	movf	(calculate_pidM@error+2)^(0+128),w
  4113  0135  0020               	movlb	0	; select bank0
  4114  0136  00C5               	movwf	___fladd@b+2
  4115  0137  0021               	movlb	1	; select bank1
  4116  0138  0861               	movf	(calculate_pidM@error+1)^(0+128),w
  4117  0139  0020               	movlb	0	; select bank0
  4118  013A  00C4               	movwf	___fladd@b+1
  4119  013B  0021               	movlb	1	; select bank1
  4120  013C  0860               	movf	calculate_pidM@error^(0+128),w
  4121  013D  0020               	movlb	0	; select bank0
  4122  013E  00C3               	movwf	___fladd@b
  4123  013F  0022               	movlb	2	; select bank2
  4124  0140  082F               	movf	(_accumulatorM+3)^(0+256),w
  4125  0141  0020               	movlb	0	; select bank0
  4126  0142  00CA               	movwf	___fladd@a+3
  4127  0143  0022               	movlb	2	; select bank2
  4128  0144  082E               	movf	(_accumulatorM+2)^(0+256),w
  4129  0145  0020               	movlb	0	; select bank0
  4130  0146  00C9               	movwf	___fladd@a+2
  4131  0147  0022               	movlb	2	; select bank2
  4132  0148  082D               	movf	(_accumulatorM+1)^(0+256),w
  4133  0149  0020               	movlb	0	; select bank0
  4134  014A  00C8               	movwf	___fladd@a+1
  4135  014B  0022               	movlb	2	; select bank2
  4136  014C  082C               	movf	_accumulatorM^(0+256),w
  4137  014D  0020               	movlb	0	; select bank0
  4138  014E  00C7               	movwf	___fladd@a
  4139  014F  3184  245C  3180   	fcall	___fladd
  4140  0152  0846               	movf	?___fladd+3,w
  4141  0153  0022               	movlb	2	; select bank2
  4142  0154  00AF               	movwf	(_accumulatorM+3)^(0+256)
  4143  0155  0020               	movlb	0	; select bank0
  4144  0156  0845               	movf	?___fladd+2,w
  4145  0157  0022               	movlb	2	; select bank2
  4146  0158  00AE               	movwf	(_accumulatorM+2)^(0+256)
  4147  0159  0020               	movlb	0	; select bank0
  4148  015A  0844               	movf	?___fladd+1,w
  4149  015B  0022               	movlb	2	; select bank2
  4150  015C  00AD               	movwf	(_accumulatorM+1)^(0+256)
  4151  015D  0020               	movlb	0	; select bank0
  4152  015E  0843               	movf	?___fladd,w
  4153  015F  0022               	movlb	2	; select bank2
  4154  0160  00AC               	movwf	_accumulatorM^(0+256)
  4155                           
  4156                           ;main.c: 278: pid += I2C_buffer.data.RPM_PID_KI*accumulatorM;
  4157  0161  301B               	movlw	27
  4158  0162  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  4159  0163  0086               	movwf	6
  4160  0164  0187               	clrf	7
  4161  0165  3F40               	moviw [0]fsr1
  4162  0166  0020               	movlb	0	; select bank0
  4163  0167  00AE               	movwf	___flmul@a
  4164  0168  3F41               	moviw [1]fsr1
  4165  0169  00AF               	movwf	___flmul@a+1
  4166  016A  3F42               	moviw [2]fsr1
  4167  016B  00B0               	movwf	___flmul@a+2
  4168  016C  3F43               	moviw [3]fsr1
  4169  016D  00B1               	movwf	___flmul@a+3
  4170  016E  0022               	movlb	2	; select bank2
  4171  016F  082F               	movf	(_accumulatorM+3)^(0+256),w
  4172  0170  0020               	movlb	0	; select bank0
  4173  0171  00AD               	movwf	___flmul@b+3
  4174  0172  0022               	movlb	2	; select bank2
  4175  0173  082E               	movf	(_accumulatorM+2)^(0+256),w
  4176  0174  0020               	movlb	0	; select bank0
  4177  0175  00AC               	movwf	___flmul@b+2
  4178  0176  0022               	movlb	2	; select bank2
  4179  0177  082D               	movf	(_accumulatorM+1)^(0+256),w
  4180  0178  0020               	movlb	0	; select bank0
  4181  0179  00AB               	movwf	___flmul@b+1
  4182  017A  0022               	movlb	2	; select bank2
  4183  017B  082C               	movf	_accumulatorM^(0+256),w
  4184  017C  0020               	movlb	0	; select bank0
  4185  017D  00AA               	movwf	___flmul@b
  4186  017E  2291               	fcall	___flmul
  4187  017F  082D               	movf	?___flmul+3,w
  4188  0180  00C6               	movwf	___fladd@b+3
  4189  0181  082C               	movf	?___flmul+2,w
  4190  0182  00C5               	movwf	___fladd@b+2
  4191  0183  082B               	movf	?___flmul+1,w
  4192  0184  00C4               	movwf	___fladd@b+1
  4193  0185  082A               	movf	?___flmul,w
  4194  0186  00C3               	movwf	___fladd@b
  4195  0187  0021               	movlb	1	; select bank1
  4196  0188  0867               	movf	(calculate_pidM@pid+3)^(0+128),w
  4197  0189  0020               	movlb	0	; select bank0
  4198  018A  00CA               	movwf	___fladd@a+3
  4199  018B  0021               	movlb	1	; select bank1
  4200  018C  0866               	movf	(calculate_pidM@pid+2)^(0+128),w
  4201  018D  0020               	movlb	0	; select bank0
  4202  018E  00C9               	movwf	___fladd@a+2
  4203  018F  0021               	movlb	1	; select bank1
  4204  0190  0865               	movf	(calculate_pidM@pid+1)^(0+128),w
  4205  0191  0020               	movlb	0	; select bank0
  4206  0192  00C8               	movwf	___fladd@a+1
  4207  0193  0021               	movlb	1	; select bank1
  4208  0194  0864               	movf	calculate_pidM@pid^(0+128),w
  4209  0195  0020               	movlb	0	; select bank0
  4210  0196  00C7               	movwf	___fladd@a
  4211  0197  3184  245C  3180   	fcall	___fladd
  4212  019A  0846               	movf	?___fladd+3,w
  4213  019B  0021               	movlb	1	; select bank1
  4214  019C  00E7               	movwf	(calculate_pidM@pid+3)^(0+128)
  4215  019D  0020               	movlb	0	; select bank0
  4216  019E  0845               	movf	?___fladd+2,w
  4217  019F  0021               	movlb	1	; select bank1
  4218  01A0  00E6               	movwf	(calculate_pidM@pid+2)^(0+128)
  4219  01A1  0020               	movlb	0	; select bank0
  4220  01A2  0844               	movf	?___fladd+1,w
  4221  01A3  0021               	movlb	1	; select bank1
  4222  01A4  00E5               	movwf	(calculate_pidM@pid+1)^(0+128)
  4223  01A5  0020               	movlb	0	; select bank0
  4224  01A6  0843               	movf	?___fladd,w
  4225  01A7  0021               	movlb	1	; select bank1
  4226  01A8  00E4               	movwf	calculate_pidM@pid^(0+128)
  4227                           
  4228                           ;main.c: 279: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  4229  01A9  0863               	movf	(calculate_pidM@error+3)^(0+128),w
  4230  01AA  0020               	movlb	0	; select bank0
  4231  01AB  00DE               	movwf	___flsub@b+3
  4232  01AC  0021               	movlb	1	; select bank1
  4233  01AD  0862               	movf	(calculate_pidM@error+2)^(0+128),w
  4234  01AE  0020               	movlb	0	; select bank0
  4235  01AF  00DD               	movwf	___flsub@b+2
  4236  01B0  0021               	movlb	1	; select bank1
  4237  01B1  0861               	movf	(calculate_pidM@error+1)^(0+128),w
  4238  01B2  0020               	movlb	0	; select bank0
  4239  01B3  00DC               	movwf	___flsub@b+1
  4240  01B4  0021               	movlb	1	; select bank1
  4241  01B5  0860               	movf	calculate_pidM@error^(0+128),w
  4242  01B6  0020               	movlb	0	; select bank0
  4243  01B7  00DB               	movwf	___flsub@b
  4244  01B8  0022               	movlb	2	; select bank2
  4245  01B9  082B               	movf	(_lasterrorM+3)^(0+256),w
  4246  01BA  0020               	movlb	0	; select bank0
  4247  01BB  00DA               	movwf	___flsub@a+3
  4248  01BC  0022               	movlb	2	; select bank2
  4249  01BD  082A               	movf	(_lasterrorM+2)^(0+256),w
  4250  01BE  0020               	movlb	0	; select bank0
  4251  01BF  00D9               	movwf	___flsub@a+2
  4252  01C0  0022               	movlb	2	; select bank2
  4253  01C1  0829               	movf	(_lasterrorM+1)^(0+256),w
  4254  01C2  0020               	movlb	0	; select bank0
  4255  01C3  00D8               	movwf	___flsub@a+1
  4256  01C4  0022               	movlb	2	; select bank2
  4257  01C5  0828               	movf	_lasterrorM^(0+256),w
  4258  01C6  0020               	movlb	0	; select bank0
  4259  01C7  00D7               	movwf	___flsub@a
  4260  01C8  318F  277B  3180   	fcall	___flsub
  4261  01CB  085A               	movf	?___flsub+3,w
  4262  01CC  00B1               	movwf	___flmul@a+3
  4263  01CD  0859               	movf	?___flsub+2,w
  4264  01CE  00B0               	movwf	___flmul@a+2
  4265  01CF  0858               	movf	?___flsub+1,w
  4266  01D0  00AF               	movwf	___flmul@a+1
  4267  01D1  0857               	movf	?___flsub,w
  4268  01D2  00AE               	movwf	___flmul@a
  4269  01D3  3017               	movlw	23
  4270  01D4  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  4271  01D5  0086               	movwf	6
  4272  01D6  0187               	clrf	7
  4273  01D7  3F40               	moviw [0]fsr1
  4274  01D8  00AA               	movwf	___flmul@b
  4275  01D9  3F41               	moviw [1]fsr1
  4276  01DA  00AB               	movwf	___flmul@b+1
  4277  01DB  3F42               	moviw [2]fsr1
  4278  01DC  00AC               	movwf	___flmul@b+2
  4279  01DD  3F43               	moviw [3]fsr1
  4280  01DE  00AD               	movwf	___flmul@b+3
  4281  01DF  2291  3180         	fcall	___flmul
  4282  01E1  082D               	movf	?___flmul+3,w
  4283  01E2  0021               	movlb	1	; select bank1
  4284  01E3  00DF               	movwf	(_calculate_pidM$1318+3)^(0+128)
  4285  01E4  0020               	movlb	0	; select bank0
  4286  01E5  082C               	movf	?___flmul+2,w
  4287  01E6  0021               	movlb	1	; select bank1
  4288  01E7  00DE               	movwf	(_calculate_pidM$1318+2)^(0+128)
  4289  01E8  0020               	movlb	0	; select bank0
  4290  01E9  082B               	movf	?___flmul+1,w
  4291  01EA  0021               	movlb	1	; select bank1
  4292  01EB  00DD               	movwf	(_calculate_pidM$1318+1)^(0+128)
  4293  01EC  0020               	movlb	0	; select bank0
  4294  01ED  082A               	movf	?___flmul,w
  4295  01EE  0021               	movlb	1	; select bank1
  4296  01EF  00DC               	movwf	_calculate_pidM$1318^(0+128)
  4297                           
  4298                           ;main.c: 279: pid += I2C_buffer.data.RPM_PID_KD * (error - lasterrorM);
  4299  01F0  085F               	movf	(_calculate_pidM$1318+3)^(0+128),w
  4300  01F1  0020               	movlb	0	; select bank0
  4301  01F2  00C6               	movwf	___fladd@b+3
  4302  01F3  0021               	movlb	1	; select bank1
  4303  01F4  085E               	movf	(_calculate_pidM$1318+2)^(0+128),w
  4304  01F5  0020               	movlb	0	; select bank0
  4305  01F6  00C5               	movwf	___fladd@b+2
  4306  01F7  0021               	movlb	1	; select bank1
  4307  01F8  085D               	movf	(_calculate_pidM$1318+1)^(0+128),w
  4308  01F9  0020               	movlb	0	; select bank0
  4309  01FA  00C4               	movwf	___fladd@b+1
  4310  01FB  0021               	movlb	1	; select bank1
  4311  01FC  085C               	movf	_calculate_pidM$1318^(0+128),w
  4312  01FD  0020               	movlb	0	; select bank0
  4313  01FE  00C3               	movwf	___fladd@b
  4314  01FF  0021               	movlb	1	; select bank1
  4315  0200  0867               	movf	(calculate_pidM@pid+3)^(0+128),w
  4316  0201  0020               	movlb	0	; select bank0
  4317  0202  00CA               	movwf	___fladd@a+3
  4318  0203  0021               	movlb	1	; select bank1
  4319  0204  0866               	movf	(calculate_pidM@pid+2)^(0+128),w
  4320  0205  0020               	movlb	0	; select bank0
  4321  0206  00C9               	movwf	___fladd@a+2
  4322  0207  0021               	movlb	1	; select bank1
  4323  0208  0865               	movf	(calculate_pidM@pid+1)^(0+128),w
  4324  0209  0020               	movlb	0	; select bank0
  4325  020A  00C8               	movwf	___fladd@a+1
  4326  020B  0021               	movlb	1	; select bank1
  4327  020C  0864               	movf	calculate_pidM@pid^(0+128),w
  4328  020D  0020               	movlb	0	; select bank0
  4329  020E  00C7               	movwf	___fladd@a
  4330  020F  3184  245C  3180   	fcall	___fladd
  4331  0212  0846               	movf	?___fladd+3,w
  4332  0213  0021               	movlb	1	; select bank1
  4333  0214  00E7               	movwf	(calculate_pidM@pid+3)^(0+128)
  4334  0215  0020               	movlb	0	; select bank0
  4335  0216  0845               	movf	?___fladd+2,w
  4336  0217  0021               	movlb	1	; select bank1
  4337  0218  00E6               	movwf	(calculate_pidM@pid+2)^(0+128)
  4338  0219  0020               	movlb	0	; select bank0
  4339  021A  0844               	movf	?___fladd+1,w
  4340  021B  0021               	movlb	1	; select bank1
  4341  021C  00E5               	movwf	(calculate_pidM@pid+1)^(0+128)
  4342  021D  0020               	movlb	0	; select bank0
  4343  021E  0843               	movf	?___fladd,w
  4344  021F  0021               	movlb	1	; select bank1
  4345  0220  00E4               	movwf	calculate_pidM@pid^(0+128)
  4346                           
  4347                           ;main.c: 280: lasterrorM = error;
  4348  0221  0863               	movf	(calculate_pidM@error+3)^(0+128),w
  4349  0222  0022               	movlb	2	; select bank2
  4350  0223  00AB               	movwf	(_lasterrorM+3)^(0+256)
  4351  0224  0021               	movlb	1	; select bank1
  4352  0225  0862               	movf	(calculate_pidM@error+2)^(0+128),w
  4353  0226  0022               	movlb	2	; select bank2
  4354  0227  00AA               	movwf	(_lasterrorM+2)^(0+256)
  4355  0228  0021               	movlb	1	; select bank1
  4356  0229  0861               	movf	(calculate_pidM@error+1)^(0+128),w
  4357  022A  0022               	movlb	2	; select bank2
  4358  022B  00A9               	movwf	(_lasterrorM+1)^(0+256)
  4359  022C  0021               	movlb	1	; select bank1
  4360  022D  0860               	movf	calculate_pidM@error^(0+128),w
  4361  022E  0022               	movlb	2	; select bank2
  4362  022F  00A8               	movwf	_lasterrorM^(0+256)
  4363                           
  4364                           ;main.c: 281: if (pid >= 1023)
  4365  0230  0021               	movlb	1	; select bank1
  4366  0231  0867               	movf	(calculate_pidM@pid+3)^(0+128),w
  4367  0232  0020               	movlb	0	; select bank0
  4368  0233  00B7               	movwf	___flge@ff1+3
  4369  0234  0021               	movlb	1	; select bank1
  4370  0235  0866               	movf	(calculate_pidM@pid+2)^(0+128),w
  4371  0236  0020               	movlb	0	; select bank0
  4372  0237  00B6               	movwf	___flge@ff1+2
  4373  0238  0021               	movlb	1	; select bank1
  4374  0239  0865               	movf	(calculate_pidM@pid+1)^(0+128),w
  4375  023A  0020               	movlb	0	; select bank0
  4376  023B  00B5               	movwf	___flge@ff1+1
  4377  023C  0021               	movlb	1	; select bank1
  4378  023D  0864               	movf	calculate_pidM@pid^(0+128),w
  4379  023E  0020               	movlb	0	; select bank0
  4380  023F  00B4               	movwf	___flge@ff1
  4381  0240  3044               	movlw	68
  4382  0241  00BB               	movwf	___flge@ff2+3
  4383  0242  307F               	movlw	127
  4384  0243  00BA               	movwf	___flge@ff2+2
  4385  0244  30C0               	movlw	192
  4386  0245  00B9               	movwf	___flge@ff2+1
  4387  0246  01B8               	clrf	___flge@ff2
  4388  0247  318F  270D  3180   	fcall	___flge
  4389  024A  1C03               	btfss	3,0
  4390  024B  2A54               	goto	l3482
  4391                           
  4392                           ;main.c: 282: {;main.c: 283: pid = 1023;
  4393  024C  3044               	movlw	68
  4394  024D  0021               	movlb	1	; select bank1
  4395  024E  00E7               	movwf	(calculate_pidM@pid+3)^(0+128)
  4396  024F  307F               	movlw	127
  4397  0250  00E6               	movwf	(calculate_pidM@pid+2)^(0+128)
  4398  0251  30C0               	movlw	192
  4399  0252  00E5               	movwf	(calculate_pidM@pid+1)^(0+128)
  4400  0253  01E4               	clrf	calculate_pidM@pid^(0+128)
  4401  0254                     l3482:	
  4402                           
  4403                           ;main.c: 284: };main.c: 285: if (pid <= -1023) {
  4404  0254  30C4               	movlw	196
  4405  0255  0020               	movlb	0	; select bank0
  4406  0256  00B7               	movwf	___flge@ff1+3
  4407  0257  307F               	movlw	127
  4408  0258  00B6               	movwf	___flge@ff1+2
  4409  0259  30C0               	movlw	192
  4410  025A  00B5               	movwf	___flge@ff1+1
  4411  025B  01B4               	clrf	___flge@ff1
  4412  025C  0021               	movlb	1	; select bank1
  4413  025D  0867               	movf	(calculate_pidM@pid+3)^(0+128),w
  4414  025E  0020               	movlb	0	; select bank0
  4415  025F  00BB               	movwf	___flge@ff2+3
  4416  0260  0021               	movlb	1	; select bank1
  4417  0261  0866               	movf	(calculate_pidM@pid+2)^(0+128),w
  4418  0262  0020               	movlb	0	; select bank0
  4419  0263  00BA               	movwf	___flge@ff2+2
  4420  0264  0021               	movlb	1	; select bank1
  4421  0265  0865               	movf	(calculate_pidM@pid+1)^(0+128),w
  4422  0266  0020               	movlb	0	; select bank0
  4423  0267  00B9               	movwf	___flge@ff2+1
  4424  0268  0021               	movlb	1	; select bank1
  4425  0269  0864               	movf	calculate_pidM@pid^(0+128),w
  4426  026A  0020               	movlb	0	; select bank0
  4427  026B  00B8               	movwf	___flge@ff2
  4428  026C  318F  270D  3180   	fcall	___flge
  4429  026F  1C03               	btfss	3,0
  4430  0270  2A79               	goto	l3486
  4431                           
  4432                           ;main.c: 286: pid = -1023;
  4433  0271  30C4               	movlw	196
  4434  0272  0021               	movlb	1	; select bank1
  4435  0273  00E7               	movwf	(calculate_pidM@pid+3)^(0+128)
  4436  0274  307F               	movlw	127
  4437  0275  00E6               	movwf	(calculate_pidM@pid+2)^(0+128)
  4438  0276  30C0               	movlw	192
  4439  0277  00E5               	movwf	(calculate_pidM@pid+1)^(0+128)
  4440  0278  01E4               	clrf	calculate_pidM@pid^(0+128)
  4441  0279                     l3486:	
  4442                           
  4443                           ;main.c: 287: };main.c: 288: M_control((int) pid);
  4444  0279  0021               	movlb	1	; select bank1
  4445  027A  0867               	movf	(calculate_pidM@pid+3)^(0+128),w
  4446  027B  0020               	movlb	0	; select bank0
  4447  027C  00A5               	movwf	___fltol@f1+3
  4448  027D  0021               	movlb	1	; select bank1
  4449  027E  0866               	movf	(calculate_pidM@pid+2)^(0+128),w
  4450  027F  0020               	movlb	0	; select bank0
  4451  0280  00A4               	movwf	___fltol@f1+2
  4452  0281  0021               	movlb	1	; select bank1
  4453  0282  0865               	movf	(calculate_pidM@pid+1)^(0+128),w
  4454  0283  0020               	movlb	0	; select bank0
  4455  0284  00A3               	movwf	___fltol@f1+1
  4456  0285  0021               	movlb	1	; select bank1
  4457  0286  0864               	movf	calculate_pidM@pid^(0+128),w
  4458  0287  0020               	movlb	0	; select bank0
  4459  0288  00A2               	movwf	___fltol@f1
  4460  0289  318F  27AD         	fcall	___fltol
  4461  028B  0823               	movf	?___fltol+1,w
  4462  028C  00AD               	movwf	M_control@ctr+1
  4463  028D  0822               	movf	?___fltol,w
  4464  028E  00AC               	movwf	M_control@ctr
  4465  028F  318B  2BB6         	ljmp	l3222
  4466  0291                     __end_of_calculate_pidM:	
  4467  0291                     __ptext15:	
  4468 ;; *************** function ___flmul *****************
  4469 ;; Defined at:
  4470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcmul.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  b               4   10[BANK0 ] unsigned char 
  4473 ;;  a               4   14[BANK0 ] unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  prod            4   29[BANK0 ] struct .
  4476 ;;  grs             4   25[BANK0 ] unsigned long 
  4477 ;;  temp            2   33[BANK0 ] struct .
  4478 ;;  bexp            1   24[BANK0 ] unsigned char 
  4479 ;;  aexp            1   23[BANK0 ] unsigned char 
  4480 ;;  sign            1   22[BANK0 ] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  4   10[BANK0 ] unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, pclath, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 1F/0
  4487 ;;		On exit  : 1F/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4490 ;;      Params:         0       8       0       0
  4491 ;;      Locals:         0      13       0       0
  4492 ;;      Temps:          0       4       0       0
  4493 ;;      Totals:         0      25       0       0
  4494 ;;Total ram usage:       25 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    3
  4497 ;; This function calls:
  4498 ;;		__Umul8_16
  4499 ;; This function is called by:
  4500 ;;		_calculate_pidA
  4501 ;;		_calculate_pidM
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function ___flmul
  4507  0291                     ___flmul:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  4511  0291  082D               	movf	___flmul@b+3,w
  4512  0292  00B6               	movwf	___flmul@sign
  4513  0293  3080               	movlw	128
  4514  0294  05B6               	andwf	___flmul@sign,f
  4515  0295  352D               	lslf	___flmul@b+3,w
  4516  0296  00B8               	movwf	___flmul@bexp
  4517  0297  1BAC               	btfsc	___flmul@b+2,7
  4518  0298  1438               	bsf	___flmul@bexp,0
  4519  0299  0838               	movf	___flmul@bexp,w
  4520  029A  1903               	btfsc	3,2
  4521  029B  2AA4               	goto	l701
  4522  029C  0F38               	incfsz	___flmul@bexp,w
  4523  029D  2AA2               	goto	l702
  4524  029E  01AA               	clrf	___flmul@b
  4525  029F  01AB               	clrf	___flmul@b+1
  4526  02A0  01AC               	clrf	___flmul@b+2
  4527  02A1  01AD               	clrf	___flmul@b+3
  4528  02A2                     l702:	
  4529  02A2  17AC               	bsf	___flmul@b+2,7
  4530  02A3  2AA8               	goto	l3314
  4531  02A4                     l701:	
  4532  02A4  01AA               	clrf	___flmul@b
  4533  02A5  01AB               	clrf	___flmul@b+1
  4534  02A6  01AC               	clrf	___flmul@b+2
  4535  02A7  01AD               	clrf	___flmul@b+3
  4536  02A8                     l3314:	
  4537  02A8  0831               	movf	___flmul@a+3,w
  4538  02A9  3980               	andlw	128
  4539  02AA  06B6               	xorwf	___flmul@sign,f
  4540  02AB  3531               	lslf	___flmul@a+3,w
  4541  02AC  00B7               	movwf	___flmul@aexp
  4542  02AD  1BB0               	btfsc	___flmul@a+2,7
  4543  02AE  1437               	bsf	___flmul@aexp,0
  4544  02AF  0837               	movf	___flmul@aexp,w
  4545  02B0  1903               	btfsc	3,2
  4546  02B1  2ABA               	goto	l705
  4547  02B2  0F37               	incfsz	___flmul@aexp,w
  4548  02B3  2AB8               	goto	l706
  4549  02B4  01AE               	clrf	___flmul@a
  4550  02B5  01AF               	clrf	___flmul@a+1
  4551  02B6  01B0               	clrf	___flmul@a+2
  4552  02B7  01B1               	clrf	___flmul@a+3
  4553  02B8                     l706:	
  4554  02B8  17B0               	bsf	___flmul@a+2,7
  4555  02B9  2ABE               	goto	l3326
  4556  02BA                     l705:	
  4557  02BA  01AE               	clrf	___flmul@a
  4558  02BB  01AF               	clrf	___flmul@a+1
  4559  02BC  01B0               	clrf	___flmul@a+2
  4560  02BD  01B1               	clrf	___flmul@a+3
  4561  02BE                     l3326:	
  4562  02BE  0837               	movf	___flmul@aexp,w
  4563  02BF  1D03               	btfss	3,2
  4564  02C0  0838               	movf	___flmul@bexp,w
  4565  02C1  1D03               	btfss	3,2
  4566  02C2  2AC8               	goto	l3330
  4567  02C3  01AA               	clrf	?___flmul
  4568  02C4  01AB               	clrf	?___flmul+1
  4569  02C5  01AC               	clrf	?___flmul+2
  4570  02C6  01AD               	clrf	?___flmul+3
  4571  02C7  0008               	return
  4572  02C8                     l3330:	
  4573  02C8  082A               	movf	___flmul@b,w
  4574  02C9  00A2               	movwf	__Umul8_16@multiplicand
  4575  02CA  0830               	movf	___flmul@a+2,w
  4576  02CB  2413  3180         	fcall	__Umul8_16
  4577  02CD  0823               	movf	?__Umul8_16+1,w
  4578  02CE  00C2               	movwf	___flmul@temp+1
  4579  02CF  0822               	movf	?__Umul8_16,w
  4580  02D0  00C1               	movwf	___flmul@temp
  4581  02D1  00B9               	movwf	___flmul@grs
  4582  02D2  01BA               	clrf	___flmul@grs+1
  4583  02D3  01BB               	clrf	___flmul@grs+2
  4584  02D4  01BC               	clrf	___flmul@grs+3
  4585  02D5  0842               	movf	___flmul@temp+1,w
  4586  02D6  00BD               	movwf	___flmul@prod
  4587  02D7  01BE               	clrf	___flmul@prod+1
  4588  02D8  01BF               	clrf	___flmul@prod+2
  4589  02D9  01C0               	clrf	___flmul@prod+3
  4590  02DA  082B               	movf	___flmul@b+1,w
  4591  02DB  00A2               	movwf	__Umul8_16@multiplicand
  4592  02DC  082F               	movf	___flmul@a+1,w
  4593  02DD  2413  3180         	fcall	__Umul8_16
  4594  02DF  0823               	movf	?__Umul8_16+1,w
  4595  02E0  00C2               	movwf	___flmul@temp+1
  4596  02E1  0822               	movf	?__Umul8_16,w
  4597  02E2  00C1               	movwf	___flmul@temp
  4598  02E3  07B9               	addwf	___flmul@grs,f
  4599  02E4  3001               	movlw	1
  4600  02E5  1803               	skipnc
  4601  02E6  07BA               	addwf	___flmul@grs+1,f
  4602  02E7  1803               	skipnc
  4603  02E8  07BB               	addwf	___flmul@grs+2,f
  4604  02E9  1803               	skipnc
  4605  02EA  07BC               	addwf	___flmul@grs+3,f
  4606  02EB  0842               	movf	___flmul@temp+1,w
  4607  02EC  07BD               	addwf	___flmul@prod,f
  4608  02ED  3001               	movlw	1
  4609  02EE  1803               	skipnc
  4610  02EF  07BE               	addwf	___flmul@prod+1,f
  4611  02F0  1803               	skipnc
  4612  02F1  07BF               	addwf	___flmul@prod+2,f
  4613  02F2  1803               	skipnc
  4614  02F3  07C0               	addwf	___flmul@prod+3,f
  4615  02F4  082C               	movf	___flmul@b+2,w
  4616  02F5  00A2               	movwf	__Umul8_16@multiplicand
  4617  02F6  082E               	movf	___flmul@a,w
  4618  02F7  2413  3180         	fcall	__Umul8_16
  4619  02F9  0823               	movf	?__Umul8_16+1,w
  4620  02FA  00C2               	movwf	___flmul@temp+1
  4621  02FB  0822               	movf	?__Umul8_16,w
  4622  02FC  00C1               	movwf	___flmul@temp
  4623  02FD  07B9               	addwf	___flmul@grs,f
  4624  02FE  3001               	movlw	1
  4625  02FF  1803               	skipnc
  4626  0300  07BA               	addwf	___flmul@grs+1,f
  4627  0301  1803               	skipnc
  4628  0302  07BB               	addwf	___flmul@grs+2,f
  4629  0303  1803               	skipnc
  4630  0304  07BC               	addwf	___flmul@grs+3,f
  4631  0305  0842               	movf	___flmul@temp+1,w
  4632  0306  07BD               	addwf	___flmul@prod,f
  4633  0307  3001               	movlw	1
  4634  0308  1803               	skipnc
  4635  0309  07BE               	addwf	___flmul@prod+1,f
  4636  030A  1803               	skipnc
  4637  030B  07BF               	addwf	___flmul@prod+2,f
  4638  030C  1803               	skipnc
  4639  030D  07C0               	addwf	___flmul@prod+3,f
  4640  030E  083B               	movf	___flmul@grs+2,w
  4641  030F  00BC               	movwf	___flmul@grs+3
  4642  0310  083A               	movf	___flmul@grs+1,w
  4643  0311  00BB               	movwf	___flmul@grs+2
  4644  0312  0839               	movf	___flmul@grs,w
  4645  0313  00BA               	movwf	___flmul@grs+1
  4646  0314  01B9               	clrf	___flmul@grs
  4647  0315  082B               	movf	___flmul@b+1,w
  4648  0316  00A2               	movwf	__Umul8_16@multiplicand
  4649  0317  082E               	movf	___flmul@a,w
  4650  0318  2413  3180         	fcall	__Umul8_16
  4651  031A  0823               	movf	?__Umul8_16+1,w
  4652  031B  00C2               	movwf	___flmul@temp+1
  4653  031C  0822               	movf	?__Umul8_16,w
  4654  031D  00C1               	movwf	___flmul@temp
  4655  031E  07B9               	addwf	___flmul@grs,f
  4656  031F  0842               	movf	___flmul@temp+1,w
  4657  0320  3DBA               	addwfc	___flmul@grs+1,f
  4658  0321  3000               	movlw	0
  4659  0322  3DBB               	addwfc	___flmul@grs+2,f
  4660  0323  3DBC               	addwfc	___flmul@grs+3,f
  4661  0324  082A               	movf	___flmul@b,w
  4662  0325  00A2               	movwf	__Umul8_16@multiplicand
  4663  0326  082F               	movf	___flmul@a+1,w
  4664  0327  2413  3180         	fcall	__Umul8_16
  4665  0329  0823               	movf	?__Umul8_16+1,w
  4666  032A  00C2               	movwf	___flmul@temp+1
  4667  032B  0822               	movf	?__Umul8_16,w
  4668  032C  00C1               	movwf	___flmul@temp
  4669  032D  07B9               	addwf	___flmul@grs,f
  4670  032E  0842               	movf	___flmul@temp+1,w
  4671  032F  3DBA               	addwfc	___flmul@grs+1,f
  4672  0330  3000               	movlw	0
  4673  0331  3DBB               	addwfc	___flmul@grs+2,f
  4674  0332  3DBC               	addwfc	___flmul@grs+3,f
  4675  0333  083B               	movf	___flmul@grs+2,w
  4676  0334  00BC               	movwf	___flmul@grs+3
  4677  0335  083A               	movf	___flmul@grs+1,w
  4678  0336  00BB               	movwf	___flmul@grs+2
  4679  0337  0839               	movf	___flmul@grs,w
  4680  0338  00BA               	movwf	___flmul@grs+1
  4681  0339  01B9               	clrf	___flmul@grs
  4682  033A  082A               	movf	___flmul@b,w
  4683  033B  00A2               	movwf	__Umul8_16@multiplicand
  4684  033C  082E               	movf	___flmul@a,w
  4685  033D  2413  3180         	fcall	__Umul8_16
  4686  033F  0823               	movf	?__Umul8_16+1,w
  4687  0340  00C2               	movwf	___flmul@temp+1
  4688  0341  0822               	movf	?__Umul8_16,w
  4689  0342  00C1               	movwf	___flmul@temp
  4690  0343  07B9               	addwf	___flmul@grs,f
  4691  0344  0842               	movf	___flmul@temp+1,w
  4692  0345  3DBA               	addwfc	___flmul@grs+1,f
  4693  0346  3000               	movlw	0
  4694  0347  3DBB               	addwfc	___flmul@grs+2,f
  4695  0348  3DBC               	addwfc	___flmul@grs+3,f
  4696  0349  082B               	movf	___flmul@b+1,w
  4697  034A  00A2               	movwf	__Umul8_16@multiplicand
  4698  034B  0830               	movf	___flmul@a+2,w
  4699  034C  2413  3180         	fcall	__Umul8_16
  4700  034E  0823               	movf	?__Umul8_16+1,w
  4701  034F  00C2               	movwf	___flmul@temp+1
  4702  0350  0822               	movf	?__Umul8_16,w
  4703  0351  00C1               	movwf	___flmul@temp
  4704  0352  07BD               	addwf	___flmul@prod,f
  4705  0353  0842               	movf	___flmul@temp+1,w
  4706  0354  3DBE               	addwfc	___flmul@prod+1,f
  4707  0355  3000               	movlw	0
  4708  0356  3DBF               	addwfc	___flmul@prod+2,f
  4709  0357  3DC0               	addwfc	___flmul@prod+3,f
  4710  0358  082C               	movf	___flmul@b+2,w
  4711  0359  00A2               	movwf	__Umul8_16@multiplicand
  4712  035A  082F               	movf	___flmul@a+1,w
  4713  035B  2413  3180         	fcall	__Umul8_16
  4714  035D  0823               	movf	?__Umul8_16+1,w
  4715  035E  00C2               	movwf	___flmul@temp+1
  4716  035F  0822               	movf	?__Umul8_16,w
  4717  0360  00C1               	movwf	___flmul@temp
  4718  0361  07BD               	addwf	___flmul@prod,f
  4719  0362  0842               	movf	___flmul@temp+1,w
  4720  0363  3DBE               	addwfc	___flmul@prod+1,f
  4721  0364  3000               	movlw	0
  4722  0365  3DBF               	addwfc	___flmul@prod+2,f
  4723  0366  3DC0               	addwfc	___flmul@prod+3,f
  4724  0367  082C               	movf	___flmul@b+2,w
  4725  0368  00A2               	movwf	__Umul8_16@multiplicand
  4726  0369  0830               	movf	___flmul@a+2,w
  4727  036A  2413  3180         	fcall	__Umul8_16
  4728  036C  0823               	movf	?__Umul8_16+1,w
  4729  036D  00C2               	movwf	___flmul@temp+1
  4730  036E  0822               	movf	?__Umul8_16,w
  4731  036F  00C1               	movwf	___flmul@temp
  4732  0370  00B2               	movwf	??___flmul
  4733  0371  0842               	movf	___flmul@temp+1,w
  4734  0372  00B3               	movwf	??___flmul+1
  4735  0373  01B4               	clrf	??___flmul+2
  4736  0374  01B5               	clrf	??___flmul+3
  4737  0375  0834               	movf	??___flmul+2,w
  4738  0376  00B5               	movwf	??___flmul+3
  4739  0377  0833               	movf	??___flmul+1,w
  4740  0378  00B4               	movwf	??___flmul+2
  4741  0379  0832               	movf	??___flmul,w
  4742  037A  00B3               	movwf	??___flmul+1
  4743  037B  01B2               	clrf	??___flmul
  4744  037C  0832               	movf	??___flmul,w
  4745  037D  07BD               	addwf	___flmul@prod,f
  4746  037E  0833               	movf	??___flmul+1,w
  4747  037F  3DBE               	addwfc	___flmul@prod+1,f
  4748  0380  0834               	movf	??___flmul+2,w
  4749  0381  3DBF               	addwfc	___flmul@prod+2,f
  4750  0382  0835               	movf	??___flmul+3,w
  4751  0383  3DC0               	addwfc	___flmul@prod+3,f
  4752  0384  083C               	movf	___flmul@grs+3,w
  4753  0385  07BD               	addwf	___flmul@prod,f
  4754  0386  3001               	movlw	1
  4755  0387  1803               	skipnc
  4756  0388  07BE               	addwf	___flmul@prod+1,f
  4757  0389  1803               	skipnc
  4758  038A  07BF               	addwf	___flmul@prod+2,f
  4759  038B  1803               	skipnc
  4760  038C  07C0               	addwf	___flmul@prod+3,f
  4761  038D  083B               	movf	___flmul@grs+2,w
  4762  038E  00BC               	movwf	___flmul@grs+3
  4763  038F  083A               	movf	___flmul@grs+1,w
  4764  0390  00BB               	movwf	___flmul@grs+2
  4765  0391  0839               	movf	___flmul@grs,w
  4766  0392  00BA               	movwf	___flmul@grs+1
  4767  0393  01B9               	clrf	___flmul@grs
  4768  0394  0838               	movf	___flmul@bexp,w
  4769  0395  00C1               	movwf	___flmul@temp
  4770  0396  01C2               	clrf	___flmul@temp+1
  4771  0397  0837               	movf	___flmul@aexp,w
  4772  0398  07C1               	addwf	___flmul@temp,f
  4773  0399  1803               	skipnc
  4774  039A  0AC2               	incf	___flmul@temp+1,f
  4775  039B  3082               	movlw	-126
  4776  039C                     L7:	
  4777  039C  07C1               	addwf	___flmul@temp,f
  4778  039D  1C03               	skipc
  4779  039E  03C2               	decf	___flmul@temp+1,f
  4780  039F  1BBF               	btfsc	___flmul@prod+2,7
  4781  03A0  2BAD               	goto	l3378
  4782  03A1  35BD               	lslf	___flmul@prod,f
  4783  03A2  0DBE               	rlf	___flmul@prod+1,f
  4784  03A3  0DBF               	rlf	___flmul@prod+2,f
  4785  03A4  0DC0               	rlf	___flmul@prod+3,f
  4786  03A5  1BBC               	btfsc	___flmul@grs+3,7
  4787  03A6  143D               	bsf	___flmul@prod,0
  4788  03A7  30FF               	movlw	-1
  4789  03A8  35B9               	lslf	___flmul@grs,f
  4790  03A9  0DBA               	rlf	___flmul@grs+1,f
  4791  03AA  0DBB               	rlf	___flmul@grs+2,f
  4792  03AB  0DBC               	rlf	___flmul@grs+3,f
  4793  03AC  2B9C               	goto	L7
  4794  03AD                     l3378:	
  4795  03AD  01B7               	clrf	___flmul@aexp
  4796  03AE  1FBC               	btfss	___flmul@grs+3,7
  4797  03AF  2BC2               	goto	l3388
  4798  03B0  0839               	movf	___flmul@grs,w
  4799  03B1  00B2               	movwf	??___flmul
  4800  03B2  083A               	movf	___flmul@grs+1,w
  4801  03B3  00B3               	movwf	??___flmul+1
  4802  03B4  083B               	movf	___flmul@grs+2,w
  4803  03B5  00B4               	movwf	??___flmul+2
  4804  03B6  307F               	movlw	127
  4805  03B7  053C               	andwf	___flmul@grs+3,w
  4806  03B8  00B5               	movwf	??___flmul+3
  4807  03B9  0434               	iorwf	??___flmul+2,w
  4808  03BA  0433               	iorwf	??___flmul+1,w
  4809  03BB  0432               	iorwf	??___flmul,w
  4810  03BC  1903               	skipnz
  4811  03BD  183D               	btfsc	___flmul@prod,0
  4812  03BE  2BC0               	goto	l3384
  4813  03BF  2BC2               	goto	l3388
  4814  03C0                     l3384:	
  4815  03C0  01B7               	clrf	___flmul@aexp
  4816  03C1  0AB7               	incf	___flmul@aexp,f
  4817  03C2                     l3388:	
  4818  03C2  0837               	movf	___flmul@aexp,w
  4819  03C3  1903               	btfsc	3,2
  4820  03C4  2BD4               	goto	l3398
  4821  03C5  3001               	movlw	1
  4822  03C6  07BD               	addwf	___flmul@prod,f
  4823  03C7  3000               	movlw	0
  4824  03C8  3DBE               	addwfc	___flmul@prod+1,f
  4825  03C9  3DBF               	addwfc	___flmul@prod+2,f
  4826  03CA  3DC0               	addwfc	___flmul@prod+3,f
  4827  03CB  1C40               	btfss	___flmul@prod+3,0
  4828  03CC  2BD4               	goto	l3398
  4829  03CD  37C0               	asrf	___flmul@prod+3,f
  4830  03CE  0CBF               	rrf	___flmul@prod+2,f
  4831  03CF  0CBE               	rrf	___flmul@prod+1,f
  4832  03D0  0CBD               	rrf	___flmul@prod,f
  4833  03D1  0AC1               	incf	___flmul@temp,f
  4834  03D2  1903               	skipnz
  4835  03D3  0AC2               	incf	___flmul@temp+1,f
  4836  03D4                     l3398:	
  4837  03D4  0842               	movf	___flmul@temp+1,w
  4838  03D5  3A80               	xorlw	128
  4839  03D6  00B2               	movwf	??___flmul
  4840  03D7  3080               	movlw	128
  4841  03D8  0232               	subwf	??___flmul,w
  4842  03D9  1D03               	skipz
  4843  03DA  2BDD               	goto	u3985
  4844  03DB  30FF               	movlw	255
  4845  03DC  0241               	subwf	___flmul@temp,w
  4846  03DD                     u3985:	
  4847  03DD  1C03               	skipc
  4848  03DE  2BE7               	goto	l3402
  4849  03DF  307F               	movlw	127
  4850  03E0  0020               	movlb	0	; select bank0
  4851  03E1  00C0               	movwf	___flmul@prod+3
  4852  03E2  3080               	movlw	128
  4853  03E3  00BF               	movwf	___flmul@prod+2
  4854  03E4  01BE               	clrf	___flmul@prod+1
  4855  03E5  01BD               	clrf	___flmul@prod
  4856  03E6  2C08               	goto	l723
  4857  03E7                     l3402:	
  4858  03E7  0020               	movlb	0	; select bank0
  4859  03E8  0842               	movf	___flmul@temp+1,w
  4860  03E9  3A80               	xorlw	128
  4861  03EA  00B2               	movwf	??___flmul
  4862  03EB  3080               	movlw	128
  4863  03EC  0232               	subwf	??___flmul,w
  4864  03ED  1D03               	skipz
  4865  03EE  2BF1               	goto	u3995
  4866  03EF  3001               	movlw	1
  4867  03F0  0241               	subwf	___flmul@temp,w
  4868  03F1                     u3995:	
  4869  03F1  1803               	skipnc
  4870  03F2  2BFA               	goto	l3408
  4871  03F3  0020               	movlb	0	; select bank0
  4872  03F4  01BD               	clrf	___flmul@prod
  4873  03F5  01BE               	clrf	___flmul@prod+1
  4874  03F6  01BF               	clrf	___flmul@prod+2
  4875  03F7  01C0               	clrf	___flmul@prod+3
  4876  03F8  01B6               	clrf	___flmul@sign
  4877  03F9  2C08               	goto	l723
  4878  03FA                     l3408:	
  4879  03FA  0020               	movlb	0	; select bank0
  4880  03FB  0841               	movf	___flmul@temp,w
  4881  03FC  00B8               	movwf	___flmul@bexp
  4882  03FD  30FF               	movlw	255
  4883  03FE  05BD               	andwf	___flmul@prod,f
  4884  03FF  05BE               	andwf	___flmul@prod+1,f
  4885  0400  307F               	movlw	127
  4886  0401  05BF               	andwf	___flmul@prod+2,f
  4887  0402  3000               	movlw	0
  4888  0403  01C0               	clrf	___flmul@prod+3
  4889  0404  1838               	btfsc	___flmul@bexp,0
  4890  0405  17BF               	bsf	___flmul@prod+2,7
  4891  0406  3638               	lsrf	___flmul@bexp,w
  4892  0407  00C0               	movwf	___flmul@prod+3
  4893  0408                     l723:	
  4894  0408  0836               	movf	___flmul@sign,w
  4895  0409  04C0               	iorwf	___flmul@prod+3,f
  4896  040A  0840               	movf	___flmul@prod+3,w
  4897  040B  00AD               	movwf	?___flmul+3
  4898  040C  083F               	movf	___flmul@prod+2,w
  4899  040D  00AC               	movwf	?___flmul+2
  4900  040E  083E               	movf	___flmul@prod+1,w
  4901  040F  00AB               	movwf	?___flmul+1
  4902  0410  083D               	movf	___flmul@prod,w
  4903  0411  00AA               	movwf	?___flmul
  4904  0412  0008               	return
  4905  0413                     __end_of___flmul:	
  4906  0413                     __ptext16:	
  4907 ;; *************** function __Umul8_16 *****************
  4908 ;; Defined at:
  4909 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8_16.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  multiplier      1    wreg     unsigned char 
  4912 ;;  multiplicand    1    2[BANK0 ] unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  multiplier      1    7[BANK0 ] unsigned char 
  4915 ;;  word_mpld       2    8[BANK0 ] unsigned int 
  4916 ;;  product         2    5[BANK0 ] unsigned int 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  2    2[BANK0 ] unsigned int 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 1F/0
  4923 ;;		On exit  : 1F/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4926 ;;      Params:         0       3       0       0
  4927 ;;      Locals:         0       5       0       0
  4928 ;;      Temps:          0       0       0       0
  4929 ;;      Totals:         0       8       0       0
  4930 ;;Total ram usage:        8 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    2
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		___flmul
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function __Umul8_16
  4942  0413                     __Umul8_16:	
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4946                           ;__Umul8_16@multiplier stored from wreg
  4947  0413  00A7               	movwf	__Umul8_16@multiplier
  4948  0414  01A5               	clrf	__Umul8_16@product
  4949  0415  01A6               	clrf	__Umul8_16@product+1
  4950  0416  0822               	movf	__Umul8_16@multiplicand,w
  4951  0417  00A8               	movwf	__Umul8_16@word_mpld
  4952  0418  01A9               	clrf	__Umul8_16@word_mpld+1
  4953  0419  1C27               	btfss	__Umul8_16@multiplier,0
  4954  041A  2C1F               	goto	l3178
  4955  041B  0828               	movf	__Umul8_16@word_mpld,w
  4956  041C  07A5               	addwf	__Umul8_16@product,f
  4957  041D  0829               	movf	__Umul8_16@word_mpld+1,w
  4958  041E  3DA6               	addwfc	__Umul8_16@product+1,f
  4959  041F                     l3178:	
  4960  041F  35A8               	lslf	__Umul8_16@word_mpld,f
  4961  0420  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4962  0421  1CA7               	btfss	__Umul8_16@multiplier,1
  4963  0422  2C27               	goto	l3184
  4964  0423  0828               	movf	__Umul8_16@word_mpld,w
  4965  0424  07A5               	addwf	__Umul8_16@product,f
  4966  0425  0829               	movf	__Umul8_16@word_mpld+1,w
  4967  0426  3DA6               	addwfc	__Umul8_16@product+1,f
  4968  0427                     l3184:	
  4969  0427  35A8               	lslf	__Umul8_16@word_mpld,f
  4970  0428  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4971  0429  1D27               	btfss	__Umul8_16@multiplier,2
  4972  042A  2C2F               	goto	l3190
  4973  042B  0828               	movf	__Umul8_16@word_mpld,w
  4974  042C  07A5               	addwf	__Umul8_16@product,f
  4975  042D  0829               	movf	__Umul8_16@word_mpld+1,w
  4976  042E  3DA6               	addwfc	__Umul8_16@product+1,f
  4977  042F                     l3190:	
  4978  042F  35A8               	lslf	__Umul8_16@word_mpld,f
  4979  0430  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4980  0431  1DA7               	btfss	__Umul8_16@multiplier,3
  4981  0432  2C37               	goto	l3196
  4982  0433  0828               	movf	__Umul8_16@word_mpld,w
  4983  0434  07A5               	addwf	__Umul8_16@product,f
  4984  0435  0829               	movf	__Umul8_16@word_mpld+1,w
  4985  0436  3DA6               	addwfc	__Umul8_16@product+1,f
  4986  0437                     l3196:	
  4987  0437  35A8               	lslf	__Umul8_16@word_mpld,f
  4988  0438  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4989  0439  1E27               	btfss	__Umul8_16@multiplier,4
  4990  043A  2C3F               	goto	l3202
  4991  043B  0828               	movf	__Umul8_16@word_mpld,w
  4992  043C  07A5               	addwf	__Umul8_16@product,f
  4993  043D  0829               	movf	__Umul8_16@word_mpld+1,w
  4994  043E  3DA6               	addwfc	__Umul8_16@product+1,f
  4995  043F                     l3202:	
  4996  043F  35A8               	lslf	__Umul8_16@word_mpld,f
  4997  0440  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  4998  0441  1EA7               	btfss	__Umul8_16@multiplier,5
  4999  0442  2C47               	goto	l3208
  5000  0443  0828               	movf	__Umul8_16@word_mpld,w
  5001  0444  07A5               	addwf	__Umul8_16@product,f
  5002  0445  0829               	movf	__Umul8_16@word_mpld+1,w
  5003  0446  3DA6               	addwfc	__Umul8_16@product+1,f
  5004  0447                     l3208:	
  5005  0447  35A8               	lslf	__Umul8_16@word_mpld,f
  5006  0448  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5007  0449  1F27               	btfss	__Umul8_16@multiplier,6
  5008  044A  2C4F               	goto	l3214
  5009  044B  0828               	movf	__Umul8_16@word_mpld,w
  5010  044C  07A5               	addwf	__Umul8_16@product,f
  5011  044D  0829               	movf	__Umul8_16@word_mpld+1,w
  5012  044E  3DA6               	addwfc	__Umul8_16@product+1,f
  5013  044F                     l3214:	
  5014  044F  35A8               	lslf	__Umul8_16@word_mpld,f
  5015  0450  0DA9               	rlf	__Umul8_16@word_mpld+1,f
  5016  0451  1FA7               	btfss	__Umul8_16@multiplier,7
  5017  0452  2C57               	goto	l759
  5018  0453  0828               	movf	__Umul8_16@word_mpld,w
  5019  0454  07A5               	addwf	__Umul8_16@product,f
  5020  0455  0829               	movf	__Umul8_16@word_mpld+1,w
  5021  0456  3DA6               	addwfc	__Umul8_16@product+1,f
  5022  0457                     l759:	
  5023  0457  0826               	movf	__Umul8_16@product+1,w
  5024  0458  00A3               	movwf	?__Umul8_16+1
  5025  0459  0825               	movf	__Umul8_16@product,w
  5026  045A  00A2               	movwf	?__Umul8_16
  5027  045B  0008               	return
  5028  045C                     __end_of__Umul8_16:	
  5029                           
  5030                           	psect	text6
  5031  05AC                     __ptext6:	
  5032 ;; *************** function _init_I2C_buffer *****************
  5033 ;; Defined at:
  5034 ;;		line 309 in file "main.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0, pclath, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : B1F/1
  5045 ;;		On exit  : 1F/1
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5048 ;;      Params:         0       0       0       0
  5049 ;;      Locals:         0       0       0       0
  5050 ;;      Temps:          0       0       0       0
  5051 ;;      Totals:         0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    3
  5055 ;; This function calls:
  5056 ;;		_eeprom_read
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _init_I2C_buffer
  5064  05AC                     _init_I2C_buffer:	
  5065                           
  5066                           ;main.c: 310: I2C_buffer.data.ID = 0xF3;
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _init_I2C_buffer: [wreg+status,2+status,0+pclath+cstack]
  5070  05AC  30F3               	movlw	243
  5071  05AD  00A0               	movwf	_I2C_buffer^(0+128)	;volatile
  5072                           
  5073                           ;main.c: 311: I2C_buffer.data.ADDRESS = eeprom_read(0);
  5074  05AE  3000               	movlw	0
  5075  05AF  2650  3185         	fcall	_eeprom_read
  5076  05B1  0021               	movlb	1	; select bank1
  5077  05B2  00A1               	movwf	(_I2C_buffer^(0+128)+1)	;volatile
  5078                           
  5079                           ;main.c: 312: I2C_buffer.data.START_STOP = 0;
  5080  05B3  01A2               	clrf	(_I2C_buffer^(0+128)+2)	;volatile
  5081                           
  5082                           ;main.c: 313: I2C_buffer.data.IOWPU = eeprom_read(1);
  5083  05B4  3001               	movlw	1
  5084  05B5  2650  3185         	fcall	_eeprom_read
  5085  05B7  0021               	movlb	1	; select bank1
  5086  05B8  00A3               	movwf	(_I2C_buffer^(0+128)+3)	;volatile
  5087                           
  5088                           ;main.c: 314: I2C_buffer.data.MODE = 0;
  5089  05B9  01A4               	clrf	(_I2C_buffer^(0+128)+4)	;volatile
  5090                           
  5091                           ;main.c: 315: I2C_buffer.data.SAVE = 0;
  5092  05BA  01A5               	clrf	(_I2C_buffer^(0+128)+5)	;volatile
  5093                           
  5094                           ;main.c: 316: I2C_buffer.data.RESET = 0;
  5095  05BB  01A6               	clrf	(_I2C_buffer^(0+128)+6)	;volatile
  5096                           
  5097                           ;main.c: 318: I2C_buffer.byte[0x07] = eeprom_read(2);
  5098  05BC  3002               	movlw	2
  5099  05BD  2650  3185         	fcall	_eeprom_read
  5100  05BF  0021               	movlb	1	; select bank1
  5101  05C0  00A7               	movwf	(_I2C_buffer^(0+128)+7)	;volatile
  5102                           
  5103                           ;main.c: 319: I2C_buffer.byte[0x08] = eeprom_read(3);
  5104  05C1  3003               	movlw	3
  5105  05C2  2650  3185         	fcall	_eeprom_read
  5106  05C4  0021               	movlb	1	; select bank1
  5107  05C5  00A8               	movwf	(_I2C_buffer^(0+128)+8)	;volatile
  5108                           
  5109                           ;main.c: 321: I2C_buffer.byte[0x09] = eeprom_read(4);
  5110  05C6  3004               	movlw	4
  5111  05C7  2650  3185         	fcall	_eeprom_read
  5112  05C9  0021               	movlb	1	; select bank1
  5113  05CA  00A9               	movwf	(_I2C_buffer^(0+128)+9)	;volatile
  5114                           
  5115                           ;main.c: 322: I2C_buffer.byte[0x0A] = eeprom_read(5);
  5116  05CB  3005               	movlw	5
  5117  05CC  2650  3185         	fcall	_eeprom_read
  5118  05CE  0021               	movlb	1	; select bank1
  5119  05CF  00AA               	movwf	(_I2C_buffer^(0+128)+10)	;volatile
  5120                           
  5121                           ;main.c: 323: I2C_buffer.data.RPM = 0;
  5122  05D0  01AB               	clrf	(_I2C_buffer^(0+128)+11)	;volatile
  5123  05D1  01AC               	clrf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5124                           
  5125                           ;main.c: 324: I2C_buffer.data.SPEED = 0;
  5126  05D2  01AD               	clrf	(_I2C_buffer^(0+128)+13)	;volatile
  5127  05D3  01AE               	clrf	((_I2C_buffer+1)^(0+128)+13)	;volatile
  5128                           
  5129                           ;main.c: 325: I2C_buffer.data.DISTANCE = 0;
  5130  05D4  01AF               	clrf	(_I2C_buffer^(0+128)+15)	;volatile
  5131  05D5  01B0               	clrf	((_I2C_buffer+1)^(0+128)+15)	;volatile
  5132  05D6  01B1               	clrf	((_I2C_buffer+2)^(0+128)+15)	;volatile
  5133  05D7  01B2               	clrf	((_I2C_buffer+3)^(0+128)+15)	;volatile
  5134                           
  5135                           ;main.c: 327: I2C_buffer.byte[0x13] = eeprom_read(8);
  5136  05D8  3008               	movlw	8
  5137  05D9  2650  3185         	fcall	_eeprom_read
  5138  05DB  0021               	movlb	1	; select bank1
  5139  05DC  00B3               	movwf	(_I2C_buffer^(0+128)+19)	;volatile
  5140                           
  5141                           ;main.c: 328: I2C_buffer.byte[0x14] = eeprom_read(9);
  5142  05DD  3009               	movlw	9
  5143  05DE  2650  3185         	fcall	_eeprom_read
  5144  05E0  0021               	movlb	1	; select bank1
  5145  05E1  00B4               	movwf	(_I2C_buffer^(0+128)+20)	;volatile
  5146                           
  5147                           ;main.c: 329: I2C_buffer.byte[0x15] = eeprom_read(10);
  5148  05E2  300A               	movlw	10
  5149  05E3  2650  3185         	fcall	_eeprom_read
  5150  05E5  0021               	movlb	1	; select bank1
  5151  05E6  00B5               	movwf	(_I2C_buffer^(0+128)+21)	;volatile
  5152                           
  5153                           ;main.c: 330: I2C_buffer.byte[0x16] = eeprom_read(11);
  5154  05E7  300B               	movlw	11
  5155  05E8  2650  3185         	fcall	_eeprom_read
  5156  05EA  0021               	movlb	1	; select bank1
  5157  05EB  00B6               	movwf	(_I2C_buffer^(0+128)+22)	;volatile
  5158                           
  5159                           ;main.c: 332: I2C_buffer.byte[0x17] = eeprom_read(12);
  5160  05EC  300C               	movlw	12
  5161  05ED  2650  3185         	fcall	_eeprom_read
  5162  05EF  0021               	movlb	1	; select bank1
  5163  05F0  00B7               	movwf	(_I2C_buffer^(0+128)+23)	;volatile
  5164                           
  5165                           ;main.c: 333: I2C_buffer.byte[0x18] = eeprom_read(13);
  5166  05F1  300D               	movlw	13
  5167  05F2  2650  3185         	fcall	_eeprom_read
  5168  05F4  0021               	movlb	1	; select bank1
  5169  05F5  00B8               	movwf	(_I2C_buffer^(0+128)+24)	;volatile
  5170                           
  5171                           ;main.c: 334: I2C_buffer.byte[0x19] = eeprom_read(14);
  5172  05F6  300E               	movlw	14
  5173  05F7  2650  3185         	fcall	_eeprom_read
  5174  05F9  0021               	movlb	1	; select bank1
  5175  05FA  00B9               	movwf	(_I2C_buffer^(0+128)+25)	;volatile
  5176                           
  5177                           ;main.c: 335: I2C_buffer.byte[0x1A] = eeprom_read(15);
  5178  05FB  300F               	movlw	15
  5179  05FC  2650  3185         	fcall	_eeprom_read
  5180  05FE  0021               	movlb	1	; select bank1
  5181  05FF  00BA               	movwf	(_I2C_buffer^(0+128)+26)	;volatile
  5182                           
  5183                           ;main.c: 337: I2C_buffer.byte[0x1B] = eeprom_read(16);
  5184  0600  3010               	movlw	16
  5185  0601  2650  3185         	fcall	_eeprom_read
  5186  0603  0021               	movlb	1	; select bank1
  5187  0604  00BB               	movwf	(_I2C_buffer^(0+128)+27)	;volatile
  5188                           
  5189                           ;main.c: 338: I2C_buffer.byte[0x1C] = eeprom_read(17);
  5190  0605  3011               	movlw	17
  5191  0606  2650  3185         	fcall	_eeprom_read
  5192  0608  0021               	movlb	1	; select bank1
  5193  0609  00BC               	movwf	(_I2C_buffer^(0+128)+28)	;volatile
  5194                           
  5195                           ;main.c: 339: I2C_buffer.byte[0x1D] = eeprom_read(18);
  5196  060A  3012               	movlw	18
  5197  060B  2650  3185         	fcall	_eeprom_read
  5198  060D  0021               	movlb	1	; select bank1
  5199  060E  00BD               	movwf	(_I2C_buffer^(0+128)+29)	;volatile
  5200                           
  5201                           ;main.c: 340: I2C_buffer.byte[0x1E] = eeprom_read(19);
  5202  060F  3013               	movlw	19
  5203  0610  2650  3185         	fcall	_eeprom_read
  5204  0612  0021               	movlb	1	; select bank1
  5205  0613  00BE               	movwf	(_I2C_buffer^(0+128)+30)	;volatile
  5206                           
  5207                           ;main.c: 342: I2C_buffer.byte[0x1F] = eeprom_read(20);
  5208  0614  3014               	movlw	20
  5209  0615  2650  3185         	fcall	_eeprom_read
  5210  0617  0021               	movlb	1	; select bank1
  5211  0618  00BF               	movwf	(_I2C_buffer^(0+128)+31)	;volatile
  5212                           
  5213                           ;main.c: 343: I2C_buffer.byte[0x20] = eeprom_read(21);
  5214  0619  3015               	movlw	21
  5215  061A  2650  3185         	fcall	_eeprom_read
  5216  061C  0021               	movlb	1	; select bank1
  5217  061D  00C0               	movwf	(_I2C_buffer^(0+128)+32)	;volatile
  5218                           
  5219                           ;main.c: 344: I2C_buffer.byte[0x21] = eeprom_read(22);
  5220  061E  3016               	movlw	22
  5221  061F  2650  3185         	fcall	_eeprom_read
  5222  0621  0021               	movlb	1	; select bank1
  5223  0622  00C1               	movwf	(_I2C_buffer^(0+128)+33)	;volatile
  5224                           
  5225                           ;main.c: 345: I2C_buffer.byte[0x22] = eeprom_read(23);
  5226  0623  3017               	movlw	23
  5227  0624  2650  3185         	fcall	_eeprom_read
  5228  0626  0021               	movlb	1	; select bank1
  5229  0627  00C2               	movwf	(_I2C_buffer^(0+128)+34)	;volatile
  5230                           
  5231                           ;main.c: 347: I2C_buffer.byte[0x23] = eeprom_read(24);
  5232  0628  3018               	movlw	24
  5233  0629  2650  3185         	fcall	_eeprom_read
  5234  062B  0021               	movlb	1	; select bank1
  5235  062C  00C3               	movwf	(_I2C_buffer^(0+128)+35)	;volatile
  5236                           
  5237                           ;main.c: 348: I2C_buffer.byte[0x24] = eeprom_read(25);
  5238  062D  3019               	movlw	25
  5239  062E  2650  3185         	fcall	_eeprom_read
  5240  0630  0021               	movlb	1	; select bank1
  5241  0631  00C4               	movwf	(_I2C_buffer^(0+128)+36)	;volatile
  5242                           
  5243                           ;main.c: 349: I2C_buffer.byte[0x25] = eeprom_read(26);
  5244  0632  301A               	movlw	26
  5245  0633  2650  3185         	fcall	_eeprom_read
  5246  0635  0021               	movlb	1	; select bank1
  5247  0636  00C5               	movwf	(_I2C_buffer^(0+128)+37)	;volatile
  5248                           
  5249                           ;main.c: 350: I2C_buffer.byte[0x26] = eeprom_read(27);
  5250  0637  301B               	movlw	27
  5251  0638  2650  3185         	fcall	_eeprom_read
  5252  063A  0021               	movlb	1	; select bank1
  5253  063B  00C6               	movwf	(_I2C_buffer^(0+128)+38)	;volatile
  5254                           
  5255                           ;main.c: 352: I2C_buffer.byte[0x27] = eeprom_read(28);
  5256  063C  301C               	movlw	28
  5257  063D  2650  3185         	fcall	_eeprom_read
  5258  063F  0021               	movlb	1	; select bank1
  5259  0640  00C7               	movwf	(_I2C_buffer^(0+128)+39)	;volatile
  5260                           
  5261                           ;main.c: 353: I2C_buffer.byte[0x28] = eeprom_read(29);
  5262  0641  301D               	movlw	29
  5263  0642  2650  3185         	fcall	_eeprom_read
  5264  0644  0021               	movlb	1	; select bank1
  5265  0645  00C8               	movwf	(_I2C_buffer^(0+128)+40)	;volatile
  5266                           
  5267                           ;main.c: 354: I2C_buffer.byte[0x29] = eeprom_read(30);
  5268  0646  301E               	movlw	30
  5269  0647  2650  3185         	fcall	_eeprom_read
  5270  0649  0021               	movlb	1	; select bank1
  5271  064A  00C9               	movwf	(_I2C_buffer^(0+128)+41)	;volatile
  5272                           
  5273                           ;main.c: 355: I2C_buffer.byte[0x2A] = eeprom_read(31);
  5274  064B  301F               	movlw	31
  5275  064C  2650               	fcall	_eeprom_read
  5276  064D  0021               	movlb	1	; select bank1
  5277  064E  00CA               	movwf	(_I2C_buffer^(0+128)+42)	;volatile
  5278  064F  0008               	return
  5279  0650                     __end_of_init_I2C_buffer:	
  5280  0650                     __ptext7:	
  5281 ;; *************** function _eeprom_read *****************
  5282 ;; Defined at:
  5283 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\pic\__eeread.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  addr            1    wreg     unsigned char 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  addr            1    2[BANK0 ] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      unsigned char 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0
  5292 ;; Tracked objects:
  5293 ;;		On entry : 1F/1
  5294 ;;		On exit  : 1F/3
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5297 ;;      Params:         0       0       0       0
  5298 ;;      Locals:         0       1       0       0
  5299 ;;      Temps:          0       0       0       0
  5300 ;;      Totals:         0       1       0       0
  5301 ;;Total ram usage:        1 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    2
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_init_I2C_buffer
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _eeprom_read
  5313  0650                     _eeprom_read:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5317                           ;eeprom_read@addr stored from wreg
  5318  0650  0020               	movlb	0	; select bank0
  5319  0651  00A2               	movwf	eeprom_read@addr
  5320  0652  2E54               	goto	l287
  5321  0653                     u2561:	
  5322  0653  0020               	movlb	0	; select bank0
  5323  0654                     l287:	
  5324                           ;__eeread.c: 8: do
  5325                           
  5326  0654  0064               	clrwdt	;# 
  5327                           
  5328                           ;__eeread.c: 12: while(EECON1bits.WR);
  5329  0655  0023               	movlb	3	; select bank3
  5330  0656  1895               	btfsc	21,1	;volsfr
  5331  0657  2E53               	goto	u2561
  5332                           
  5333                           ;__eeread.c: 18: return ( EEADR = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  5334  0658  0020               	movlb	0	; select bank0
  5335  0659  0822               	movf	eeprom_read@addr,w
  5336  065A  0023               	movlb	3	; select bank3
  5337  065B  0091               	movwf	17	;volatile
  5338  065C  0192               	clrf	18	;volatile
  5339  065D  303F               	movlw	63
  5340  065E  0595               	andwf	21,f	;volsfr
  5341  065F  1415               	bsf	21,0	;volsfr
  5342  0660  0813               	movf	19,w	;volatile
  5343  0661  0008               	return
  5344  0662                     __end_of_eeprom_read:	
  5345                           
  5346                           	psect	text14
  5347  045C                     __ptext14:	
  5348 ;; *************** function ___fladd *****************
  5349 ;; Defined at:
  5350 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  b               4   35[BANK0 ] long 
  5353 ;;  a               4   39[BANK0 ] long 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  grs             1   54[BANK0 ] unsigned char 
  5356 ;;  bexp            1   53[BANK0 ] unsigned char 
  5357 ;;  aexp            1   52[BANK0 ] unsigned char 
  5358 ;;  signs           1   51[BANK0 ] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  4   35[BANK0 ] unsigned char 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 1F/0
  5365 ;;		On exit  : 1F/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5368 ;;      Params:         0       8       0       0
  5369 ;;      Locals:         0       4       0       0
  5370 ;;      Temps:          0       8       0       0
  5371 ;;      Totals:         0      20       0       0
  5372 ;;Total ram usage:       20 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    2
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_calculate_pidA
  5379 ;;		_calculate_pidM
  5380 ;;		___flsub
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function ___fladd
  5386  045C                     ___fladd:	
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  5390  045C  0846               	movf	___fladd@b+3,w
  5391  045D  00D3               	movwf	___fladd@signs
  5392  045E  3080               	movlw	128
  5393  045F  05D3               	andwf	___fladd@signs,f
  5394  0460  3546               	lslf	___fladd@b+3,w
  5395  0461  00D5               	movwf	___fladd@bexp
  5396  0462  1BC5               	btfsc	___fladd@b+2,7
  5397  0463  1455               	bsf	___fladd@bexp,0
  5398  0464  0855               	movf	___fladd@bexp,w
  5399  0465  1903               	btfsc	3,2
  5400  0466  2C6F               	goto	l608
  5401  0467  0F55               	incfsz	___fladd@bexp,w
  5402  0468  2C6D               	goto	l609
  5403  0469  01C3               	clrf	___fladd@b
  5404  046A  01C4               	clrf	___fladd@b+1
  5405  046B  01C5               	clrf	___fladd@b+2
  5406  046C  01C6               	clrf	___fladd@b+3
  5407  046D                     l609:	
  5408  046D  17C5               	bsf	___fladd@b+2,7
  5409  046E  2C72               	goto	L5
  5410  046F                     l608:	
  5411  046F  01C3               	clrf	___fladd@b
  5412  0470  01C4               	clrf	___fladd@b+1
  5413  0471  01C5               	clrf	___fladd@b+2
  5414  0472                     L5:	
  5415  0472  01C6               	clrf	___fladd@b+3
  5416  0473  084A               	movf	___fladd@a+3,w
  5417  0474  00D4               	movwf	___fladd@aexp
  5418  0475  3080               	movlw	128
  5419  0476  05D4               	andwf	___fladd@aexp,f
  5420  0477  0854               	movf	___fladd@aexp,w
  5421  0478  0653               	xorwf	___fladd@signs,w
  5422  0479  1D03               	btfss	3,2
  5423  047A  1753               	bsf	___fladd@signs,6
  5424  047B  354A               	lslf	___fladd@a+3,w
  5425  047C  00D4               	movwf	___fladd@aexp
  5426  047D  1BC9               	btfsc	___fladd@a+2,7
  5427  047E  1454               	bsf	___fladd@aexp,0
  5428  047F  0854               	movf	___fladd@aexp,w
  5429  0480  1903               	btfsc	3,2
  5430  0481  2C8A               	goto	l613
  5431  0482  0F54               	incfsz	___fladd@aexp,w
  5432  0483  2C88               	goto	l614
  5433  0484  01C7               	clrf	___fladd@a
  5434  0485  01C8               	clrf	___fladd@a+1
  5435  0486  01C9               	clrf	___fladd@a+2
  5436  0487  01CA               	clrf	___fladd@a+3
  5437  0488                     l614:	
  5438  0488  17C9               	bsf	___fladd@a+2,7
  5439  0489  2C8D               	goto	L6
  5440  048A                     l613:	
  5441  048A  01C7               	clrf	___fladd@a
  5442  048B  01C8               	clrf	___fladd@a+1
  5443  048C  01C9               	clrf	___fladd@a+2
  5444  048D                     L6:	
  5445  048D  01CA               	clrf	___fladd@a+3
  5446  048E  0855               	movf	___fladd@bexp,w
  5447  048F  0254               	subwf	___fladd@aexp,w
  5448  0490  1803               	skipnc
  5449  0491  2CB4               	goto	l3068
  5450  0492  1F53               	btfss	___fladd@signs,6
  5451  0493  2C96               	goto	l3038
  5452  0494  3080               	movlw	128
  5453  0495  06D3               	xorwf	___fladd@signs,f
  5454  0496                     l3038:	
  5455  0496  0855               	movf	___fladd@bexp,w
  5456  0497  00D6               	movwf	___fladd@grs
  5457  0498  0854               	movf	___fladd@aexp,w
  5458  0499  00D5               	movwf	___fladd@bexp
  5459  049A  0856               	movf	___fladd@grs,w
  5460  049B  00D4               	movwf	___fladd@aexp
  5461  049C  0843               	movf	___fladd@b,w
  5462  049D  00D6               	movwf	___fladd@grs
  5463  049E  0847               	movf	___fladd@a,w
  5464  049F  00C3               	movwf	___fladd@b
  5465  04A0  0856               	movf	___fladd@grs,w
  5466  04A1  00C7               	movwf	___fladd@a
  5467  04A2  0844               	movf	___fladd@b+1,w
  5468  04A3  00D6               	movwf	___fladd@grs
  5469  04A4  0848               	movf	___fladd@a+1,w
  5470  04A5  00C4               	movwf	___fladd@b+1
  5471  04A6  0856               	movf	___fladd@grs,w
  5472  04A7  00C8               	movwf	___fladd@a+1
  5473  04A8  0845               	movf	___fladd@b+2,w
  5474  04A9  00D6               	movwf	___fladd@grs
  5475  04AA  0849               	movf	___fladd@a+2,w
  5476  04AB  00C5               	movwf	___fladd@b+2
  5477  04AC  0856               	movf	___fladd@grs,w
  5478  04AD  00C9               	movwf	___fladd@a+2
  5479  04AE  0846               	movf	___fladd@b+3,w
  5480  04AF  00D6               	movwf	___fladd@grs
  5481  04B0  084A               	movf	___fladd@a+3,w
  5482  04B1  00C6               	movwf	___fladd@b+3
  5483  04B2  0856               	movf	___fladd@grs,w
  5484  04B3  00CA               	movwf	___fladd@a+3
  5485  04B4                     l3068:	
  5486  04B4  01D6               	clrf	___fladd@grs
  5487  04B5  0854               	movf	___fladd@aexp,w
  5488  04B6  00CB               	movwf	??___fladd
  5489  04B7  01CC               	clrf	??___fladd+1
  5490  04B8  084C               	movf	??___fladd+1,w
  5491  04B9  00CE               	movwf	??___fladd+3
  5492  04BA  0855               	movf	___fladd@bexp,w
  5493  04BB  024B               	subwf	??___fladd,w
  5494  04BC  00CD               	movwf	??___fladd+2
  5495  04BD  1C03               	skipc
  5496  04BE  03CE               	decf	??___fladd+3,f
  5497  04BF  084E               	movf	??___fladd+3,w
  5498  04C0  3A80               	xorlw	128
  5499  04C1  00CF               	movwf	??___fladd+4
  5500  04C2  3080               	movlw	128
  5501  04C3  024F               	subwf	??___fladd+4,w
  5502  04C4  1D03               	skipz
  5503  04C5  2CC8               	goto	u3295
  5504  04C6  301A               	movlw	26
  5505  04C7  024D               	subwf	??___fladd+2,w
  5506  04C8                     u3295:	
  5507  04C8  1C03               	skipc
  5508  04C9  2CEA               	goto	l3082
  5509  04CA  0020               	movlb	0	; select bank0
  5510  04CB  0846               	movf	___fladd@b+3,w
  5511  04CC  0445               	iorwf	___fladd@b+2,w
  5512  04CD  0444               	iorwf	___fladd@b+1,w
  5513  04CE  0443               	iorwf	___fladd@b,w
  5514  04CF  1903               	btfsc	3,2
  5515  04D0  2CD3               	goto	u3300
  5516  04D1  3001               	movlw	1
  5517  04D2  2CD4               	goto	u3310
  5518  04D3                     u3300:	
  5519  04D3  3000               	movlw	0
  5520  04D4                     u3310:	
  5521  04D4  00D6               	movwf	___fladd@grs
  5522  04D5  01C3               	clrf	___fladd@b
  5523  04D6  01C4               	clrf	___fladd@b+1
  5524  04D7  01C5               	clrf	___fladd@b+2
  5525  04D8  01C6               	clrf	___fladd@b+3
  5526  04D9  0854               	movf	___fladd@aexp,w
  5527  04DA  00D5               	movwf	___fladd@bexp
  5528  04DB  2CEF               	goto	l619
  5529  04DC                     l621:	
  5530  04DC  1C56               	btfss	___fladd@grs,0
  5531  04DD  2CE2               	goto	l622
  5532  04DE  3656               	lsrf	___fladd@grs,w
  5533  04DF  3801               	iorlw	1
  5534  04E0  00D6               	movwf	___fladd@grs
  5535  04E1  2CE3               	goto	l623
  5536  04E2                     l622:	
  5537  04E2  36D6               	lsrf	___fladd@grs,f
  5538  04E3                     l623:	
  5539  04E3  1843               	btfsc	___fladd@b,0
  5540  04E4  17D6               	bsf	___fladd@grs,7
  5541  04E5  37C6               	asrf	___fladd@b+3,f
  5542  04E6  0CC5               	rrf	___fladd@b+2,f
  5543  04E7  0CC4               	rrf	___fladd@b+1,f
  5544  04E8  0CC3               	rrf	___fladd@b,f
  5545  04E9  0AD5               	incf	___fladd@bexp,f
  5546  04EA                     l3082:	
  5547  04EA  0020               	movlb	0	; select bank0
  5548  04EB  0854               	movf	___fladd@aexp,w
  5549  04EC  0255               	subwf	___fladd@bexp,w
  5550  04ED  1C03               	skipc
  5551  04EE  2CDC               	goto	l621
  5552  04EF                     l619:	
  5553  04EF  1B53               	btfsc	___fladd@signs,6
  5554  04F0  2D12               	goto	l3100
  5555  04F1  0855               	movf	___fladd@bexp,w
  5556  04F2  1D03               	btfss	3,2
  5557  04F3  2CF9               	goto	l3088
  5558  04F4  01C3               	clrf	?___fladd
  5559  04F5  01C4               	clrf	?___fladd+1
  5560  04F6  01C5               	clrf	?___fladd+2
  5561  04F7  01C6               	clrf	?___fladd+3
  5562  04F8  0008               	return
  5563  04F9                     l3088:	
  5564  04F9  0847               	movf	___fladd@a,w
  5565  04FA  07C3               	addwf	___fladd@b,f
  5566  04FB  0848               	movf	___fladd@a+1,w
  5567  04FC  3DC4               	addwfc	___fladd@b+1,f
  5568  04FD  0849               	movf	___fladd@a+2,w
  5569  04FE  3DC5               	addwfc	___fladd@b+2,f
  5570  04FF  084A               	movf	___fladd@a+3,w
  5571  0500  3DC6               	addwfc	___fladd@b+3,f
  5572  0501  1C46               	btfss	___fladd@b+3,0
  5573  0502  2D7A               	goto	l3130
  5574  0503  1C56               	btfss	___fladd@grs,0
  5575  0504  2D09               	goto	l630
  5576  0505  3656               	lsrf	___fladd@grs,w
  5577  0506  3801               	iorlw	1
  5578  0507  00D6               	movwf	___fladd@grs
  5579  0508  2D0A               	goto	l631
  5580  0509                     l630:	
  5581  0509  36D6               	lsrf	___fladd@grs,f
  5582  050A                     l631:	
  5583  050A  1843               	btfsc	___fladd@b,0
  5584  050B  17D6               	bsf	___fladd@grs,7
  5585  050C  37C6               	asrf	___fladd@b+3,f
  5586  050D  0CC5               	rrf	___fladd@b+2,f
  5587  050E  0CC4               	rrf	___fladd@b+1,f
  5588  050F  0CC3               	rrf	___fladd@b,f
  5589  0510  0AD5               	incf	___fladd@bexp,f
  5590  0511  2D7A               	goto	l3130
  5591  0512                     l3100:	
  5592  0512  0846               	movf	___fladd@b+3,w
  5593  0513  3A80               	xorlw	128
  5594  0514  00CB               	movwf	??___fladd
  5595  0515  084A               	movf	___fladd@a+3,w
  5596  0516  3A80               	xorlw	128
  5597  0517  024B               	subwf	??___fladd,w
  5598  0518  1D03               	skipz
  5599  0519  2D24               	goto	u3403
  5600  051A  0849               	movf	___fladd@a+2,w
  5601  051B  0245               	subwf	___fladd@b+2,w
  5602  051C  1D03               	skipz
  5603  051D  2D24               	goto	u3403
  5604  051E  0848               	movf	___fladd@a+1,w
  5605  051F  0244               	subwf	___fladd@b+1,w
  5606  0520  1D03               	skipz
  5607  0521  2D24               	goto	u3403
  5608  0522  0847               	movf	___fladd@a,w
  5609  0523  0243               	subwf	___fladd@b,w
  5610  0524                     u3403:	
  5611  0524  1803               	skipnc
  5612  0525  2D53               	goto	l3110
  5613  0526  30FF               	movlw	255
  5614  0527  00CB               	movwf	??___fladd
  5615  0528  00CC               	movwf	??___fladd+1
  5616  0529  00CD               	movwf	??___fladd+2
  5617  052A  00CE               	movwf	??___fladd+3
  5618  052B  0843               	movf	___fladd@b,w
  5619  052C  0247               	subwf	___fladd@a,w
  5620  052D  00CF               	movwf	??___fladd+4
  5621  052E  0844               	movf	___fladd@b+1,w
  5622  052F  3B48               	subwfb	___fladd@a+1,w
  5623  0530  00D0               	movwf	??___fladd+5
  5624  0531  0845               	movf	___fladd@b+2,w
  5625  0532  3B49               	subwfb	___fladd@a+2,w
  5626  0533  00D1               	movwf	??___fladd+6
  5627  0534  0846               	movf	___fladd@b+3,w
  5628  0535  3B4A               	subwfb	___fladd@a+3,w
  5629  0536  00D2               	movwf	??___fladd+7
  5630  0537  084F               	movf	??___fladd+4,w
  5631  0538  07CB               	addwf	??___fladd,f
  5632  0539  0850               	movf	??___fladd+5,w
  5633  053A  3DCC               	addwfc	??___fladd+1,f
  5634  053B  0851               	movf	??___fladd+6,w
  5635  053C  3DCD               	addwfc	??___fladd+2,f
  5636  053D  0852               	movf	??___fladd+7,w
  5637  053E  3DCE               	addwfc	??___fladd+3,f
  5638  053F  084E               	movf	??___fladd+3,w
  5639  0540  00C6               	movwf	___fladd@b+3
  5640  0541  084D               	movf	??___fladd+2,w
  5641  0542  00C5               	movwf	___fladd@b+2
  5642  0543  084C               	movf	??___fladd+1,w
  5643  0544  00C4               	movwf	___fladd@b+1
  5644  0545  084B               	movf	??___fladd,w
  5645  0546  00C3               	movwf	___fladd@b
  5646  0547  3080               	movlw	128
  5647  0548  06D3               	xorwf	___fladd@signs,f
  5648  0549  09D6               	comf	___fladd@grs,f
  5649  054A  0FD6               	incfsz	___fladd@grs,f
  5650  054B  2D5B               	goto	l636
  5651  054C  3001               	movlw	1
  5652  054D  07C3               	addwf	___fladd@b,f
  5653  054E  3000               	movlw	0
  5654  054F  3DC4               	addwfc	___fladd@b+1,f
  5655  0550  3DC5               	addwfc	___fladd@b+2,f
  5656  0551  3DC6               	addwfc	___fladd@b+3,f
  5657  0552  2D5B               	goto	l636
  5658  0553                     l3110:	
  5659  0553  0847               	movf	___fladd@a,w
  5660  0554  02C3               	subwf	___fladd@b,f
  5661  0555  0848               	movf	___fladd@a+1,w
  5662  0556  3BC4               	subwfb	___fladd@b+1,f
  5663  0557  0849               	movf	___fladd@a+2,w
  5664  0558  3BC5               	subwfb	___fladd@b+2,f
  5665  0559  084A               	movf	___fladd@a+3,w
  5666  055A  3BC6               	subwfb	___fladd@b+3,f
  5667  055B                     l636:	
  5668  055B  0846               	movf	___fladd@b+3,w
  5669  055C  0445               	iorwf	___fladd@b+2,w
  5670  055D  0444               	iorwf	___fladd@b+1,w
  5671  055E  0443               	iorwf	___fladd@b,w
  5672  055F  1D03               	skipz
  5673  0560  2D78               	goto	l3128
  5674  0561  0856               	movf	___fladd@grs,w
  5675  0562  1D03               	btfss	3,2
  5676  0563  2D78               	goto	l3128
  5677  0564  01C3               	clrf	?___fladd
  5678  0565  01C4               	clrf	?___fladd+1
  5679  0566  01C5               	clrf	?___fladd+2
  5680  0567  01C6               	clrf	?___fladd+3
  5681  0568  0008               	return
  5682  0569                     l3116:	
  5683  0569  35C3               	lslf	___fladd@b,f
  5684  056A  0DC4               	rlf	___fladd@b+1,f
  5685  056B  0DC5               	rlf	___fladd@b+2,f
  5686  056C  0DC6               	rlf	___fladd@b+3,f
  5687  056D  1BD6               	btfsc	___fladd@grs,7
  5688  056E  1443               	bsf	___fladd@b,0
  5689  056F  1C56               	btfss	___fladd@grs,0
  5690  0570  2D74               	goto	l641
  5691  0571  1403               	setc
  5692  0572  0DD6               	rlf	___fladd@grs,f
  5693  0573  2D75               	goto	l3124
  5694  0574                     l641:	
  5695  0574  35D6               	lslf	___fladd@grs,f
  5696  0575                     l3124:	
  5697  0575  0855               	movf	___fladd@bexp,w
  5698  0576  1D03               	btfss	3,2
  5699  0577  03D5               	decf	___fladd@bexp,f
  5700  0578                     l3128:	
  5701  0578  1FC5               	btfss	___fladd@b+2,7
  5702  0579  2D69               	goto	l3116
  5703  057A                     l3130:	
  5704  057A  01D4               	clrf	___fladd@aexp
  5705  057B  1FD6               	btfss	___fladd@grs,7
  5706  057C  2D85               	goto	l3140
  5707  057D  0856               	movf	___fladd@grs,w
  5708  057E  397F               	andlw	127
  5709  057F  1903               	btfsc	3,2
  5710  0580  1843               	btfsc	___fladd@b,0
  5711  0581  2D83               	goto	l3136
  5712  0582  2D85               	goto	l3140
  5713  0583                     l3136:	
  5714  0583  01D4               	clrf	___fladd@aexp
  5715  0584  0AD4               	incf	___fladd@aexp,f
  5716  0585                     l3140:	
  5717  0585  0854               	movf	___fladd@aexp,w
  5718  0586  1903               	btfsc	3,2
  5719  0587  2D96               	goto	l3152
  5720  0588  3001               	movlw	1
  5721  0589  07C3               	addwf	___fladd@b,f
  5722  058A  3000               	movlw	0
  5723  058B  3DC4               	addwfc	___fladd@b+1,f
  5724  058C  3DC5               	addwfc	___fladd@b+2,f
  5725  058D  3DC6               	addwfc	___fladd@b+3,f
  5726  058E  1C46               	btfss	___fladd@b+3,0
  5727  058F  2D96               	goto	l3152
  5728  0590  37C6               	asrf	___fladd@b+3,f
  5729  0591  0CC5               	rrf	___fladd@b+2,f
  5730  0592  0CC4               	rrf	___fladd@b+1,f
  5731  0593  0CC3               	rrf	___fladd@b,f
  5732  0594  0F55               	incfsz	___fladd@bexp,w
  5733  0595  0AD5               	incf	___fladd@bexp,f
  5734  0596                     l3152:	
  5735  0596  0A55               	incf	___fladd@bexp,w
  5736  0597  1D03               	btfss	3,2
  5737  0598  0855               	movf	___fladd@bexp,w
  5738  0599  1D03               	btfss	3,2
  5739  059A  2DA2               	goto	l3160
  5740  059B  01C3               	clrf	___fladd@b
  5741  059C  01C4               	clrf	___fladd@b+1
  5742  059D  01C5               	clrf	___fladd@b+2
  5743  059E  01C6               	clrf	___fladd@b+3
  5744  059F  0855               	movf	___fladd@bexp,w
  5745  05A0  1903               	btfsc	3,2
  5746  05A1  01D3               	clrf	___fladd@signs
  5747  05A2                     l3160:	
  5748  05A2  1C55               	btfss	___fladd@bexp,0
  5749  05A3  2DA6               	goto	l656
  5750  05A4  17C5               	bsf	___fladd@b+2,7
  5751  05A5  2DA7               	goto	l3164
  5752  05A6                     l656:	
  5753  05A6  13C5               	bcf	___fladd@b+2,7
  5754  05A7                     l3164:	
  5755  05A7  3655               	lsrf	___fladd@bexp,w
  5756  05A8  00C6               	movwf	___fladd@b+3
  5757  05A9  1BD3               	btfsc	___fladd@signs,7
  5758  05AA  17C6               	bsf	___fladd@b+3,7
  5759  05AB  0008               	return
  5760  05AC                     __end_of___fladd:	
  5761                           
  5762                           	psect	intentry
  5763  0004                     __pintentry:	
  5764 ;; *************** function _isr *****************
  5765 ;; Defined at:
  5766 ;;		line 91 in file "main.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;		None
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;		None
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  1    wreg      void 
  5773 ;; Registers used:
  5774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 1F/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5780 ;;      Params:         0       0       0       0
  5781 ;;      Locals:         0       0       0       0
  5782 ;;      Temps:          0       2       0       0
  5783 ;;      Totals:         0       2       0       0
  5784 ;;Total ram usage:        2 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    1
  5787 ;; This function calls:
  5788 ;;		___lwdiv
  5789 ;;		i1___wmul
  5790 ;; This function is called by:
  5791 ;;		Interrupt level 1
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795  0004                     _isr:	
  5796                           
  5797                           ;incstack = 0
  5798  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5799                           
  5800                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5801  0005  3180               	pagesel	$
  5802                           
  5803                           ;main.c: 93: if (INTCONbits.IOCIF == 1 && IOCAFbits.IOCAF4 == 1)
  5804  0006  1C0B               	btfss	11,0	;volatile
  5805  0007  2821               	goto	i1l3586
  5806  0008  0027               	movlb	7	; select bank7
  5807  0009  1E13               	btfss	19,4	;volatile
  5808  000A  2821               	goto	i1l3586
  5809                           
  5810                           ;main.c: 94: {;main.c: 95: INTCONbits.IOCIE = 0;
  5811  000B  118B               	bcf	11,3	;volatile
  5812                           
  5813                           ;main.c: 96: counter++;
  5814  000C  0021               	movlb	1	; select bank1
  5815  000D  0ACD               	incf	_counter^(0+128),f
  5816  000E  1903               	skipnz
  5817  000F  0ACE               	incf	(_counter+1)^(0+128),f
  5818                           
  5819                           ;main.c: 97: if (LATAbits.LATA0 == 0) {
  5820  0010  0022               	movlb	2	; select bank2
  5821  0011  180C               	btfsc	12,0	;volatile
  5822  0012  2817               	goto	i1l3580
  5823                           
  5824                           ;main.c: 98: I2C_buffer.data.DISTANCE--;
  5825  0013  30FF               	movlw	255
  5826  0014  0021               	movlb	1	; select bank1
  5827  0015  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5828  0016  281B               	goto	L9
  5829  0017                     i1l3580:	
  5830                           ;main.c: 99: } else {
  5831                           
  5832                           
  5833                           ;main.c: 100: I2C_buffer.data.DISTANCE++;
  5834  0017  3001               	movlw	1
  5835  0018  0021               	movlb	1	; select bank1
  5836  0019  07AF               	addwf	(_I2C_buffer^(0+128)+15),f	;volatile
  5837  001A  3000               	movlw	0
  5838  001B                     L9:	
  5839  001B  3DB0               	addwfc	((_I2C_buffer+1)^(0+128)+15),f	;volatile
  5840  001C  3DB1               	addwfc	((_I2C_buffer+2)^(0+128)+15),f	;volatile
  5841  001D  3DB2               	addwfc	((_I2C_buffer+3)^(0+128)+15),f	;volatile
  5842                           
  5843                           ;main.c: 101: };main.c: 102: IOCAFbits.IOCAF4 = 0;
  5844  001E  0027               	movlb	7	; select bank7
  5845  001F  1213               	bcf	19,4	;volatile
  5846                           
  5847                           ;main.c: 103: INTCONbits.IOCIE = 1;
  5848  0020  158B               	bsf	11,3	;volatile
  5849  0021                     i1l3586:	
  5850                           
  5851                           ;main.c: 104: };main.c: 106: if (PIR1bits.TMR1IF == 1)
  5852  0021  0020               	movlb	0	; select bank0
  5853  0022  1C11               	btfss	17,0	;volatile
  5854  0023  285C               	goto	i1l3604
  5855                           
  5856                           ;main.c: 107: {;main.c: 108: INTCONbits.IOCIE = 0;
  5857  0024  118B               	bcf	11,3	;volatile
  5858                           
  5859                           ;main.c: 109: T1CONbits.TMR1ON = 0;
  5860  0025  1018               	bcf	24,0	;volatile
  5861                           
  5862                           ;main.c: 110: I2C_buffer.data.RPM = (counter * 300) / I2C_buffer.data.GEAR_RATIO;
  5863  0026  0021               	movlb	1	; select bank1
  5864  0027  0828               	movf	((_I2C_buffer+1)^(0+128)+7),w	;volatile
  5865  0028  00F7               	movwf	___lwdiv@divisor+1
  5866  0029  0827               	movf	(_I2C_buffer^(0+128)+7),w	;volatile
  5867  002A  00F6               	movwf	___lwdiv@divisor
  5868  002B  084E               	movf	(_counter+1)^(0+128),w
  5869  002C  00F1               	movwf	i1___wmul@multiplier+1
  5870  002D  084D               	movf	_counter^(0+128),w
  5871  002E  00F0               	movwf	i1___wmul@multiplier
  5872  002F  302C               	movlw	44
  5873  0030  00F2               	movwf	i1___wmul@multiplicand
  5874  0031  3001               	movlw	1
  5875  0032  00F3               	movwf	i1___wmul@multiplicand+1
  5876  0033  3186  2687  3180   	fcall	i1___wmul
  5877  0036  0871               	movf	?i1___wmul+1,w
  5878  0037  00F9               	movwf	___lwdiv@dividend+1
  5879  0038  0870               	movf	?i1___wmul,w
  5880  0039  00F8               	movwf	___lwdiv@dividend
  5881  003A  3186  2662  3180   	fcall	___lwdiv
  5882  003D  0877               	movf	?___lwdiv+1,w
  5883  003E  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5884  003F  0876               	movf	?___lwdiv,w
  5885  0040  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5886                           
  5887                           ;main.c: 111: counter = 0;
  5888  0041  01CD               	clrf	_counter^(0+128)
  5889  0042  01CE               	clrf	(_counter+1)^(0+128)
  5890                           
  5891                           ;main.c: 112: if (LATAbits.LATA0 == 0) {
  5892  0043  0022               	movlb	2	; select bank2
  5893  0044  180C               	btfsc	12,0	;volatile
  5894  0045  2858               	goto	i1l3598
  5895                           
  5896                           ;main.c: 113: I2C_buffer.data.RPM = I2C_buffer.data.RPM *-1;
  5897  0046  0021               	movlb	1	; select bank1
  5898  0047  092B               	comf	(_I2C_buffer^(0+128)+11),w	;volatile
  5899  0048  0020               	movlb	0	; select bank0
  5900  0049  00A0               	movwf	??_isr
  5901  004A  0021               	movlb	1	; select bank1
  5902  004B  092C               	comf	((_I2C_buffer+1)^(0+128)+11),w	;volatile
  5903  004C  0020               	movlb	0	; select bank0
  5904  004D  00A1               	movwf	??_isr+1
  5905  004E  0AA0               	incf	??_isr,f
  5906  004F  1903               	skipnz
  5907  0050  0AA1               	incf	??_isr+1,f
  5908  0051  0820               	movf	??_isr,w
  5909  0052  0021               	movlb	1	; select bank1
  5910  0053  00AB               	movwf	(_I2C_buffer^(0+128)+11)	;volatile
  5911  0054  0020               	movlb	0	; select bank0
  5912  0055  0821               	movf	??_isr+1,w
  5913  0056  0021               	movlb	1	; select bank1
  5914  0057  00AC               	movwf	((_I2C_buffer+1)^(0+128)+11)	;volatile
  5915  0058                     i1l3598:	
  5916                           
  5917                           ;main.c: 114: };main.c: 115: INTCONbits.IOCIE = 1;
  5918  0058  158B               	bsf	11,3	;volatile
  5919                           
  5920                           ;main.c: 116: PIR1bits.TMR1IF = 0;
  5921  0059  0020               	movlb	0	; select bank0
  5922  005A  1011               	bcf	17,0	;volatile
  5923                           
  5924                           ;main.c: 117: T1CONbits.TMR1ON = 1;
  5925  005B  1418               	bsf	24,0	;volatile
  5926  005C                     i1l3604:	
  5927                           
  5928                           ;main.c: 118: };main.c: 120: static unsigned char junk = 0;;main.c: 122: if (PIR1bits.SS
      +                          P1IF)
  5929  005C  1D91               	btfss	17,3	;volatile
  5930  005D  28B1               	goto	i1l3664
  5931                           
  5932                           ;main.c: 123: {;main.c: 124: INTCONbits.IOCIE = 0;
  5933  005E  118B               	bcf	11,3	;volatile
  5934                           
  5935                           ;main.c: 125: PIE1bits.TMR1IE = 0;
  5936  005F  0021               	movlb	1	; select bank1
  5937  0060  1011               	bcf	17,0	;volatile
  5938                           
  5939                           ;main.c: 126: if (SSP1STATbits.R_nW)
  5940  0061  0024               	movlb	4	; select bank4
  5941  0062  1D14               	btfss	20,2	;volatile
  5942  0063  2880               	goto	i1l3624
  5943                           
  5944                           ;main.c: 127: {;main.c: 128: if (!SSP1STATbits.D_nA)
  5945  0064  1A94               	btfsc	20,5	;volatile
  5946  0065  2872               	goto	i1l3616
  5947                           
  5948                           ;main.c: 129: {;main.c: 130: SSP1BUF = I2C_buffer.byte[index_i2c++];
  5949  0066  0021               	movlb	1	; select bank1
  5950  0067  084F               	movf	_index_i2c^(0+128),w
  5951  0068  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5952  0069  0086               	movwf	6
  5953  006A  0187               	clrf	7
  5954  006B  0801               	movf	1,w
  5955  006C  0024               	movlb	4	; select bank4
  5956  006D  0091               	movwf	17	;volatile
  5957  006E  0021               	movlb	1	; select bank1
  5958  006F  0ACF               	incf	_index_i2c^(0+128),f
  5959                           
  5960                           ;main.c: 131: SSP1CON1bits.CKP = 1;
  5961  0070  0024               	movlb	4	; select bank4
  5962  0071  1615               	bsf	21,4	;volatile
  5963  0072                     i1l3616:	
  5964                           
  5965                           ;main.c: 132: };main.c: 133: if (SSP1STATbits.D_nA)
  5966  0072  1E94               	btfss	20,5	;volatile
  5967  0073  2880               	goto	i1l3624
  5968                           
  5969                           ;main.c: 134: {;main.c: 135: SSP1BUF = I2C_buffer.byte[index_i2c++];
  5970  0074  0021               	movlb	1	; select bank1
  5971  0075  084F               	movf	_index_i2c^(0+128),w
  5972  0076  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  5973  0077  0086               	movwf	6
  5974  0078  0187               	clrf	7
  5975  0079  0801               	movf	1,w
  5976  007A  0024               	movlb	4	; select bank4
  5977  007B  0091               	movwf	17	;volatile
  5978  007C  0021               	movlb	1	; select bank1
  5979  007D  0ACF               	incf	_index_i2c^(0+128),f
  5980                           
  5981                           ;main.c: 136: SSP1CON1bits.CKP = 1;
  5982  007E  0024               	movlb	4	; select bank4
  5983  007F  1615               	bsf	21,4	;volatile
  5984  0080                     i1l3624:	
  5985                           
  5986                           ;main.c: 137: };main.c: 138: };main.c: 139: if (!SSP1STATbits.R_nW)
  5987  0080  1914               	btfsc	20,2	;volatile
  5988  0081  28AC               	goto	i1l3658
  5989                           
  5990                           ;main.c: 140: {;main.c: 141: if (!SSP1STATbits.D_nA)
  5991  0082  1A94               	btfsc	20,5	;volatile
  5992  0083  288A               	goto	i1l3634
  5993                           
  5994                           ;main.c: 142: {;main.c: 143: first_i2c = 1;
  5995  0084  0021               	movlb	1	; select bank1
  5996  0085  01ED               	clrf	_first_i2c^(0+128)
  5997  0086  0AED               	incf	_first_i2c^(0+128),f
  5998                           
  5999                           ;main.c: 144: junk = SSP1BUF;
  6000  0087  0024               	movlb	4	; select bank4
  6001  0088  0811               	movf	17,w	;volatile
  6002                           
  6003                           ;main.c: 145: SSP1CON1bits.CKP = 1;
  6004  0089  1615               	bsf	21,4	;volatile
  6005  008A                     i1l3634:	
  6006                           
  6007                           ;main.c: 146: };main.c: 147: if (SSP1STATbits.D_nA)
  6008  008A  1E94               	btfss	20,5	;volatile
  6009  008B  28AC               	goto	i1l3658
  6010                           
  6011                           ;main.c: 148: {;main.c: 149: if (first_i2c) {
  6012  008C  0021               	movlb	1	; select bank1
  6013  008D  086D               	movf	_first_i2c^(0+128),w
  6014  008E  1903               	btfsc	3,2
  6015  008F  2896               	goto	i1l3642
  6016                           
  6017                           ;main.c: 150: index_i2c = SSP1BUF;
  6018  0090  0024               	movlb	4	; select bank4
  6019  0091  0811               	movf	17,w	;volatile
  6020  0092  0021               	movlb	1	; select bank1
  6021  0093  00CF               	movwf	_index_i2c^(0+128)
  6022                           
  6023                           ;main.c: 151: first_i2c = 0;
  6024  0094  01ED               	clrf	_first_i2c^(0+128)
  6025                           
  6026                           ;main.c: 152: }
  6027  0095  28A6               	goto	i1l3650
  6028  0096                     i1l3642:	
  6029                           
  6030                           ;main.c: 154: else {;main.c: 155: if (index_i2c < RX_ELMNTS)
  6031  0096  302B               	movlw	43
  6032  0097  024F               	subwf	_index_i2c^(0+128),w
  6033  0098  1803               	skipnc
  6034  0099  28A4               	goto	i1l3648
  6035                           
  6036                           ;main.c: 156: {;main.c: 157: I2C_buffer.byte[index_i2c++] = SSP1BUF;
  6037  009A  084F               	movf	_index_i2c^(0+128),w
  6038  009B  3EA0               	addlw	(low (_I2C_buffer| 0))& (0+255)
  6039  009C  0086               	movwf	6
  6040  009D  0187               	clrf	7
  6041  009E  0024               	movlb	4	; select bank4
  6042  009F  0811               	movf	17,w	;volatile
  6043  00A0  0081               	movwf	1
  6044  00A1  0021               	movlb	1	; select bank1
  6045  00A2  0ACF               	incf	_index_i2c^(0+128),f
  6046                           
  6047                           ;main.c: 158: } else {
  6048  00A3  28A6               	goto	i1l3650
  6049  00A4                     i1l3648:	
  6050                           
  6051                           ;main.c: 159: junk = SSP1BUF;
  6052  00A4  0024               	movlb	4	; select bank4
  6053  00A5  0811               	movf	17,w	;volatile
  6054  00A6                     i1l3650:	
  6055                           
  6056                           ;main.c: 160: };main.c: 161: };main.c: 162: if (SSP1CON1bits.WCOL)
  6057  00A6  0024               	movlb	4	; select bank4
  6058  00A7  1F95               	btfss	21,7	;volatile
  6059  00A8  28AB               	goto	i1l3656
  6060                           
  6061                           ;main.c: 163: {;main.c: 164: SSP1CON1bits.WCOL = 0;
  6062  00A9  1395               	bcf	21,7	;volatile
  6063                           
  6064                           ;main.c: 165: junk = SSP1BUF;
  6065  00AA  0811               	movf	17,w	;volatile
  6066  00AB                     i1l3656:	
  6067                           
  6068                           ;main.c: 166: };main.c: 167: SSP1CON1bits.CKP = 1;
  6069  00AB  1615               	bsf	21,4	;volatile
  6070  00AC                     i1l3658:	
  6071                           
  6072                           ;main.c: 168: };main.c: 169: };main.c: 170: PIR1bits.SSP1IF = 0;
  6073  00AC  0020               	movlb	0	; select bank0
  6074  00AD  1191               	bcf	17,3	;volatile
  6075                           
  6076                           ;main.c: 171: INTCONbits.IOCIE = 1;
  6077  00AE  158B               	bsf	11,3	;volatile
  6078                           
  6079                           ;main.c: 172: PIE1bits.TMR1IE = 1;
  6080  00AF  0021               	movlb	1	; select bank1
  6081  00B0  1411               	bsf	17,0	;volatile
  6082  00B1                     i1l3664:	
  6083                           
  6084                           ;main.c: 173: };main.c: 175: if (PIR2bits.BCL1IF)
  6085  00B1  0020               	movlb	0	; select bank0
  6086  00B2  1D92               	btfss	18,3	;volatile
  6087  00B3  28BC               	goto	i1l119
  6088                           
  6089                           ;main.c: 176: {;main.c: 177: junk = SSP1BUF;
  6090  00B4  0024               	movlb	4	; select bank4
  6091  00B5  0811               	movf	17,w	;volatile
  6092                           
  6093                           ;main.c: 178: PIR2bits.BCL1IF = 0;
  6094  00B6  0020               	movlb	0	; select bank0
  6095  00B7  1192               	bcf	18,3	;volatile
  6096                           
  6097                           ;main.c: 179: SSP1CON1bits.CKP = 1;
  6098  00B8  0024               	movlb	4	; select bank4
  6099  00B9  1615               	bsf	21,4	;volatile
  6100                           
  6101                           ;main.c: 180: PIR1bits.SSP1IF = 0;
  6102  00BA  0020               	movlb	0	; select bank0
  6103  00BB  1191               	bcf	17,3	;volatile
  6104  00BC                     i1l119:	
  6105  00BC  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6106  00BD  0009               	retfie
  6107  00BE                     __end_of_isr:	
  6108                           
  6109                           	psect	text20
  6110  0687                     __ptext20:	
  6111 ;; *************** function i1___wmul *****************
  6112 ;; Defined at:
  6113 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  multiplier      2    0[COMMON] unsigned int 
  6116 ;;  multiplicand    2    2[COMMON] unsigned int 
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  __wmul          2    4[COMMON] unsigned int 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  2    0[COMMON] unsigned int 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0
  6123 ;; Tracked objects:
  6124 ;;		On entry : 1F/1
  6125 ;;		On exit  : 1F/1
  6126 ;;		Unchanged: 1F/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6128 ;;      Params:         4       0       0       0
  6129 ;;      Locals:         2       0       0       0
  6130 ;;      Temps:          0       0       0       0
  6131 ;;      Totals:         6       0       0       0
  6132 ;;Total ram usage:        6 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_isr
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function i1___wmul
  6143  0687                     i1___wmul:	
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6147  0687  01F4               	clrf	i1___wmul@product
  6148  0688  01F5               	clrf	i1___wmul@product+1
  6149  0689                     i1l3554:	
  6150  0689  1C70               	btfss	i1___wmul@multiplier,0
  6151  068A  2E8F               	goto	i1l3558
  6152  068B  0872               	movf	i1___wmul@multiplicand,w
  6153  068C  07F4               	addwf	i1___wmul@product,f
  6154  068D  0873               	movf	i1___wmul@multiplicand+1,w
  6155  068E  3DF5               	addwfc	i1___wmul@product+1,f
  6156  068F                     i1l3558:	
  6157  068F  35F2               	lslf	i1___wmul@multiplicand,f
  6158  0690  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6159  0691  36F1               	lsrf	i1___wmul@multiplier+1,f
  6160  0692  0CF0               	rrf	i1___wmul@multiplier,f
  6161  0693  0870               	movf	i1___wmul@multiplier,w
  6162  0694  0471               	iorwf	i1___wmul@multiplier+1,w
  6163  0695  1D03               	btfss	3,2
  6164  0696  2E89               	goto	i1l3554
  6165  0697  0875               	movf	i1___wmul@product+1,w
  6166  0698  00F1               	movwf	?i1___wmul+1
  6167  0699  0874               	movf	i1___wmul@product,w
  6168  069A  00F0               	movwf	?i1___wmul
  6169  069B  0008               	return
  6170  069C                     __end_ofi1___wmul:	
  6171                           
  6172                           	psect	text21
  6173  0662                     __ptext21:	
  6174 ;; *************** function ___lwdiv *****************
  6175 ;; Defined at:
  6176 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  divisor         2    6[COMMON] unsigned int 
  6179 ;;  dividend        2    8[COMMON] unsigned int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  quotient        2   11[COMMON] unsigned int 
  6182 ;;  counter         1   10[COMMON] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  2    6[COMMON] unsigned int 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0
  6187 ;; Tracked objects:
  6188 ;;		On entry : 1F/1
  6189 ;;		On exit  : 1F/1
  6190 ;;		Unchanged: 1F/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6192 ;;      Params:         4       0       0       0
  6193 ;;      Locals:         3       0       0       0
  6194 ;;      Temps:          0       0       0       0
  6195 ;;      Totals:         7       0       0       0
  6196 ;;Total ram usage:        7 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; This function calls:
  6199 ;;		Nothing
  6200 ;; This function is called by:
  6201 ;;		_isr
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           
  6206                           ;psect for function ___lwdiv
  6207  0662                     ___lwdiv:	
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6211  0662  01FB               	clrf	___lwdiv@quotient
  6212  0663  01FC               	clrf	___lwdiv@quotient+1
  6213  0664  0876               	movf	___lwdiv@divisor,w
  6214  0665  0477               	iorwf	___lwdiv@divisor+1,w
  6215  0666  1903               	btfsc	3,2
  6216  0667  2E82               	goto	i1l3548
  6217  0668  01FA               	clrf	___lwdiv@counter
  6218  0669                     L10:	
  6219  0669  0AFA               	incf	___lwdiv@counter,f
  6220  066A  1BF7               	btfsc	___lwdiv@divisor+1,7
  6221  066B  2E6F               	goto	i1l3536
  6222  066C  35F6               	lslf	___lwdiv@divisor,f
  6223  066D  0DF7               	rlf	___lwdiv@divisor+1,f
  6224  066E  2E69               	goto	L10
  6225  066F                     i1l3536:	
  6226  066F  35FB               	lslf	___lwdiv@quotient,f
  6227  0670  0DFC               	rlf	___lwdiv@quotient+1,f
  6228  0671  0877               	movf	___lwdiv@divisor+1,w
  6229  0672  0279               	subwf	___lwdiv@dividend+1,w
  6230  0673  1D03               	skipz
  6231  0674  2E77               	goto	u424_25
  6232  0675  0876               	movf	___lwdiv@divisor,w
  6233  0676  0278               	subwf	___lwdiv@dividend,w
  6234  0677                     u424_25:	
  6235  0677  1C03               	skipc
  6236  0678  2E7E               	goto	i1l3544
  6237  0679  0876               	movf	___lwdiv@divisor,w
  6238  067A  02F8               	subwf	___lwdiv@dividend,f
  6239  067B  0877               	movf	___lwdiv@divisor+1,w
  6240  067C  3BF9               	subwfb	___lwdiv@dividend+1,f
  6241  067D  147B               	bsf	___lwdiv@quotient,0
  6242  067E                     i1l3544:	
  6243  067E  36F7               	lsrf	___lwdiv@divisor+1,f
  6244  067F  0CF6               	rrf	___lwdiv@divisor,f
  6245  0680  0BFA               	decfsz	___lwdiv@counter,f
  6246  0681  2E6F               	goto	i1l3536
  6247  0682                     i1l3548:	
  6248  0682  087C               	movf	___lwdiv@quotient+1,w
  6249  0683  00F7               	movwf	?___lwdiv+1
  6250  0684  087B               	movf	___lwdiv@quotient,w
  6251  0685  00F6               	movwf	?___lwdiv
  6252  0686  0008               	return
  6253  0687                     __end_of___lwdiv:	
  6254  007E                     btemp	set	126	;btemp
  6255  007E                     int$flags	set	126
  6256  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     75      80
    BANK1            80     29      78
    BANK2            80      0      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwdiv
    ___lwdiv->i1___wmul

Critical Paths under _main in BANK0

    _main->_pre_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA
    _M_control->___fltol
    _init_I2C_buffer->_eeprom_read
    _calculate_pidA->___flsub
    ___xxtofl->_abs
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->__Umul8_16
    ___flge->___xxtofl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calculate_pidM
    _pre_pidM->_calculate_pidM
    _calculate_pidM->_calculate_pidA

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   61344
                                             24 BANK1      5     5      0
                          _M_control
                           _PWM_Init
                       _PWM_set_duty
                                _abs
                     _calculate_pidA
                     _calculate_pidM
                       _eeprom_write
                    _init_I2C_buffer
                           _pre_pidM
 ---------------------------------------------------------------------------------
 (1) _pre_pidM                                             4     2      2   19483
                                             71 BANK0      4     2      2
                                _abs (ARG)
                     _calculate_pidA (ARG)
                     _calculate_pidM
 ---------------------------------------------------------------------------------
 (2) _calculate_pidM                                      14    12      2   18999
                                             69 BANK0      2     0      2
                                             12 BANK1     12    12      0
                          _M_control
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                                _abs (ARG)
                     _calculate_pidA (ARG)
 ---------------------------------------------------------------------------------
 (3) _M_control                                            3     1      2    2089
                                             12 BANK0      3     1      2
                       _PWM_set_duty
                            ___fltol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     426
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _PWM_set_duty                                         4     2      2     453
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_I2C_buffer                                      0     0      0      22
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1    2400
                                              2 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _calculate_pidA                                      18    14      4   17224
                                             63 BANK0      6     2      4
                                              0 BANK1     12    12      0
                            ___fladd
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     674
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1047
                                              6 BANK0     14    10      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     517
                                              2 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4602
                                             55 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4177
                                             35 BANK0     20    12      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    4673
                                             10 BANK0     25    17      8
                          __Umul8_16
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            8     5      3    1419
                                              2 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     986
                                             20 BANK0     12     4      8
                           ___xxtofl (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0     627
                                              0 BANK0      2     2      0
                            ___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     206
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     421
                                              6 COMMON     7     3      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _M_control
     _PWM_set_duty
     ___fltol (ARG)
     ___wmul (ARG)
   _PWM_Init
   _PWM_set_duty
   _abs
   _calculate_pidA
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _abs
   _calculate_pidM
     _M_control
       _PWM_set_duty
       ___fltol (ARG)
       ___wmul (ARG)
     ___fladd
       ___flmul (ARG)
         __Umul8_16
     ___flge
       ___xxtofl (ARG)
         _abs (ARG)
       _abs (ARG)
     ___flmul
       __Umul8_16
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flmul (ARG)
         __Umul8_16
     ___fltol
     ___xxtofl
       _abs (ARG)
     _abs (ARG)
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
   _eeprom_write
   _init_I2C_buffer
     _eeprom_read
   _pre_pidM
     _abs (ARG)
     _calculate_pidA (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs
     _calculate_pidM (ARG)
       _M_control
         _PWM_set_duty
         ___fltol (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           __Umul8_16
       ___flge
         ___xxtofl (ARG)
           _abs (ARG)
         _abs (ARG)
       ___flmul
         __Umul8_16
       ___flsub
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flmul (ARG)
           __Umul8_16
       ___fltol
       ___xxtofl
         _abs (ARG)
       _abs (ARG)
       _calculate_pidA (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
         ___flge
           ___xxtofl (ARG)
             _abs (ARG)
           _abs (ARG)
         ___flmul
           __Umul8_16
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
           ___flmul (ARG)
             __Umul8_16
         ___fltol
         ___xxtofl
           _abs (ARG)
         _abs

 _isr (ROOT)
   ___lwdiv
     i1___wmul (ARG)
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      BC       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     1D      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      10      10       20.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      BC      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Sep 17 14:07:19 2018

                       pc 0002         calculate_pidA@pid 00D8               __CFG_CP$OFF 0000  
       calculate_pidA@set 005F         calculate_pidM@pid 00E4         calculate_pidM@set 0065  
     ___wmul@multiplicand 0024          i1___wmul@product 0074       __Umul8_16@word_mpld 0028  
                     l135 0DA2                       l136 0E07                       l145 0EC7  
                     l307 0B9A                       l158 0854                       l701 02A4  
                     l621 04DC                       l613 048A                       l702 02A2  
                     l630 0509                       l622 04E2                       l614 0488  
                     l631 050A                       l623 04E3                       l287 0654  
                     l608 046F                       l705 02BA                       l641 0574  
                     l609 046D                       l706 02B8                       l730 0E3A  
                     l723 0408                       l619 04EF                       l636 055B  
                     l743 0E6C                       l656 05A6                       l497 0F2F  
                     l499 0F5D                       l759 0457                       _PR2 001B  
            __CFG_CPD$OFF 0000                       _abs 0E8A                       _isr 0004  
            __CFG_BORV$LO 0000                       wreg 0009              ___flmul@aexp 0037  
            ___flmul@bexp 0038              ___flmul@sign 0036              ___flmul@temp 0041  
            ___flmul@prod 003D                      S3926 069C              __CFG_LVP$OFF 0000  
     calculate_pidA@error 00D4              ___fltol@exp1 002B                      ?_abs 0022  
                    l3100 0512                      l3110 0553                      l3202 043F  
                    l3130 057A                      l3140 0585                      l3124 0575  
                    l3116 0569                      l3214 044F                      l3038 0496  
                    l3222 0BB6                      l3208 0447                      l3160 05A2  
                    l3152 0596                      l3136 0583                      l3128 0578  
                    l3232 0BD5                      l3242 0F1E                      l3402 03E7  
                    l3330 02C8                      l3314 02A8                      l3082 04EA  
                    l3226 0BC0                      l3164 05A7                      l3068 04B4  
                    l3260 0FBC                      l3190 042F                      l3326 02BE  
                    l3262 0FC1                      l3430 0E45                      l3248 0F46  
                    l3184 0427                      l3408 03FA                      l3088 04F9  
                    l3280 0FE4                      l3178 041F                      l3442 0E5C  
                    l3434 0E47                      l3426 0E32                      l3522 0EDF  
                    l3196 0437                      l3276 0FDD                      l3460 0E81  
                    l3436 0E51                      l3516 0ECA                      l3286 0FE8  
                    l3446 0E6A                      l3384 03C0                      l3288 0FF1  
                    l3448 0E61                      l3464 00DD                      l3378 03AD  
                    l3482 0254                      l3802 0956                      l3388 03C2  
                    l3804 0960                      l3740 0859                      l3398 03D4  
                    l3486 0279                      l3814 0975                      l3742 085F  
                    l3816 0985                      l3744 0869                      l3826 09BA  
                    l3746 0874                      l2972 0EEE                      l3780 08EF  
                    l3756 0889                      l2982 0FA0                      l3838 09F9  
                    l3790 0904                      l3758 0899                      l3686 081A  
                    l3848 0A14                      l3768 08CE                      l3864 0A8B  
                    l2978 0F9A                      l3882 0AB9                      l3866 0A95  
                    l3868 0A9F                      l3878 0AB5                      ?_isr 0070  
            __CFG_WDTE$ON 0000           ?_calculate_pidA 005F           ?_calculate_pidM 0065  
                    u3300 04D3                      u3310 04D4                      u3403 0524  
                    u4150 0EA7                      u3175 0EF7                      u2561 0653  
                    u4164 0EA9                      u3295 04C8                      u4175 0EB2  
                    u4440 0818                      u4513 08C4                      u4195 0EC3  
                    u4613 09B0                      u4633 09F5                      u4563 0942  
                    u4707 0847                      u3765 0FCA                      u3685 0BCA  
                    u4717 0A99                      u4727 0B91                      u4663 0A52  
                    u4737 0ED5                      u4673 0A80                      u3985 03DD  
                    u3995 03F1                      _WPUA 020C            ??_eeprom_write 0023  
            __CFG_WRT$OFF 0000                      abs@a 0022       calculate_pidM@error 00E0  
                    _main 0806                      _lset 00CB                      fsr0h 0005  
                    fsr1h 0007                      indf0 0000                      fsr0l 0004  
                    indf1 0001                      fsr1l 0006                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 00BE             __CFG_IESO$OFF 0000  
                   ??_abs 0024                     ??_isr 0020             __CFG_PLLEN$ON 0000  
   __size_of_PWM_set_duty 001F             ___fltol@sign1 002A           __end_of___fladd 05AC  
                   ?_main 0070                     _EEADR 0191           __end_of___flmul 0413  
         __end_of___flsub 0F98           __end_of___fltol 1000                     _T1CON 0018  
                   _T2CON 001C           __end_of___lwdiv 0687                     i1l119 00BC  
                   _TRISA 008C             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
          __pbitbssCOMMON 03E8          __end_of_PWM_Init 0F7B          __end_ofi1___wmul 069C  
                   status 0003       i1___wmul@multiplier 0070                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000              _PWM_set_duty 0EEE           __initialization 00C0  
            __end_of_main 0B99                    ??_main 00E8        __size_of_M_control 0037  
                  _EEDATA 0193                    _CCPR1L 0291                    _EECON1 0195  
                  _EECON2 0196                    _ANSELA 018C                    i1l3604 005C  
                  i1l3544 067E                    i1l3536 066F                    i1l3616 0072  
                  i1l3624 0080                    i1l3554 0689                    i1l3650 00A6  
                  i1l3642 0096                    i1l3634 008A                    i1l3548 0682  
                  i1l3580 0017                    i1l3558 068F                    i1l3656 00AB  
                  i1l3648 00A4                    i1l3664 00B1                    i1l3658 00AC  
                  i1l3586 0021                    i1l3598 0058                    _INTCON 000B  
                  u424_25 0677                    _OSCCON 0099          __end_of___xxtofl 0E8A  
            _accumulatorA 0124              _accumulatorM 012C      __size_of_eeprom_read 0012  
                  ___flge 0F0D                 ??___fladd 004B                    ___wmul 0F98  
          __CFG_STVREN$ON 0000                 ??___flmul 0032                 ??___flsub 005F  
               ??___fltol 0026                 ??___lwdiv 007A      __end_of_eeprom_write 0BB6  
__size_of_init_I2C_buffer 00A4          __end_of_pre_pidM 0EEE        __size_of__Umul8_16 0049  
              ___flge@ff1 0034                ___flge@ff2 0038              ___xxtofl@arg 0030  
            ___xxtofl@exp 002F              ___xxtofl@val 0026   __end_of__initialization 00D9  
         eeprom_read@addr 0022                ___fltol@f1 0022            __pcstackCOMMON 0070  
            __pidataBANK1 0000         __end_of_M_control 0BED                 ?_PWM_Init 0070  
               ?i1___wmul 0070            _OPTION_REGbits 0095          ??_calculate_pidA 0063  
        ??_calculate_pidM 0067         eeprom_write@value 0022                __pbssBANK0 006B  
              __pbssBANK1 00A0                __pbssBANK2 0120         __end_of__Umul8_16 045C  
              __pmaintext 0806                   ?___flge 0034                   ?___wmul 0022  
              __pintentry 0004                   _CCP1CON 0293                ??_PWM_Init 0022  
              ??i1___wmul 0074       _calculate_pidA$1317 00D0                 ?___xxtofl 0026  
     _calculate_pidM$1318 00DC                   _SSP1ADD 0212                   _SSP1BUF 0211  
       ??_init_I2C_buffer 0023          PWM_set_duty@duty 0022                 ?_pre_pidM 0067  
   __size_of_eeprom_write 001D           __size_of___flge 0062                   ___fladd 045C  
                 ___flmul 0291                   ___flsub 0F7B                   ___fltol 0FAD  
         __size_of___wmul 0015                   ___lwdiv 0662                _lasterrorA 0120  
              _lasterrorM 0128                   __ptext1 0E98                   __ptext2 00DD  
                 __ptext3 0BB6                   __ptext4 0F98                   __ptext5 0EEE  
                 __ptext6 05AC                   __ptext7 0650                   __ptext8 0B99  
                 __ptext9 0BED               pre_pidM@set 0067                 _T1CONbits 0018  
                 _counter 00CD              __size_of_abs 000E              __size_of_isr 00BA  
              ??___xxtofl 002A                 _IOCAFbits 0393                 _IOCANbits 0392  
                 clrloop0 06AD      end_of_initialization 00D9              _eeprom_write 0B99  
              ??_pre_pidM 0069     i1___wmul@multiplicand 0072                 _PORTAbits 000C  
             ___fladd@grs 0056          __CFG_FOSC$INTOSC 0000             ___xxtofl@sign 002E  
             ___flmul@grs 0039             ??_eeprom_read 0022                _zero_cross 0378  
          __end_of___flge 0F6F            __end_of___wmul 0FAD                 _M_control 0BB6  
           __pbitbssBANK0 0378         __size_of_PWM_Init 000C       start_initialization 00C0  
       __size_ofi1___wmul 0015               __end_of_abs 0E98               __end_of_isr 00BE  
            _loadDistance 03E8                  ??___flge 003C                  ??___wmul 0026  
     __end_of_eeprom_read 0662                 __Umul8_16 0413               __pdataBANK1 00ED  
              ?_M_control 002C           _init_I2C_buffer 05AC                 ___fladd@a 0047  
               ___fladd@b 0043                 ___flmul@a 002E                 ___flmul@b 002A  
               ___flsub@a 0057                 ___flsub@b 005B                 ___latbits 0001  
           __pcstackBANK0 0020             __pcstackBANK1 00D0         __size_of___xxtofl 006D  
        eeprom_write@addr 0023             ?_PWM_set_duty 0022          ___lwdiv@dividend 0078  
                ?___fladd 0043                  ?___flmul 002A                  ?___flsub 0057  
                ?___fltol 0022         __size_of_pre_pidM 0056                ?__Umul8_16 0022  
                ?___lwdiv 0076                 __pswtext1 069C                 _first_i2c 00ED  
               _index_i2c 00CF          ___lwdiv@quotient 007B            ___wmul@product 0026  
                _LATAbits 010C   __size_of_calculate_pidA 0230   __size_of_calculate_pidM 01B4  
               clear_ram0 06AC               _eeprom_read 0650                  _PIE1bits 0091  
                _PIE2bits 0092            ??_PWM_set_duty 0024               _auxDistance 006B  
                _PIR1bits 0011                  _PIR2bits 0012   __end_of_init_I2C_buffer 0650  
                _SSP1CON1 0215                  _SSP1STAT 0214               ??_M_control 002E  
                _PWM_Init 0F6F         ___wmul@multiplier 0022                  i1___wmul 0687  
              _I2C_buffer 00A0                _EECON1bits 0195                _APFCONbits 011D  
             ??__Umul8_16 0025          __size_of___fladd 0150          __size_of___flmul 0182  
        __size_of___flsub 001D          __size_of___fltol 0053          __size_of___lwdiv 0025  
                ___xxtofl 0E1D           ___lwdiv@divisor 0076           ___lwdiv@counter 007A  
                __ptext10 0E8A                  __ptext11 0E1D                  __ptext20 0687  
                __ptext12 0FAD                  __ptext21 0662                  __ptext13 0F7B  
                __ptext14 045C                  __ptext15 0291                  __ptext16 0413  
                __ptext17 0F0D                  __ptext18 0F6F              _SSP1CON1bits 0215  
            _SSP1CON2bits 0216              _SSP1CON3bits 0217             __size_of_main 0393  
                _pre_pidM 0E98          ?_init_I2C_buffer 0070                  int$flags 007E  
            _SSP1STATbits 0214                _INTCONbits 000B      __end_of_PWM_set_duty 0F0D  
                intlevel1 0000            _calculate_pidA 0BED            _calculate_pidM 00DD  
       __CFG_CLKOUTEN$OFF 0000    __Umul8_16@multiplicand 0022             ___fladd@signs 0053  
  __end_of_calculate_pidA 0E1D    __end_of_calculate_pidM 0291             ?_eeprom_write 0022  
            ___fladd@aexp 0054              ___fladd@bexp 0055              M_control@ctr 002C  
              _STATUSbits 0003      __Umul8_16@multiplier 0027              ?_eeprom_read 0070  
       __Umul8_16@product 0025  
